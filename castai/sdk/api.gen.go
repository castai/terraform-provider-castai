// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package sdk

import (
	"encoding/json"
	"fmt"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CastaiV1Cloud.
const (
	AWS     CastaiV1Cloud = "AWS"
	AZURE   CastaiV1Cloud = "AZURE"
	Aws     CastaiV1Cloud = "aws"
	Azure   CastaiV1Cloud = "azure"
	GCP     CastaiV1Cloud = "GCP"
	Gcp     CastaiV1Cloud = "gcp"
	INVALID CastaiV1Cloud = "INVALID"
	Invalid CastaiV1Cloud = "invalid"
)

// Defines values for ExternalclusterV1NodeType.
const (
	Master          ExternalclusterV1NodeType = "master"
	NODETYPEINVALID ExternalclusterV1NodeType = "NODE_TYPE_INVALID"
	NODETYPEMASTER  ExternalclusterV1NodeType = "NODE_TYPE_MASTER"
	NODETYPEWORKER  ExternalclusterV1NodeType = "NODE_TYPE_WORKER"
	Worker          ExternalclusterV1NodeType = "worker"
)

// Defines values for NodeconfigV1ContainerRuntime.
const (
	CONTAINERD  NodeconfigV1ContainerRuntime = "CONTAINERD"
	Containerd  NodeconfigV1ContainerRuntime = "containerd"
	DOCKERD     NodeconfigV1ContainerRuntime = "DOCKERD"
	Dockerd     NodeconfigV1ContainerRuntime = "dockerd"
	UNSPECIFIED NodeconfigV1ContainerRuntime = "UNSPECIFIED"
	Unspecified NodeconfigV1ContainerRuntime = "unspecified"
)

// Defines values for NodetemplatesV1AvailableInstanceTypeStorageOptimizedOption.
const (
	Always   NodetemplatesV1AvailableInstanceTypeStorageOptimizedOption = "Always"
	Never    NodetemplatesV1AvailableInstanceTypeStorageOptimizedOption = "Never"
	OnDemand NodetemplatesV1AvailableInstanceTypeStorageOptimizedOption = "OnDemand"
)

// Defines values for PoliciesV1EvictorStatus.
const (
	Compatible   PoliciesV1EvictorStatus = "Compatible"
	Incompatible PoliciesV1EvictorStatus = "Incompatible"
	Missing      PoliciesV1EvictorStatus = "Missing"
	Unknown      PoliciesV1EvictorStatus = "Unknown"
)

// AuthToken defines model for AuthToken.
type AuthToken struct {
	// Indicates whether this auth token is active.
	Active *bool `json:"active,omitempty"`

	// Auth token creation UTC time in RFC3339 format.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Auth token deletion UTC time in RFC3339 format.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Auth token ID, generated at the time of creation
	Id *string `json:"id,omitempty"`

	// Auth token last used UTC time in RFC3339 format.
	LastUsedAt *time.Time `json:"lastUsedAt,omitempty"`

	// Name of the token. Must be unique among other active tokens for the current user.
	Name string `json:"name"`

	// Indicates whether auth token has readonly permissions.
	Readonly bool `json:"readonly"`
}

// AuthTokenCreateResponse defines model for AuthTokenCreateResponse.
type AuthTokenCreateResponse struct {
	// Indicates whether this auth token is active.
	Active *bool `json:"active,omitempty"`

	// Auth token creation UTC time in RFC3339 format.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Auth token ID, generated at the time of creation
	Id *string `json:"id,omitempty"`

	// Name of the token. Must be unique among other active tokens for the current user.
	Name string `json:"name"`

	// Indicates whether auth token has readonly permissions.
	Readonly bool `json:"readonly"`

	// Generated secret for this auth token (only shown once on creation)
	Token *string `json:"token,omitempty"`
}

// AuthTokenList defines model for AuthTokenList.
type AuthTokenList struct {
	Items []AuthToken `json:"items"`
}

// AuthTokenUpdateRequest defines model for AuthTokenUpdateRequest.
type AuthTokenUpdateRequest struct {
	// Indicates whether this auth token is active.
	Active bool `json:"active"`
}

// OperationResponse defines model for OperationResponse.
type OperationResponse struct {
	// Operation creation time in RFC3339Nano format.
	CreatedAt time.Time `json:"createdAt"`

	// Indicates whether the operation is done. If 'true', the operation has finished. If 'false', the operation is still in progress.
	Done bool `json:"done"`

	// Error details for the operation. Only populated when the operation is done and has failed. If operation has completed successfully, the error will not be set.
	Error *struct {
		// Human readable caption text describing the error reason.
		Details string `json:"details"`

		// Reason is an operation specific failure code. Refer to documentation of the endpoint which generated the long-running operation about possible outcomes. Common error reasons:
		// * `internal_error`: An unknown error occurred. Retry the operation.
		Reason string `json:"reason"`
	} `json:"error,omitempty"`

	// Operation finishe time in RFC3339Nano format.
	FinishedAt *time.Time `json:"finishedAt,omitempty"`

	// ID of the operation.
	Id string `json:"id"`
}

// CastaiMetricsV1beta1ClusterMetrics defines model for castai.metrics.v1beta1.ClusterMetrics.
type CastaiMetricsV1beta1ClusterMetrics struct {
	CpuAllocatableCores    *float32 `json:"cpuAllocatableCores,omitempty"`
	CpuRequestedCores      *float32 `json:"cpuRequestedCores,omitempty"`
	MemoryAllocatableGib   *float32 `json:"memoryAllocatableGib,omitempty"`
	MemoryRequestedGib     *float32 `json:"memoryRequestedGib,omitempty"`
	OnDemandNodesCount     *int32   `json:"onDemandNodesCount,omitempty"`
	SpotFallbackNodesCount *int32   `json:"spotFallbackNodesCount,omitempty"`
	SpotNodesCount         *int32   `json:"spotNodesCount,omitempty"`
}

// Types of cloud service providers CAST AI supports.
//
//   - invalid: Invalid.
//   - aws: Amazon web services.
//   - gcp: Google cloud provider.
//   - azure: Microsoft Azure.
type CastaiV1Cloud string

// AKSClusterParams defines AKS-specific arguments.
type ExternalclusterV1AKSClusterParams struct {
	// Deprecated. This field is no longer updatable and node configuration equivalent should be used.
	MaxPodsPerNode *int32 `json:"maxPodsPerNode,omitempty"`

	// Network plugin in use by the cluster. Can be `kubenet` or `azure`.
	NetworkPlugin *string `json:"networkPlugin,omitempty"`

	// Node resource group of the cluster.
	NodeResourceGroup *string `json:"nodeResourceGroup,omitempty"`

	// Region of the cluster.
	Region *string `json:"region,omitempty"`

	// Azure subscription ID where cluster runs.
	SubscriptionId *string `json:"subscriptionId,omitempty"`
}

// AddNodeResponse is the result of AddNodeRequest.
type ExternalclusterV1AddNodeResponse struct {
	// The ID of the node.
	NodeId string `json:"nodeId"`

	// Add node operation ID.
	OperationId string `json:"operationId"`
}

// CloudEvent represents a remote event that happened in the cloud, e.g. "node added".
type ExternalclusterV1CloudEvent struct {
	// Event type.
	EventType *string `json:"eventType,omitempty"`

	// Node provider ID, eg.: aws instance-id.
	Node *string `json:"node,omitempty"`

	// Cast node ID.
	NodeId *string `json:"nodeId"`

	// Node state.
	NodeState *string `json:"nodeState,omitempty"`
}

// Cluster represents external kubernetes cluster.
type ExternalclusterV1Cluster struct {
	// The date agent snapshot was last received.
	AgentSnapshotReceivedAt *time.Time `json:"agentSnapshotReceivedAt,omitempty"`

	// Agent status.
	AgentStatus *string `json:"agentStatus,omitempty"`

	// AKSClusterParams defines AKS-specific arguments.
	Aks *ExternalclusterV1AKSClusterParams `json:"aks,omitempty"`

	// All available zones in cluster's region.
	AllRegionZones *[]ExternalclusterV1Zone `json:"allRegionZones,omitempty"`

	// User friendly unique cluster identifier.
	ClusterNameId *string `json:"clusterNameId,omitempty"`

	// The date when cluster was registered.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The cluster's credentials ID.
	CredentialsId *string `json:"credentialsId,omitempty"`

	// EKSClusterParams defines EKS-specific arguments.
	Eks *ExternalclusterV1EKSClusterParams `json:"eks,omitempty"`

	// Timestamp when the first operation was performed for a given cluster, which marks when cluster optimisation started by CAST AI.
	FirstOperationAt *time.Time `json:"firstOperationAt,omitempty"`

	// GKEClusterParams defines GKE-specific arguments.
	Gke *ExternalclusterV1GKEClusterParams `json:"gke,omitempty"`

	// The cluster's ID.
	Id *string `json:"id,omitempty"`

	// KOPSClusterParams defines KOPS-specific arguments.
	Kops              *ExternalclusterV1KOPSClusterParams `json:"kops,omitempty"`
	KubernetesVersion *string                             `json:"kubernetesVersion"`

	// Method used to onboard the cluster, eg.: console, terraform.
	ManagedBy *string                             `json:"managedBy,omitempty"`
	Metrics   *CastaiMetricsV1beta1ClusterMetrics `json:"metrics,omitempty"`

	// The name of the external cluster.
	Name *string `json:"name,omitempty"`

	// OpenShiftClusterParams defines OpenShift-specific arguments.
	Openshift *ExternalclusterV1OpenshiftClusterParams `json:"openshift,omitempty"`

	// The cluster's organization ID.
	OrganizationId *string `json:"organizationId,omitempty"`

	// Cluster location where cloud provider organizes cloud resources, eg.: GCP project ID, AWS account ID.
	ProviderNamespaceId *string `json:"providerNamespaceId,omitempty"`

	// Cluster cloud provider type.
	ProviderType *string `json:"providerType,omitempty"`

	// Shows last reconcile error if any.
	ReconcileError *string `json:"reconcileError"`

	// Timestamp when the last reconcile was performed.
	ReconciledAt *time.Time `json:"reconciledAt"`

	// Region represents cluster region.
	Region *ExternalclusterV1Region `json:"region,omitempty"`

	// Deprecated. Node configuration equivalent should be used.
	SshPublicKey *string `json:"sshPublicKey"`

	// Current status of the cluster.
	Status *string `json:"status,omitempty"`

	// Cluster subnets.
	Subnets *[]ExternalclusterV1Subnet `json:"subnets,omitempty"`

	// Cluster zones.
	Zones *[]ExternalclusterV1Zone `json:"zones,omitempty"`
}

// ExternalclusterV1ClusterUpdate defines model for externalcluster.v1.ClusterUpdate.
type ExternalclusterV1ClusterUpdate struct {
	// JSON encoded cluster credentials string.
	Credentials *string `json:"credentials,omitempty"`

	// UpdateEKSClusterParams defines updatable EKS cluster configuration.
	Eks *ExternalclusterV1UpdateEKSClusterParams `json:"eks,omitempty"`
}

// ExternalclusterV1CreateClusterTokenResponse defines model for externalcluster.v1.CreateClusterTokenResponse.
type ExternalclusterV1CreateClusterTokenResponse struct {
	Token *string `json:"token,omitempty"`
}

// DeleteNodeResponse is the result of DeleteNodeRequest.
type ExternalclusterV1DeleteNodeResponse struct {
	// Node delete operation ID.
	OperationId *string `json:"operationId,omitempty"`
}

// ExternalclusterV1DisconnectConfig defines model for externalcluster.v1.DisconnectConfig.
type ExternalclusterV1DisconnectConfig struct {
	// Whether CAST provisioned nodes should be deleted.
	DeleteProvisionedNodes *bool `json:"deleteProvisionedNodes,omitempty"`

	// Whether CAST Kubernetes resources should be kept.
	KeepKubernetesResources *bool `json:"keepKubernetesResources,omitempty"`
}

// ExternalclusterV1DrainConfig defines model for externalcluster.v1.DrainConfig.
type ExternalclusterV1DrainConfig struct {
	// If set to true, pods will be forcefully deleted after drain timeout.
	Force *bool `json:"force,omitempty"`

	// Node drain timeout in seconds. Defaults to 600s if not set.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// DrainNodeResponse is the result of DrainNodeRequest.
type ExternalclusterV1DrainNodeResponse struct {
	// Drain node operation ID.
	OperationId string `json:"operationId"`
}

// EKSClusterParams defines EKS-specific arguments.
type ExternalclusterV1EKSClusterParams struct {
	// AWS Account ID where cluster runs.
	AccountId     *string `json:"accountId,omitempty"`
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`

	// Name of the cluster.
	ClusterName  *string `json:"clusterName,omitempty"`
	DnsClusterIp *string `json:"dnsClusterIp,omitempty"`

	// Deprecated. Output only. Cluster's instance profile ARN used for CAST provisioned nodes.
	InstanceProfileArn *string `json:"instanceProfileArn,omitempty"`

	// Region of the cluster.
	Region *string `json:"region,omitempty"`

	// Deprecated. Output only. Cluster's security groups configuration.
	SecurityGroups *[]string `json:"securityGroups,omitempty"`

	// Deprecated. Output only. Cluster's subnets configuration.
	Subnets *[]string `json:"subnets,omitempty"`

	// Deprecated. Output only. CAST provisioned nodes tags configuration.
	Tags *ExternalclusterV1EKSClusterParams_Tags `json:"tags,omitempty"`
}

// Deprecated. Output only. CAST provisioned nodes tags configuration.
type ExternalclusterV1EKSClusterParams_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// GKEClusterParams defines GKE-specific arguments.
type ExternalclusterV1GKEClusterParams struct {
	// Name of the cluster.
	ClusterName *string `json:"clusterName,omitempty"`

	// Location of the cluster.
	Location *string `json:"location,omitempty"`

	// Max pods per node. Default is 110.
	MaxPodsPerNode *int32 `json:"maxPodsPerNode,omitempty"`

	// GCP project ID where cluster runs.
	ProjectId *string `json:"projectId,omitempty"`

	// Region of the cluster.
	Region *string `json:"region,omitempty"`
}

// GPUConfig describes instance GPU configuration.
//
// Required while provisioning GCP N1 instance types with GPU.
// Eg.: n1-standard-2 with 8 x NVIDIA Tesla K80
type ExternalclusterV1GPUConfig struct {
	// Number of GPUs.
	Count *int32 `json:"count,omitempty"`

	// GPU type.
	Type *string `json:"type,omitempty"`
}

// ExternalclusterV1GPUDevice defines model for externalcluster.v1.GPUDevice.
type ExternalclusterV1GPUDevice struct {
	Count        *int32  `json:"count,omitempty"`
	Manufacturer *string `json:"manufacturer,omitempty"`
	MemoryMib    *int32  `json:"memoryMib,omitempty"`
}

// ExternalclusterV1GPUInfo defines model for externalcluster.v1.GPUInfo.
type ExternalclusterV1GPUInfo struct {
	GpuDevices *[]ExternalclusterV1GPUDevice `json:"gpuDevices,omitempty"`
}

// ExternalclusterV1GetAssumeRoleUserResponse defines model for externalcluster.v1.GetAssumeRoleUserResponse.
type ExternalclusterV1GetAssumeRoleUserResponse struct {
	Arn *string `json:"arn,omitempty"`
}

// GetCredentialsScriptResponse is the result of GetCredentialsScriptRequest.
type ExternalclusterV1GetCredentialsScriptResponse struct {
	Script *string `json:"script,omitempty"`
}

// HandleCloudEventResponse is the result of HandleCloudEventRequest.
type ExternalclusterV1HandleCloudEventResponse = map[string]interface{}

// KOPSClusterParams defines KOPS-specific arguments.
type ExternalclusterV1KOPSClusterParams struct {
	// Cloud provider of the cluster.
	Cloud *string `json:"cloud,omitempty"`

	// Name of the cluster.
	ClusterName *string `json:"clusterName,omitempty"`

	// Region of the cluster.
	Region *string `json:"region,omitempty"`

	// KOPS state store url.
	StateStore *string `json:"stateStore,omitempty"`
}

// ListClustersResponse is the result of ListClustersRequest.
type ExternalclusterV1ListClustersResponse struct {
	Items *[]ExternalclusterV1Cluster `json:"items,omitempty"`
}

// ExternalclusterV1ListNodesResponse defines model for externalcluster.v1.ListNodesResponse.
type ExternalclusterV1ListNodesResponse struct {
	Items      *[]ExternalclusterV1Node `json:"items,omitempty"`
	NextCursor *string                  `json:"nextCursor,omitempty"`
}

// Node represents a single VM that run as Kubernetes master or worker.
type ExternalclusterV1Node struct {
	AddedBy *string `json:"addedBy,omitempty"`
	Cloud   *string `json:"cloud,omitempty"`

	// created_at represents timestamp of when node was created in cloud infrastructure.
	CreatedAt *time.Time                `json:"createdAt,omitempty"`
	GpuInfo   *ExternalclusterV1GPUInfo `json:"gpuInfo,omitempty"`
	Id        *string                   `json:"id,omitempty"`

	// Deprecated. Use node_info architecture field.
	InstanceArchitecture *string `json:"instanceArchitecture"`

	// Will be populated only with GetNode request.
	InstanceId *string `json:"instanceId"`

	// Will be populated only with GetNode request.
	InstanceLabels *ExternalclusterV1Node_InstanceLabels `json:"instanceLabels,omitempty"`

	// Will be populated only with GetNode request.
	InstanceName  *string `json:"instanceName"`
	InstancePrice *string `json:"instancePrice"`
	InstanceType  *string `json:"instanceType,omitempty"`

	// joined_at represents timestamp of when node has joined kubernetes cluster.
	JoinedAt *time.Time                    `json:"joinedAt,omitempty"`
	Labels   *ExternalclusterV1Node_Labels `json:"labels,omitempty"`
	Name     *string                       `json:"name,omitempty"`

	// NodeNetwork represents node network.
	Network             *ExternalclusterV1NodeNetwork `json:"network,omitempty"`
	NodeConfigurationId *string                       `json:"nodeConfigurationId"`
	NodeInfo            *ExternalclusterV1NodeInfo    `json:"nodeInfo,omitempty"`
	Region              *string                       `json:"region,omitempty"`
	Resources           *ExternalclusterV1Resources   `json:"resources,omitempty"`

	// NodeType defines the role of the VM when joining the Kubernetes cluster. Default value is not allowed.
	Role  *ExternalclusterV1NodeType `json:"role,omitempty"`
	Shape *string                    `json:"shape,omitempty"`

	// NodeSpotConfig defines if node should be created as spot instance, and params for creation.
	SpotConfig *ExternalclusterV1NodeSpotConfig `json:"spotConfig,omitempty"`

	// NodeState contains feedback information about progress on the node provisioning.
	State         *ExternalclusterV1NodeState `json:"state,omitempty"`
	Taints        *[]ExternalclusterV1Taint   `json:"taints,omitempty"`
	Unschedulable *bool                       `json:"unschedulable,omitempty"`
	Zone          *string                     `json:"zone,omitempty"`
}

// Will be populated only with GetNode request.
type ExternalclusterV1Node_InstanceLabels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ExternalclusterV1Node_Labels defines model for ExternalclusterV1Node.Labels.
type ExternalclusterV1Node_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ExternalclusterV1NodeConfig defines model for externalcluster.v1.NodeConfig.
type ExternalclusterV1NodeConfig struct {
	// ID reference of Node configuration (template) to be used for node creation. Supersedes Configuration Name.
	ConfigurationId *string `json:"configurationId"`

	// Name reference of Node configuration (template)to be used for node creation.
	// Superseded if Configuration ID reference is provided.
	// Request will fail if several configurations with same name exists for a given cluster.
	ConfigurationName *string `json:"configurationName"`

	// GPUConfig describes instance GPU configuration.
	//
	// Required while provisioning GCP N1 instance types with GPU.
	// Eg.: n1-standard-2 with 8 x NVIDIA Tesla K80
	GpuConfig *ExternalclusterV1GPUConfig `json:"gpuConfig,omitempty"`

	// Instance type of the node.
	InstanceType string `json:"instanceType"`

	// Node Kubernetes labels.
	KubernetesLabels *ExternalclusterV1NodeConfig_KubernetesLabels `json:"kubernetesLabels,omitempty"`

	// Node Kubernetes taints.
	KubernetesTaints *[]ExternalclusterV1Taint `json:"kubernetesTaints,omitempty"`

	// NodeSpotConfig defines if node should be created as spot instance, and params for creation.
	SpotConfig *ExternalclusterV1NodeSpotConfig `json:"spotConfig,omitempty"`

	// Node subnet ID.
	SubnetId *string `json:"subnetId"`

	// NodeVolume defines node's local root volume configuration.
	Volume *ExternalclusterV1NodeVolume `json:"volume,omitempty"`

	// Zone of the node.
	Zone *string `json:"zone"`
}

// Node Kubernetes labels.
type ExternalclusterV1NodeConfig_KubernetesLabels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ExternalclusterV1NodeInfo defines model for externalcluster.v1.NodeInfo.
type ExternalclusterV1NodeInfo struct {
	Architecture            *string `json:"architecture,omitempty"`
	ContainerRuntimeVersion *string `json:"containerRuntimeVersion,omitempty"`
	KernelVersion           *string `json:"kernelVersion,omitempty"`
	KubeProxyVersion        *string `json:"kubeProxyVersion,omitempty"`
	KubeletVersion          *string `json:"kubeletVersion,omitempty"`
	OperatingSystem         *string `json:"operatingSystem,omitempty"`
	OsImage                 *string `json:"osImage,omitempty"`
}

// NodeNetwork represents node network.
type ExternalclusterV1NodeNetwork struct {
	PrivateIp *string `json:"privateIp,omitempty"`
	PublicIp  *string `json:"publicIp,omitempty"`
}

// NodeSpotConfig defines if node should be created as spot instance, and params for creation.
type ExternalclusterV1NodeSpotConfig struct {
	// Whether node should be created as spot instance.
	IsSpot *bool `json:"isSpot,omitempty"`

	// Spot instance price. Applicable only for AWS nodes.
	Price *string `json:"price,omitempty"`
}

// NodeState contains feedback information about progress on the node provisioning.
type ExternalclusterV1NodeState struct {
	Phase *string `json:"phase,omitempty"`
}

// NodeType defines the role of the VM when joining the Kubernetes cluster. Default value is not allowed.
type ExternalclusterV1NodeType string

// NodeVolume defines node's local root volume configuration.
type ExternalclusterV1NodeVolume struct {
	// RaidConfig allow You have two or more devices, of approximately the same size, and you want to combine their storage capacity
	// and also combine their performance by accessing them in parallel.
	RaidConfig *ExternalclusterV1RaidConfig `json:"raidConfig,omitempty"`

	// Volume size in GiB.
	Size *int32 `json:"size,omitempty"`
}

// OpenShiftClusterParams defines OpenShift-specific arguments.
type ExternalclusterV1OpenshiftClusterParams struct {
	// Cloud provider of the cluster.
	Cloud *string `json:"cloud,omitempty"`

	// Name of the cluster.
	ClusterName *string `json:"clusterName,omitempty"`
	InternalId  *string `json:"internalId,omitempty"`

	// Region of the cluster.
	Region *string `json:"region,omitempty"`
}

// RaidConfig allow You have two or more devices, of approximately the same size, and you want to combine their storage capacity
// and also combine their performance by accessing them in parallel.
type ExternalclusterV1RaidConfig struct {
	// Specify the RAID0 chunk size in kilobytes, this parameter affects the read/write in the disk array and must be tailored
	// for the type of data written by the workloads in the node. If not provided it will default to 64KB.
	ChunkSize *int32 `json:"chunkSize"`
}

// ReconcileClusterResponse is the result of ReconcileClusterRequest.
type ExternalclusterV1ReconcileClusterResponse = map[string]interface{}

// Region represents cluster region.
type ExternalclusterV1Region struct {
	// Display name of the region.
	DisplayName *string `json:"displayName,omitempty"`

	// Name of the region.
	Name *string `json:"name,omitempty"`
}

// RegisterClusterRequest registers cluster.
type ExternalclusterV1RegisterClusterRequest struct {
	// AKSClusterParams defines AKS-specific arguments.
	Aks *ExternalclusterV1AKSClusterParams `json:"aks,omitempty"`

	// EKSClusterParams defines EKS-specific arguments.
	Eks *ExternalclusterV1EKSClusterParams `json:"eks,omitempty"`

	// GKEClusterParams defines GKE-specific arguments.
	Gke *ExternalclusterV1GKEClusterParams `json:"gke,omitempty"`

	// The ID of the cluster.
	Id *string `json:"id,omitempty"`

	// KOPSClusterParams defines KOPS-specific arguments.
	Kops *ExternalclusterV1KOPSClusterParams `json:"kops,omitempty"`

	// The name of the cluster.
	Name string `json:"name"`

	// OpenShiftClusterParams defines OpenShift-specific arguments.
	Openshift *ExternalclusterV1OpenshiftClusterParams `json:"openshift,omitempty"`

	// Organization of the cluster.
	OrganizationId *string `json:"organizationId,omitempty"`
}

// ExternalclusterV1Resources defines model for externalcluster.v1.Resources.
type ExternalclusterV1Resources struct {
	CpuAllocatableMilli *int32 `json:"cpuAllocatableMilli,omitempty"`
	CpuCapacityMilli    *int32 `json:"cpuCapacityMilli,omitempty"`
	CpuRequestsMilli    *int32 `json:"cpuRequestsMilli,omitempty"`
	MemAllocatableMib   *int32 `json:"memAllocatableMib,omitempty"`
	MemCapacityMib      *int32 `json:"memCapacityMib,omitempty"`
	MemRequestsMib      *int32 `json:"memRequestsMib,omitempty"`
}

// Subnet represents cluster subnet.
type ExternalclusterV1Subnet struct {
	// Cidr block of the subnet.
	Cidr *string `json:"cidr,omitempty"`

	// The ID of the subnet.
	Id *string `json:"id,omitempty"`

	// Deprecated. Subnet name is not filled and should not be used.
	Name *string `json:"name,omitempty"`

	// Public defines if subnet is publicly routable.
	// Optional. Populated for EKS provider only.
	Public *bool `json:"public"`

	// Subnet's zone name.
	ZoneName *string `json:"zoneName,omitempty"`
}

// Taint defines node taint in kubernetes cluster.
type ExternalclusterV1Taint struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

// UpdateEKSClusterParams defines updatable EKS cluster configuration.
type ExternalclusterV1UpdateEKSClusterParams struct {
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
}

// Cluster zone.
type ExternalclusterV1Zone struct {
	// ID of the zone.
	Id *string `json:"id,omitempty"`

	// Zone name.
	Name *string `json:"name,omitempty"`
}

// NodeconfigV1AKSConfig defines model for nodeconfig.v1.AKSConfig.
type NodeconfigV1AKSConfig struct {
	// Maximum number of pods that can be run on a node, which affects how many IP addresses you will need for each node. Defaults to 30.
	// With the Azure CNI plugin you can specify a value between 10 and 250 inclusive, and with the kubenet plugin you can specify a value between 10 and 110 inclusive.
	MaxPodsPerNode *int32 `json:"maxPodsPerNode,omitempty"`
}

// List of supported container runtimes kubelet should use.
type NodeconfigV1ContainerRuntime string

// NodeconfigV1DeleteConfigurationResponse defines model for nodeconfig.v1.DeleteConfigurationResponse.
type NodeconfigV1DeleteConfigurationResponse = map[string]interface{}

// NodeconfigV1EKSConfig defines model for nodeconfig.v1.EKSConfig.
type NodeconfigV1EKSConfig struct {
	// IP address to use for DNS queries within the cluster. Defaults to 10.100.0.10 or 172.20.0.10 based on the IP address of the primary interface.
	DnsClusterIp *string `json:"dnsClusterIp"`

	// Cluster's instance profile ARN used for CAST provisioned nodes.
	InstanceProfileArn string `json:"instanceProfileArn"`

	// AWS key pair ID to be used for provisioned nodes. Has priority over sshPublicKey.
	KeyPairId *string `json:"keyPairId"`

	// Cluster's security groups configuration.
	SecurityGroups *[]string `json:"securityGroups,omitempty"`

	// EBS volume IOPS value to be used for provisioned nodes.
	VolumeIops *int32 `json:"volumeIops"`

	// EBS volume throughput in MiB/s to be used for provisioned nodes.
	VolumeThroughput *int32 `json:"volumeThroughput"`

	// EBS volume type to be used for provisioned nodes. Defaults to gp3.
	VolumeType *string `json:"volumeType"`
}

// NodeconfigV1GKEConfig defines model for nodeconfig.v1.GKEConfig.
type NodeconfigV1GKEConfig struct {
	// Maximum number of pods that can be run on a node, which affects how many IP addresses you will need for each node. Defaults to 110.
	// For Standard GKE clusters, you can run a maximum of 256 Pods on a node with a /23 range, not 512 as you might expect. This provides a buffer so that Pods don't become unschedulable due to a transient lack of IP addresses in the Pod IP range for a given node.
	// For all ranges, at most half as many Pods can be scheduled as IP addresses in the range.
	MaxPodsPerNode *int32 `json:"maxPodsPerNode,omitempty"`

	// Network tags to be added on a VM. Each tag must be 1-63 characters long, start with a lowercase letter and end with either a number or a lowercase letter.
	NetworkTags *[]string `json:"networkTags,omitempty"`
}

// NodeconfigV1GetSuggestedConfigurationResponse defines model for nodeconfig.v1.GetSuggestedConfigurationResponse.
type NodeconfigV1GetSuggestedConfigurationResponse struct {
	SecurityGroups *[]NodeconfigV1SecurityGroup `json:"securityGroups,omitempty"`
	Subnets        *[]NodeconfigV1SubnetDetails `json:"subnets,omitempty"`
}

// NodeconfigV1KOPSConfig defines model for nodeconfig.v1.KOPSConfig.
type NodeconfigV1KOPSConfig struct {
	// AWS key pair ID to be used for provisioned nodes. Has priority over sshPublicKey.
	KeyPairId *string `json:"keyPairId"`
}

// NodeconfigV1ListConfigurationsResponse defines model for nodeconfig.v1.ListConfigurationsResponse.
type NodeconfigV1ListConfigurationsResponse struct {
	Items *[]NodeconfigV1NodeConfiguration `json:"items,omitempty"`
}

// NodeconfigV1NewNodeConfiguration defines model for nodeconfig.v1.NewNodeConfiguration.
type NodeconfigV1NewNodeConfiguration struct {
	Aks *NodeconfigV1AKSConfig `json:"aks,omitempty"`

	// List of supported container runtimes kubelet should use.
	ContainerRuntime *NodeconfigV1ContainerRuntime `json:"containerRuntime,omitempty"`

	// Disk to CPU ratio. Sets the number of GiBs to be added for every CPU on the node. The root volume will have a minimum of 100GiB and will be further increased based on value.
	DiskCpuRatio *int32 `json:"diskCpuRatio,omitempty"`

	// Optional docker daemon configuration properties. Provide only properties that you want to override. Available values https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file
	DockerConfig *map[string]interface{} `json:"dockerConfig,omitempty"`
	Eks          *NodeconfigV1EKSConfig  `json:"eks,omitempty"`
	Gke          *NodeconfigV1GKEConfig  `json:"gke,omitempty"`

	// Image to be used while provisioning the node. If nothing is provided will be resolved to latest available image based on Kubernetes version if possible.
	Image *string `json:"image"`

	// Init script to be run on your instance at launch. Should not contain any sensitive data. Value should be base64 encoded.
	InitScript *string                 `json:"initScript"`
	Kops       *NodeconfigV1KOPSConfig `json:"kops,omitempty"`

	// Optional kubelet configuration properties. Applicable for EKS only.
	KubeletConfig *map[string]interface{} `json:"kubeletConfig,omitempty"`

	// Minimal disk size in GiB. Defaults to 100.
	MinDiskSize *int32 `json:"minDiskSize"`

	// The name of the node configuration.
	Name string `json:"name"`

	// Optional SSH public key to be used for provisioned nodes. Value should be base64 encoded.
	SshPublicKey *string `json:"sshPublicKey"`

	// Subnet ids to be used for provisioned nodes.
	Subnets *[]string `json:"subnets,omitempty"`

	// Tags to be added on cloud instances for provisioned nodes.
	Tags *NodeconfigV1NewNodeConfiguration_Tags `json:"tags,omitempty"`
}

// Tags to be added on cloud instances for provisioned nodes.
type NodeconfigV1NewNodeConfiguration_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// NodeconfigV1NodeConfiguration defines model for nodeconfig.v1.NodeConfiguration.
type NodeconfigV1NodeConfiguration struct {
	Aks *NodeconfigV1AKSConfig `json:"aks,omitempty"`

	// List of supported container runtimes kubelet should use.
	ContainerRuntime *NodeconfigV1ContainerRuntime `json:"containerRuntime,omitempty"`

	// The date when node configuration was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Whether node configuration is the default one.
	Default *bool `json:"default,omitempty"`

	// Disk to CPU ratio.
	DiskCpuRatio *int32 `json:"diskCpuRatio,omitempty"`

	// Optional docker daemon configuration properties. Applicable for EKS only.
	DockerConfig *map[string]interface{} `json:"dockerConfig"`
	Eks          *NodeconfigV1EKSConfig  `json:"eks,omitempty"`
	Gke          *NodeconfigV1GKEConfig  `json:"gke,omitempty"`

	// The node configuration ID.
	Id *string `json:"id,omitempty"`

	// Image to be used while provisioning the node. If nothing is provided will be resolved to latest available image based on Kubernetes version if possible.
	Image *string `json:"image"`

	// Base64 encoded init script to be run on your instance at launch.
	InitScript *string                 `json:"initScript"`
	Kops       *NodeconfigV1KOPSConfig `json:"kops,omitempty"`

	// Optional kubelet configuration properties. Applicable for EKS only.
	KubeletConfig *map[string]interface{} `json:"kubeletConfig"`

	// Minimal disk size in GiB.
	MinDiskSize *int32 `json:"minDiskSize,omitempty"`

	// The name of the node configuration.
	Name *string `json:"name,omitempty"`

	// Base64 encoded ssh public key to be used for provisioned nodes.
	SshPublicKey *string `json:"sshPublicKey"`

	// Subnet ids to be used for provisioned nodes.
	Subnets *[]string `json:"subnets,omitempty"`

	// Tags to be added on cloud instances for provisioned nodes.
	Tags *NodeconfigV1NodeConfiguration_Tags `json:"tags,omitempty"`

	// The date when node configuration was updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// The version of the node configuration.
	Version *int32 `json:"version,omitempty"`
}

// Tags to be added on cloud instances for provisioned nodes.
type NodeconfigV1NodeConfiguration_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// NodeconfigV1NodeConfigurationUpdate defines model for nodeconfig.v1.NodeConfigurationUpdate.
type NodeconfigV1NodeConfigurationUpdate struct {
	Aks *NodeconfigV1AKSConfig `json:"aks,omitempty"`

	// List of supported container runtimes kubelet should use.
	ContainerRuntime *NodeconfigV1ContainerRuntime `json:"containerRuntime,omitempty"`

	// Disk to CPU ratio. Sets the number of GiBs to be added for every CPU on the node. The root volume will have a minimum of 100GiB and will be further increased based on value.
	DiskCpuRatio *int32 `json:"diskCpuRatio,omitempty"`

	// Optional docker daemon configuration properties. Provide only properties that you want to override. Available values https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file
	DockerConfig *map[string]interface{} `json:"dockerConfig,omitempty"`
	Eks          *NodeconfigV1EKSConfig  `json:"eks,omitempty"`
	Gke          *NodeconfigV1GKEConfig  `json:"gke,omitempty"`

	// Image to be used while provisioning the node. If nothing is provided will be resolved to latest available image based on Kubernetes version if possible.
	Image *string `json:"image"`

	// Init script to be run on your instance at launch. Should not contain any sensitive data. Value should be base64 encoded.
	InitScript *string                 `json:"initScript"`
	Kops       *NodeconfigV1KOPSConfig `json:"kops,omitempty"`

	// Optional kubelet configuration properties. Applicable for EKS only.
	KubeletConfig *map[string]interface{} `json:"kubeletConfig,omitempty"`

	// Minimal disk size in GiB. Defaults to 100.
	MinDiskSize *int32 `json:"minDiskSize"`

	// Optional SSH public key to be used for provisioned nodes. Value should be base64 encoded.
	SshPublicKey *string `json:"sshPublicKey"`

	// Subnet ids to be used for provisioned nodes.
	Subnets *[]string `json:"subnets,omitempty"`

	// Tags to be added on cloud instances for provisioned nodes.
	Tags *NodeconfigV1NodeConfigurationUpdate_Tags `json:"tags,omitempty"`
}

// Tags to be added on cloud instances for provisioned nodes.
type NodeconfigV1NodeConfigurationUpdate_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// NodeconfigV1SecurityGroup defines model for nodeconfig.v1.SecurityGroup.
type NodeconfigV1SecurityGroup struct {
	// A description of the security group.
	Description *string `json:"description,omitempty"`

	// The ID of the security group.
	Id *string `json:"id,omitempty"`

	// The name of the security group.
	Name *string `json:"name,omitempty"`
}

// SubnetDetails contains all subnet attributes relevant for node configuration.
type NodeconfigV1SubnetDetails struct {
	// Available Ip Address populated for EKS provider only.
	AvailableIpAddressCount *int32 `json:"availableIpAddressCount"`

	// Cidr block of the subnet.
	Cidr *string `json:"cidr,omitempty"`

	// The ID of the subnet.
	Id *string `json:"id,omitempty"`

	// Cluster zone.
	Zone *ExternalclusterV1Zone `json:"zone,omitempty"`
}

// NodetemplatesV1AvailableInstanceType defines model for nodetemplates.v1.AvailableInstanceType.
type NodetemplatesV1AvailableInstanceType struct {
	AvailableGpuDevices    *[]NodetemplatesV1AvailableInstanceTypeGPUDevice            `json:"availableGpuDevices,omitempty"`
	Cpu                    *string                                                     `json:"cpu,omitempty"`
	CpuCost                *float64                                                    `json:"cpuCost,omitempty"`
	Family                 *string                                                     `json:"family,omitempty"`
	IsComputeOptimized     *bool                                                       `json:"isComputeOptimized,omitempty"`
	Memory                 *string                                                     `json:"memory,omitempty"`
	Name                   *string                                                     `json:"name,omitempty"`
	StorageOptimizedOption *NodetemplatesV1AvailableInstanceTypeStorageOptimizedOption `json:"storageOptimizedOption,omitempty"`
}

// NodetemplatesV1AvailableInstanceTypeGPUDevice defines model for nodetemplates.v1.AvailableInstanceType.GPUDevice.
type NodetemplatesV1AvailableInstanceTypeGPUDevice struct {
	Count        *int32  `json:"count,omitempty"`
	Manufacturer *string `json:"manufacturer,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// NodetemplatesV1AvailableInstanceTypeStorageOptimizedOption defines model for nodetemplates.v1.AvailableInstanceType.StorageOptimizedOption.
type NodetemplatesV1AvailableInstanceTypeStorageOptimizedOption string

// NodetemplatesV1DeleteNodeTemplateResponse defines model for nodetemplates.v1.DeleteNodeTemplateResponse.
type NodetemplatesV1DeleteNodeTemplateResponse = map[string]interface{}

// NodetemplatesV1FilterInstanceTypesResponse defines model for nodetemplates.v1.FilterInstanceTypesResponse.
type NodetemplatesV1FilterInstanceTypesResponse struct {
	AvailableInstanceTypes *[]NodetemplatesV1AvailableInstanceType `json:"availableInstanceTypes,omitempty"`
}

// NodetemplatesV1Label defines model for nodetemplates.v1.Label.
type NodetemplatesV1Label struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NodetemplatesV1ListNodeTemplatesResponse defines model for nodetemplates.v1.ListNodeTemplatesResponse.
type NodetemplatesV1ListNodeTemplatesResponse struct {
	Items *[]NodetemplatesV1NodeTemplateListItem `json:"items,omitempty"`
}

// NodetemplatesV1NewNodeTemplate defines model for nodetemplates.v1.NewNodeTemplate.
type NodetemplatesV1NewNodeTemplate struct {
	ConfigurationId   *string                                  `json:"configurationId,omitempty"`
	Constraints       *NodetemplatesV1TemplateConstraints      `json:"constraints,omitempty"`
	CustomLabel       *NodetemplatesV1Label                    `json:"customLabel,omitempty"`
	Name              *string                                  `json:"name,omitempty"`
	RebalancingConfig *NodetemplatesV1RebalancingConfiguration `json:"rebalancingConfig,omitempty"`

	// Marks whether the templated nodes will have a taint.
	ShouldTaint *bool `json:"shouldTaint"`
}

// NodetemplatesV1NodeTemplate defines model for nodetemplates.v1.NodeTemplate.
type NodetemplatesV1NodeTemplate struct {
	ConfigurationId   *string                                  `json:"configurationId,omitempty"`
	ConfigurationName *string                                  `json:"configurationName,omitempty"`
	Constraints       *NodetemplatesV1TemplateConstraints      `json:"constraints,omitempty"`
	CustomLabel       *NodetemplatesV1Label                    `json:"customLabel,omitempty"`
	Name              *string                                  `json:"name,omitempty"`
	RebalancingConfig *NodetemplatesV1RebalancingConfiguration `json:"rebalancingConfig,omitempty"`

	// Marks whether the templated nodes will have a taint.
	ShouldTaint *bool   `json:"shouldTaint,omitempty"`
	Version     *string `json:"version,omitempty"`
}

// NodetemplatesV1NodeTemplateListItem defines model for nodetemplates.v1.NodeTemplateListItem.
type NodetemplatesV1NodeTemplateListItem struct {
	Stats    *NodetemplatesV1NodeTemplateListItemStats `json:"stats,omitempty"`
	Template *NodetemplatesV1NodeTemplate              `json:"template,omitempty"`
}

// NodetemplatesV1NodeTemplateListItemStats defines model for nodetemplates.v1.NodeTemplateListItem.Stats.
type NodetemplatesV1NodeTemplateListItemStats struct {
	CountFallback *int32 `json:"countFallback,omitempty"`
	CountOnDemand *int32 `json:"countOnDemand,omitempty"`
	CountSpot     *int32 `json:"countSpot,omitempty"`
}

// NodetemplatesV1RebalancingConfiguration defines model for nodetemplates.v1.RebalancingConfiguration.
type NodetemplatesV1RebalancingConfiguration struct {
	MinNodes *int32 `json:"minNodes"`
}

// NodetemplatesV1TemplateConstraints defines model for nodetemplates.v1.TemplateConstraints.
type NodetemplatesV1TemplateConstraints struct {
	ComputeOptimized *bool `json:"computeOptimized"`

	// Fallback restore rate in seconds: defines how much time should pass before spot fallback should be attempted to be restored to real spot.
	FallbackRestoreRateSeconds *int32                                                       `json:"fallbackRestoreRateSeconds"`
	Gpu                        *NodetemplatesV1TemplateConstraintsGPUConstraints            `json:"gpu,omitempty"`
	InstanceFamilies           *NodetemplatesV1TemplateConstraintsInstanceFamilyConstraints `json:"instanceFamilies,omitempty"`
	MaxCpu                     *int32                                                       `json:"maxCpu"`
	MaxMemory                  *int32                                                       `json:"maxMemory"`
	MinCpu                     *int32                                                       `json:"minCpu"`
	MinMemory                  *int32                                                       `json:"minMemory"`
	Spot                       *bool                                                        `json:"spot"`
	StorageOptimized           *bool                                                        `json:"storageOptimized"`

	// Spot instance fallback constraint - when true, on-demand instances will be created, when spots are unavailable.
	UseSpotFallbacks *bool `json:"useSpotFallbacks"`
}

// NodetemplatesV1TemplateConstraintsGPUConstraints defines model for nodetemplates.v1.TemplateConstraints.GPUConstraints.
type NodetemplatesV1TemplateConstraintsGPUConstraints struct {
	ExcludeNames  *[]string `json:"excludeNames,omitempty"`
	IncludeNames  *[]string `json:"includeNames,omitempty"`
	Manufacturers *[]string `json:"manufacturers,omitempty"`
	MaxCount      *int32    `json:"maxCount"`
	MinCount      *int32    `json:"minCount"`
}

// NodetemplatesV1TemplateConstraintsInstanceFamilyConstraints defines model for nodetemplates.v1.TemplateConstraints.InstanceFamilyConstraints.
type NodetemplatesV1TemplateConstraintsInstanceFamilyConstraints struct {
	Exclude *[]string `json:"exclude,omitempty"`
	Include *[]string `json:"include,omitempty"`
}

// NodetemplatesV1UpdateNodeTemplate defines model for nodetemplates.v1.UpdateNodeTemplate.
type NodetemplatesV1UpdateNodeTemplate struct {
	ConfigurationId   *string                                  `json:"configurationId,omitempty"`
	Constraints       *NodetemplatesV1TemplateConstraints      `json:"constraints,omitempty"`
	CustomLabel       *NodetemplatesV1Label                    `json:"customLabel,omitempty"`
	RebalancingConfig *NodetemplatesV1RebalancingConfiguration `json:"rebalancingConfig,omitempty"`

	// Marks whether the templated nodes will have a taint.
	ShouldTaint *bool `json:"shouldTaint"`
}

// Defines the minimum and maximum amount of vCPUs for cluster's worker nodes.
type PoliciesV1ClusterLimitsCpu struct {
	// Defines the maximum allowed amount of vCPUs in the whole cluster.
	MaxCores *int32 `json:"maxCores,omitempty"`

	// Defines the minimum allowed amount of CPUs in the whole cluster.
	MinCores *int32 `json:"minCores,omitempty"`
}

// Defines minimum and maximum amount of CPU the cluster can have.
type PoliciesV1ClusterLimitsPolicy struct {
	// Defines the minimum and maximum amount of vCPUs for cluster's worker nodes.
	Cpu *PoliciesV1ClusterLimitsCpu `json:"cpu,omitempty"`

	// Enable/disable cluster size limits policy.
	Enabled *bool `json:"enabled"`
}

// Defines the CAST AI Evictor component settings. Evictor watches the pods running in your cluster and looks for
// ways to compact them into fewer nodes, making nodes empty, which will be removed by the the empty worker nodes
// policy.
type PoliciesV1Evictor struct {
	// Enable/disable aggressive mode. By default, Evictor does not target nodes that are running unreplicated pods.
	// This mode will make the Evictor start considering application with just a single replica.
	AggressiveMode *bool `json:"aggressiveMode"`

	// * We have detected an already existing Evictor installation. If you want CAST AI to manage the Evictor instead,
	//   then you will need to remove the current installation first.
	//
	// Deprecated; use "status" instead.
	Allowed *bool `json:"allowed"`

	// Configure the interval duration between Evictor operations. This property can be used to lower or raise the
	// frequency of the Evictor's find-and-drain operations.
	CycleInterval *string `json:"cycleInterval"`

	// Enable/disable dry-run. This property allows you to prevent the Evictor from carrying any operations out and
	// preview the actions it would take.
	DryRun *bool `json:"dryRun"`

	// Enable/disable the Evictor policy. This will either install or uninstall the Evictor component in your cluster.
	Enabled *bool `json:"enabled"`

	// Configure the node grace period which controls the duration which must pass after a node has been created before
	// Evictor starts considering that node.
	NodeGracePeriodMinutes *int32 `json:"nodeGracePeriodMinutes"`

	// Enable/disable scoped mode. By default, Evictor targets all nodes in the cluster. This mode will constrain in to
	// just the nodes which were created by CAST AI.
	ScopedMode *bool                    `json:"scopedMode"`
	Status     *PoliciesV1EvictorStatus `json:"status,omitempty"`
}

// PoliciesV1EvictorStatus defines model for policies.v1.EvictorStatus.
type PoliciesV1EvictorStatus string

// Defines cluster node constraints response.
type PoliciesV1GetClusterNodeConstraintsResponse struct {
	// The ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// A list of viable CPU:Memory combinations.
	Items *[]PoliciesV1GetClusterNodeConstraintsResponseCpuRam `json:"items,omitempty"`
}

// A viable CPU:Memory combination.
type PoliciesV1GetClusterNodeConstraintsResponseCpuRam struct {
	// Number of CPUs.
	CpuCores *int32 `json:"cpuCores,omitempty"`

	// Number of memory in MiB.
	RamMib *int32 `json:"ramMib,omitempty"`
}

// Defines Headroom for Unschedulable Pods.
type PoliciesV1Headroom struct {
	// Defines percentage of additional CPU capacity to be added.
	CpuPercentage *int32 `json:"cpuPercentage,omitempty"`

	// Defines whether Headroom is enabled.
	Enabled          *bool  `json:"enabled"`
	MemoryPercentage *int32 `json:"memoryPercentage,omitempty"`
}

// Defines the NodeConstraints that will be applied when autoscaling with UnschedulablePodsPolicy.
type PoliciesV1NodeConstraints struct {
	// Defines whether NodeConstraints are enabled.
	Enabled *bool `json:"enabled"`

	// Defines max CPU cores for the node to pick.
	MaxCpuCores *int32 `json:"maxCpuCores,omitempty"`

	// Defines max RAM in MiB for the node to pick.
	MaxRamMib *int32 `json:"maxRamMib,omitempty"`

	// Defines min CPU cores for the node to pick.
	MinCpuCores *int32 `json:"minCpuCores,omitempty"`

	// Defines min RAM in MiB for the node to pick.
	MinRamMib *int32 `json:"minRamMib,omitempty"`
}

// Node Downscaler defines policies for removing nodes based on the configured conditions.
type PoliciesV1NodeDownscaler struct {
	// Defines whether Node Downscaler should opt in for removing empty worker nodes when possible.
	EmptyNodes *PoliciesV1NodeDownscalerEmptyNodes `json:"emptyNodes,omitempty"`

	// Enable/disable node downscaler policy.
	Enabled *bool `json:"enabled"`

	// Defines the CAST AI Evictor component settings. Evictor watches the pods running in your cluster and looks for
	// ways to compact them into fewer nodes, making nodes empty, which will be removed by the the empty worker nodes
	// policy.
	Evictor *PoliciesV1Evictor `json:"evictor,omitempty"`
}

// Defines whether Node Downscaler should opt in for removing empty worker nodes when possible.
type PoliciesV1NodeDownscalerEmptyNodes struct {
	// * increasing the value will make the cluster more responsive to dynamic
	// * workloads in the expense of higher cluster cost.
	DelaySeconds *int32 `json:"delaySeconds"`

	// Enable/disable the empty worker nodes policy.
	Enabled *bool `json:"enabled"`
}

// Defines the autoscaling policies details.
type PoliciesV1Policies struct {
	// Defines minimum and maximum amount of CPU the cluster can have.
	ClusterLimits *PoliciesV1ClusterLimitsPolicy `json:"clusterLimits,omitempty"`

	// Enable/disable all policies.
	Enabled *bool `json:"enabled"`

	// Run autoscaler in scoped mode. Only specifically marked pods will be considered for autoscaling, and only nodes
	// provisioned by autoscaler will be considered for downscaling.
	IsScopedMode *bool `json:"isScopedMode"`

	// Node Downscaler defines policies for removing nodes based on the configured conditions.
	NodeDownscaler *PoliciesV1NodeDownscaler `json:"nodeDownscaler,omitempty"`

	// Policy defining whether autoscaler can use spot instances for provisioning additional workloads.
	SpotInstances *PoliciesV1SpotInstances `json:"spotInstances,omitempty"`

	// Policy defining autoscaler's behavior when unscedulable pods were detected.
	UnschedulablePods *PoliciesV1UnschedulablePodsPolicy `json:"unschedulablePods,omitempty"`
}

// Policy defining whether autoscaler can use spot backups instead of spot instances when spot instances are not
// available.
type PoliciesV1SpotBackups struct {
	// Enable/disable spot backups policy.
	Enabled *bool `json:"enabled"`

	// Defines interval on how often spot backups restore to real spot should occur.
	SpotBackupRestoreRateSeconds *int32 `json:"spotBackupRestoreRateSeconds"`
}

// Policy defining whether autoscaler can use spot instances for provisioning additional workloads.
type PoliciesV1SpotInstances struct {
	// Enable spot instances for these cloud service providers.
	Clouds *[]CastaiV1Cloud `json:"clouds,omitempty"`

	// Enable/disable spot instances policy.
	Enabled *bool `json:"enabled"`

	// Max allowed reclaim rate when choosing spot instance type. E.g. if the value is 10%, instance types having 10% or
	// higher reclaim rate will not be considered. Set to zero to use all instance types regardless of reclaim rate.
	MaxReclaimRate *int32 `json:"maxReclaimRate"`

	// Policy defining whether autoscaler can use spot backups instead of spot instances when spot instances are not
	// available.
	SpotBackups *PoliciesV1SpotBackups `json:"spotBackups,omitempty"`
}

// Policy defining autoscaler's behavior when unscedulable pods were detected.
type PoliciesV1UnschedulablePodsPolicy struct {
	// Defines custom instance usage settings.
	CustomInstancesEnabled *bool `json:"customInstancesEnabled"`

	// Defines default ratio of 1 CPU to Volume GiB  which will be summed with minimum value when creating new nodes.
	// If set to 5, the ration would be: 1 CPU : 5 GiB.
	// For example a node with 16 CPU would have (16 * 5 GiB) + minimum(100GiB) = 180 GiB volume size.
	// Deprecated. Input only (for backwards-compatibility, ignored).
	DiskGibToCpuRatio *int32 `json:"diskGibToCpuRatio"`

	// Enable/disable unschedulable pods detection policy.
	Enabled *bool `json:"enabled"`

	// Defines Headroom for Unschedulable Pods.
	Headroom *PoliciesV1Headroom `json:"headroom,omitempty"`

	// Defines Headroom for Unschedulable Pods.
	HeadroomSpot *PoliciesV1Headroom `json:"headroomSpot,omitempty"`

	// Defines the NodeConstraints that will be applied when autoscaling with UnschedulablePodsPolicy.
	NodeConstraints *PoliciesV1NodeConstraints `json:"nodeConstraints,omitempty"`
}

// AuthTokenId defines model for authTokenId.
type AuthTokenId = string

// ClusterId defines model for clusterId.
type ClusterId = string

// CredentialsId defines model for credentialsId.
type CredentialsId = string

// HeaderOrganizationId defines model for headerOrganizationId.
type HeaderOrganizationId = openapi_types.UUID

// ListAuthTokensParams defines parameters for ListAuthTokens.
type ListAuthTokensParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// CreateAuthTokenJSONBody defines parameters for CreateAuthToken.
type CreateAuthTokenJSONBody = AuthToken

// CreateAuthTokenParams defines parameters for CreateAuthToken.
type CreateAuthTokenParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// DeleteAuthTokenParams defines parameters for DeleteAuthToken.
type DeleteAuthTokenParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// GetAuthTokenParams defines parameters for GetAuthToken.
type GetAuthTokenParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// UpdateAuthTokenJSONBody defines parameters for UpdateAuthToken.
type UpdateAuthTokenJSONBody = AuthTokenUpdateRequest

// UpdateAuthTokenParams defines parameters for UpdateAuthToken.
type UpdateAuthTokenParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// NodeTemplatesAPIFilterInstanceTypesJSONBody defines parameters for NodeTemplatesAPIFilterInstanceTypes.
type NodeTemplatesAPIFilterInstanceTypesJSONBody = NodetemplatesV1NodeTemplate

// NodeConfigurationAPICreateConfigurationJSONBody defines parameters for NodeConfigurationAPICreateConfiguration.
type NodeConfigurationAPICreateConfigurationJSONBody = NodeconfigV1NewNodeConfiguration

// NodeConfigurationAPIUpdateConfigurationJSONBody defines parameters for NodeConfigurationAPIUpdateConfiguration.
type NodeConfigurationAPIUpdateConfigurationJSONBody = NodeconfigV1NodeConfigurationUpdate

// NodeTemplatesAPICreateNodeTemplateJSONBody defines parameters for NodeTemplatesAPICreateNodeTemplate.
type NodeTemplatesAPICreateNodeTemplateJSONBody = NodetemplatesV1NewNodeTemplate

// NodeTemplatesAPIUpdateNodeTemplateJSONBody defines parameters for NodeTemplatesAPIUpdateNodeTemplate.
type NodeTemplatesAPIUpdateNodeTemplateJSONBody = NodetemplatesV1UpdateNodeTemplate

// PoliciesAPIUpsertClusterPoliciesJSONBody defines parameters for PoliciesAPIUpsertClusterPolicies.
type PoliciesAPIUpsertClusterPoliciesJSONBody = PoliciesV1Policies

// ExternalClusterAPIListClustersParams defines parameters for ExternalClusterAPIListClusters.
type ExternalClusterAPIListClustersParams struct {
	// Include metrics with cluster response.
	IncludeMetrics *bool `form:"includeMetrics,omitempty" json:"includeMetrics,omitempty"`
}

// ExternalClusterAPIRegisterClusterJSONBody defines parameters for ExternalClusterAPIRegisterCluster.
type ExternalClusterAPIRegisterClusterJSONBody = ExternalclusterV1RegisterClusterRequest

// ExternalClusterAPIUpdateClusterJSONBody defines parameters for ExternalClusterAPIUpdateCluster.
type ExternalClusterAPIUpdateClusterJSONBody = ExternalclusterV1ClusterUpdate

// ExternalClusterAPIGetCredentialsScriptParams defines parameters for ExternalClusterAPIGetCredentialsScript.
type ExternalClusterAPIGetCredentialsScriptParams struct {
	// Whether an AWS CrossRole should be used for authentication.
	CrossRole *bool `form:"crossRole,omitempty" json:"crossRole,omitempty"`

	// Whether NVIDIA device plugin DaemonSet should be installed during Phase 2 on-boarding.
	NvidiaDevicePlugin *bool `form:"nvidiaDevicePlugin,omitempty" json:"nvidiaDevicePlugin,omitempty"`

	// Whether CAST AI Security Insights agent should be installed
	InstallSecurityAgent *bool `form:"installSecurityAgent,omitempty" json:"installSecurityAgent,omitempty"`
}

// ExternalClusterAPIDisconnectClusterJSONBody defines parameters for ExternalClusterAPIDisconnectCluster.
type ExternalClusterAPIDisconnectClusterJSONBody = ExternalclusterV1DisconnectConfig

// ExternalClusterAPIHandleCloudEventJSONBody defines parameters for ExternalClusterAPIHandleCloudEvent.
type ExternalClusterAPIHandleCloudEventJSONBody = ExternalclusterV1CloudEvent

// ExternalClusterAPIListNodesParams defines parameters for ExternalClusterAPIListNodes.
type ExternalClusterAPIListNodesParams struct {
	PageLimit *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// Cursor that defines token indicating where to start the next page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`
}

// ExternalClusterAPIAddNodeJSONBody defines parameters for ExternalClusterAPIAddNode.
type ExternalClusterAPIAddNodeJSONBody = ExternalclusterV1NodeConfig

// ExternalClusterAPIDeleteNodeParams defines parameters for ExternalClusterAPIDeleteNode.
type ExternalClusterAPIDeleteNodeParams struct {
	// Node drain timeout in seconds. Defaults to 600s if not set.
	DrainTimeout *string `form:"drainTimeout,omitempty" json:"drainTimeout,omitempty"`

	// If set to true, node will be deleted even if node fails to be drained gracefully.
	ForceDelete *bool `form:"forceDelete,omitempty" json:"forceDelete,omitempty"`
}

// ExternalClusterAPIDrainNodeJSONBody defines parameters for ExternalClusterAPIDrainNode.
type ExternalClusterAPIDrainNodeJSONBody = ExternalclusterV1DrainConfig

// ExternalClusterAPIGetCredentialsScriptTemplateParams defines parameters for ExternalClusterAPIGetCredentialsScriptTemplate.
type ExternalClusterAPIGetCredentialsScriptTemplateParams struct {
	CrossRole *bool `form:"crossRole,omitempty" json:"crossRole,omitempty"`
}

// CreateAuthTokenJSONRequestBody defines body for CreateAuthToken for application/json ContentType.
type CreateAuthTokenJSONRequestBody = CreateAuthTokenJSONBody

// UpdateAuthTokenJSONRequestBody defines body for UpdateAuthToken for application/json ContentType.
type UpdateAuthTokenJSONRequestBody = UpdateAuthTokenJSONBody

// NodeTemplatesAPIFilterInstanceTypesJSONRequestBody defines body for NodeTemplatesAPIFilterInstanceTypes for application/json ContentType.
type NodeTemplatesAPIFilterInstanceTypesJSONRequestBody = NodeTemplatesAPIFilterInstanceTypesJSONBody

// NodeConfigurationAPICreateConfigurationJSONRequestBody defines body for NodeConfigurationAPICreateConfiguration for application/json ContentType.
type NodeConfigurationAPICreateConfigurationJSONRequestBody = NodeConfigurationAPICreateConfigurationJSONBody

// NodeConfigurationAPIUpdateConfigurationJSONRequestBody defines body for NodeConfigurationAPIUpdateConfiguration for application/json ContentType.
type NodeConfigurationAPIUpdateConfigurationJSONRequestBody = NodeConfigurationAPIUpdateConfigurationJSONBody

// NodeTemplatesAPICreateNodeTemplateJSONRequestBody defines body for NodeTemplatesAPICreateNodeTemplate for application/json ContentType.
type NodeTemplatesAPICreateNodeTemplateJSONRequestBody = NodeTemplatesAPICreateNodeTemplateJSONBody

// NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody defines body for NodeTemplatesAPIUpdateNodeTemplate for application/json ContentType.
type NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody = NodeTemplatesAPIUpdateNodeTemplateJSONBody

// PoliciesAPIUpsertClusterPoliciesJSONRequestBody defines body for PoliciesAPIUpsertClusterPolicies for application/json ContentType.
type PoliciesAPIUpsertClusterPoliciesJSONRequestBody = PoliciesAPIUpsertClusterPoliciesJSONBody

// ExternalClusterAPIRegisterClusterJSONRequestBody defines body for ExternalClusterAPIRegisterCluster for application/json ContentType.
type ExternalClusterAPIRegisterClusterJSONRequestBody = ExternalClusterAPIRegisterClusterJSONBody

// ExternalClusterAPIUpdateClusterJSONRequestBody defines body for ExternalClusterAPIUpdateCluster for application/json ContentType.
type ExternalClusterAPIUpdateClusterJSONRequestBody = ExternalClusterAPIUpdateClusterJSONBody

// ExternalClusterAPIDisconnectClusterJSONRequestBody defines body for ExternalClusterAPIDisconnectCluster for application/json ContentType.
type ExternalClusterAPIDisconnectClusterJSONRequestBody = ExternalClusterAPIDisconnectClusterJSONBody

// ExternalClusterAPIHandleCloudEventJSONRequestBody defines body for ExternalClusterAPIHandleCloudEvent for application/json ContentType.
type ExternalClusterAPIHandleCloudEventJSONRequestBody = ExternalClusterAPIHandleCloudEventJSONBody

// ExternalClusterAPIAddNodeJSONRequestBody defines body for ExternalClusterAPIAddNode for application/json ContentType.
type ExternalClusterAPIAddNodeJSONRequestBody = ExternalClusterAPIAddNodeJSONBody

// ExternalClusterAPIDrainNodeJSONRequestBody defines body for ExternalClusterAPIDrainNode for application/json ContentType.
type ExternalClusterAPIDrainNodeJSONRequestBody = ExternalClusterAPIDrainNodeJSONBody

// Getter for additional properties for ExternalclusterV1EKSClusterParams_Tags. Returns the specified
// element and whether it was found
func (a ExternalclusterV1EKSClusterParams_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExternalclusterV1EKSClusterParams_Tags
func (a *ExternalclusterV1EKSClusterParams_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExternalclusterV1EKSClusterParams_Tags to handle AdditionalProperties
func (a *ExternalclusterV1EKSClusterParams_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExternalclusterV1EKSClusterParams_Tags to handle AdditionalProperties
func (a ExternalclusterV1EKSClusterParams_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExternalclusterV1Node_InstanceLabels. Returns the specified
// element and whether it was found
func (a ExternalclusterV1Node_InstanceLabels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExternalclusterV1Node_InstanceLabels
func (a *ExternalclusterV1Node_InstanceLabels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExternalclusterV1Node_InstanceLabels to handle AdditionalProperties
func (a *ExternalclusterV1Node_InstanceLabels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExternalclusterV1Node_InstanceLabels to handle AdditionalProperties
func (a ExternalclusterV1Node_InstanceLabels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExternalclusterV1Node_Labels. Returns the specified
// element and whether it was found
func (a ExternalclusterV1Node_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExternalclusterV1Node_Labels
func (a *ExternalclusterV1Node_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExternalclusterV1Node_Labels to handle AdditionalProperties
func (a *ExternalclusterV1Node_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExternalclusterV1Node_Labels to handle AdditionalProperties
func (a ExternalclusterV1Node_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExternalclusterV1NodeConfig_KubernetesLabels. Returns the specified
// element and whether it was found
func (a ExternalclusterV1NodeConfig_KubernetesLabels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExternalclusterV1NodeConfig_KubernetesLabels
func (a *ExternalclusterV1NodeConfig_KubernetesLabels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExternalclusterV1NodeConfig_KubernetesLabels to handle AdditionalProperties
func (a *ExternalclusterV1NodeConfig_KubernetesLabels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExternalclusterV1NodeConfig_KubernetesLabels to handle AdditionalProperties
func (a ExternalclusterV1NodeConfig_KubernetesLabels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NodeconfigV1NewNodeConfiguration_Tags. Returns the specified
// element and whether it was found
func (a NodeconfigV1NewNodeConfiguration_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NodeconfigV1NewNodeConfiguration_Tags
func (a *NodeconfigV1NewNodeConfiguration_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NodeconfigV1NewNodeConfiguration_Tags to handle AdditionalProperties
func (a *NodeconfigV1NewNodeConfiguration_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NodeconfigV1NewNodeConfiguration_Tags to handle AdditionalProperties
func (a NodeconfigV1NewNodeConfiguration_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NodeconfigV1NodeConfiguration_Tags. Returns the specified
// element and whether it was found
func (a NodeconfigV1NodeConfiguration_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NodeconfigV1NodeConfiguration_Tags
func (a *NodeconfigV1NodeConfiguration_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NodeconfigV1NodeConfiguration_Tags to handle AdditionalProperties
func (a *NodeconfigV1NodeConfiguration_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NodeconfigV1NodeConfiguration_Tags to handle AdditionalProperties
func (a NodeconfigV1NodeConfiguration_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for NodeconfigV1NodeConfigurationUpdate_Tags. Returns the specified
// element and whether it was found
func (a NodeconfigV1NodeConfigurationUpdate_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NodeconfigV1NodeConfigurationUpdate_Tags
func (a *NodeconfigV1NodeConfigurationUpdate_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NodeconfigV1NodeConfigurationUpdate_Tags to handle AdditionalProperties
func (a *NodeconfigV1NodeConfigurationUpdate_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NodeconfigV1NodeConfigurationUpdate_Tags to handle AdditionalProperties
func (a NodeconfigV1NodeConfigurationUpdate_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
