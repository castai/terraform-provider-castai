// Package sdk provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package sdk

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/pkg/errors"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// AddNodeResult defines model for AddNodeResult.
type AddNodeResult struct {

	// id of the created note
	NodeId string `json:"nodeId"`

	// id for long running operation
	OperationId string `json:"operationId"`
}

// Addon defines model for Addon.
type Addon struct {

	// Array of categories this addon falls under.
	Categories *[]string `json:"categories,omitempty"`

	// Addon's attributes from helm chart (Chart.yaml)
	Chart *struct {

		// Date when this addon was created in CAST.AI addons registry.
		CreatedAt *time.Time `json:"createdAt,omitempty"`

		// Chart description.
		Description *string `json:"description,omitempty"`

		// Array of keywords in this chart.
		Features *[]string `json:"features,omitempty"`

		// Chart home url.
		Home *string `json:"home,omitempty"`

		// Url to chart's icon.
		Icon *string `json:"icon,omitempty"`

		// Chart name.
		Name    *string   `json:"name,omitempty"`
		Sources *[]string `json:"sources,omitempty"`

		// Array of archive urls for chart version.
		Urls *[]string `json:"urls,omitempty"`

		// Chart version.
		Version *string `json:"version,omitempty"`
	} `json:"chart,omitempty"`

	// Array of features this addon brings.
	Features *[]string `json:"features,omitempty"`

	// Unique add-on ID. Same add-on with different versions will also have different ID.
	Id string `json:"id"`

	// Long description.
	LongDescription *string `json:"longDescription,omitempty"`

	// Name.
	Name string `json:"name"`

	// The repository this add-on comes from (example: official-addons).
	Repository string `json:"repository"`

	// Short description.
	ShortDescription *string `json:"shortDescription,omitempty"`

	// Title.
	Title string `json:"title"`

	// Version.
	Version string `json:"version"`
}

// AddonList defines model for AddonList.
type AddonList struct {
	List []Addon `json:"list"`
}

// AddonsConfig defines model for AddonsConfig.
type AddonsConfig struct {

	// KEDA (keda.sh) an event-based k8s resources autoscaler
	Keda *KedaConfig `json:"keda,omitempty"`
}

// AuditEvent defines model for AuditEvent.
type AuditEvent struct {
	Event interface{} `json:"event"`

	// type of the performed operation
	EventType string `json:"eventType"`

	// audit event id
	Id          string         `json:"id"`
	InitiatedBy AuditInitiator `json:"initiatedBy"`

	// Event-specific key-value data.
	Labels *AuditEvent_Labels `json:"labels,omitempty"`

	// Event creation UTC time in RFC3339 format.
	Time time.Time `json:"time"`
}

// AuditEvent_Labels defines model for AuditEvent.Labels.
type AuditEvent_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// AuditEventClusterCreated defines model for AuditEventClusterCreated.
type AuditEventClusterCreated struct {

	// snapshot of created cluster
	Cluster *map[string]interface{} `json:"cluster,omitempty"`
}

// AuditEventClusterDeleted defines model for AuditEventClusterDeleted.
type AuditEventClusterDeleted struct {

	// snapshot of deleted cluster
	Cluster *map[string]interface{} `json:"cluster,omitempty"`
}

// AuditEventList defines model for AuditEventList.
type AuditEventList struct {
	Items []AuditEvent `json:"items"`

	// Cursor token to be used in future request cursor parameter to retrieve subsequent items from the dataset. Empty value of nextCursor field indicates that there are no further items to retrieve.
	NextCursor string `json:"nextCursor"`
}

// AuditInitiator defines model for AuditInitiator.
type AuditInitiator struct {

	// email of the user (absent for system calls)
	Email *string `json:"email,omitempty"`

	// user or system ID.
	Id string `json:"id"`

	// user or system name.
	Name string `json:"name"`
}

// AuthToken defines model for AuthToken.
type AuthToken struct {

	// Indicates whether this auth token is active.
	Active bool `json:"active"`

	// Auth token creation UTC time in RFC3339 format.
	CreatedAt time.Time `json:"createdAt"`

	// Auth token deletion UTC time in RFC3339 format.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Auth token ID, generated at the time of creation
	Id string `json:"id"`

	// Auth token last used UTC time in RFC3339 format.
	LastUsedAt *time.Time `json:"lastUsedAt,omitempty"`

	// Name of the token. Must be unique among other active tokens for the current user.
	Name string `json:"name"`

	// Indicates whether auth token has readonly permissions.
	Readonly bool `json:"readonly"`
}

// AuthTokenCreateResponse defines model for AuthTokenCreateResponse.
type AuthTokenCreateResponse struct {

	// Indicates whether this auth token is active.
	Active bool `json:"active"`

	// Auth token creation UTC time in RFC3339 format.
	CreatedAt time.Time `json:"createdAt"`

	// Auth token ID, generated at the time of creation
	Id string `json:"id"`

	// Name of the token. Must be unique among other active tokens for the current user.
	Name string `json:"name"`

	// Indicates whether auth token has readonly permissions.
	Readonly bool `json:"readonly"`

	// Generated secret for this auth token (only shown once on creation)
	Token string `json:"token"`
}

// AuthTokenList defines model for AuthTokenList.
type AuthTokenList struct {
	Items []AuthToken `json:"items"`
}

// AuthTokenUpdateRequest defines model for AuthTokenUpdateRequest.
type AuthTokenUpdateRequest struct {

	// Indicates whether this auth token is active.
	Active bool `json:"active"`
}

// CastRegion defines model for CastRegion.
type CastRegion struct {

	// List of available cloud providers in given CAST AI region.
	Clouds []Cloud `json:"clouds"`

	// display name of the region, e.g. `US West ( California )`.
	DisplayName string `json:"displayName"`

	// CAST AI region name, e.g. `us-west`.
	Name string `json:"name"`
}

// CastRegionList defines model for CastRegionList.
type CastRegionList struct {
	Items []CastRegion `json:"items"`
}

// Cloud defines model for Cloud.
type Cloud struct {

	// Cloud provider name.
	Name string `json:"name"`
}

// CloudCredentials defines model for CloudCredentials.
type CloudCredentials struct {

	// Cloud type that these credentials represent.
	Cloud string `json:"cloud"`

	// Actual credentials data of given cloud.
	Credentials string `json:"credentials"`

	// Credential expiration UTC time in RFC3339 format.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Whether credentials are under free trial.
	FreeTrial *bool `json:"freeTrial,omitempty"`

	// Id of cloud credentials item.
	Id string `json:"id"`

	// Name of cloud credentials object.
	Name   string                         `json:"name"`
	UsedBy *[]CloudCredentialsReservation `json:"usedBy,omitempty"`
}

// CloudCredentialsList defines model for CloudCredentialsList.
type CloudCredentialsList struct {
	Items []CloudCredentials `json:"items"`
}

// CloudCredentialsReservation defines model for CloudCredentialsReservation.
type CloudCredentialsReservation struct {

	// Id of the object which uses credentials.
	Id string `json:"id"`

	// Name of the object which uses credentials.
	Name string `json:"name"`
}

// CloudNetworkConfig defines model for CloudNetworkConfig.
type CloudNetworkConfig struct {

	// Optional AWS VPC IPv4 CIDR. If not specified default CIDR is used. (GCP - 10.0.0.0/16, AWS - 10.10.0.0/16, Azure - 10.20.0.0/16, DO - Any available)
	VpcCidr string `json:"vpcCidr"`
}

// CloudType defines model for CloudType.
type CloudType string

// List of CloudType
const (
	CloudType_aws   CloudType = "aws"
	CloudType_azure CloudType = "azure"
	CloudType_do    CloudType = "do"
	CloudType_gcp   CloudType = "gcp"
)

// ClusterAddon defines model for ClusterAddon.
type ClusterAddon struct {
	Addon Addon `json:"addon"`

	// URL to open addon exposed UI dashboard if supported.
	ClusterGatewayUrl string `json:"clusterGatewayUrl"`

	// Installed add-on status (unknown, deployed, uninstalled, superseded, failed, uninstalling, pending-install, pending-upgrade, pending-rollback)
	Status string `json:"status"`
}

// ClusterAddonsList defines model for ClusterAddonsList.
type ClusterAddonsList struct {
	List []ClusterAddon `json:"list"`
}

// ClusterCostDetails defines model for ClusterCostDetails.
type ClusterCostDetails struct {

	// Average hourly cost of the cluster
	CostPerHour float32 `json:"costPerHour"`

	// Average number of CPUs in all nodes of type Spot in the cluster
	SpotCpu float32 `json:"spotCpu"`

	// Average number of nodes of type Spot in the cluster
	SpotNodeCount float32 `json:"spotNodeCount"`

	// Average RAM (GiB) memory of all nodes of type Spot in cluster
	SpotRamGib float32 `json:"spotRamGib"`

	// Average number of CPUs in all nodes in the cluster
	TotalCpu float32 `json:"totalCpu"`

	// Average number of nodes in the cluster
	TotalNodeCount float32 `json:"totalNodeCount"`

	// Average RAM (GiB) memory of all nodes in the cluster
	TotalRamGib float32 `json:"totalRamGib"`
}

// ClusterCostEstimate defines model for ClusterCostEstimate.
type ClusterCostEstimate struct {
	PerCloud *CostsPerProviderEstimate `json:"perCloud,omitempty"`
	PerType  *CostsPerTypeEstimate     `json:"perType,omitempty"`

	// Estimated Price
	Total *EstimatedPriceAmount `json:"total,omitempty"`
}

// ClusterCostHistoryEntry defines model for ClusterCostHistoryEntry.
type ClusterCostHistoryEntry struct {

	// Timestamp of the record
	CreatedAt time.Time `json:"createdAt"`

	// Defines average cost and resources of the cluster
	Current ClusterCostDetails `json:"current"`

	// Defines average cost and resources of the cluster
	Optimized ClusterCostDetails `json:"optimized"`
}

// ClusterCostHistoryResponse defines model for ClusterCostHistoryResponse.
type ClusterCostHistoryResponse struct {

	// Cluster id
	ClusterId string `json:"clusterId"`

	// Cost history entries
	Items *[]ClusterCostHistoryEntry `json:"items,omitempty"`
}

// ClusterHealth defines model for ClusterHealth.
type ClusterHealth struct {
	Cilium     ClusterHealthCilium     `json:"cilium"`
	Kubernetes ClusterHealthKubernetes `json:"kubernetes"`
	Nodes      ClusterHealthNodes      `json:"nodes"`
}

// ClusterHealthCilium defines model for ClusterHealthCilium.
type ClusterHealthCilium struct {
	Msg   string `json:"msg"`
	State string `json:"state"`
}

// ClusterHealthKubernetes defines model for ClusterHealthKubernetes.
type ClusterHealthKubernetes struct {
	Msg   string `json:"msg"`
	State string `json:"state"`
}

// ClusterHealthNode defines model for ClusterHealthNode.
type ClusterHealthNode struct {
	HostIp string `json:"hostIp"`
	Name   string `json:"name"`
	State  string `json:"state"`
}

// ClusterHealthNodes defines model for ClusterHealthNodes.
type ClusterHealthNodes struct {
	Items []ClusterHealthNode `json:"items"`
	Msg   string              `json:"msg"`
}

// ClusterMetrics defines model for ClusterMetrics.
type ClusterMetrics struct {

	// List of cluster cloud provider metrics.
	CloudMetrics *[]struct {

		// Cloud labels.
		Labels ClusterMetrics_CloudMetrics_Labels `json:"labels"`

		// Running pod count on this cloud.
		PodCount int `json:"podCount"`

		// Percentage value of requested CPU capacity.
		RequestedCPUPercentage int `json:"requestedCPUPercentage"`

		// Percentage value of requested Memory capacity.
		RequestedMemPercentage int `json:"requestedMemPercentage"`
	} `json:"cloudMetrics,omitempty"`

	// List of cluster nodes metrics.
	NodeMetrics *[]struct {

		// Node labels.
		Labels ClusterMetrics_NodeMetrics_Labels `json:"labels"`

		// Percentage value of requested CPU capacity.
		RequestedCPUPercentage int `json:"requestedCPUPercentage"`

		// Percentage value of requested Memory capacity.
		RequestedMemPercentage int `json:"requestedMemPercentage"`
	} `json:"nodeMetrics,omitempty"`
}

// ClusterMetrics_CloudMetrics_Labels defines model for ClusterMetrics.CloudMetrics.Labels.
type ClusterMetrics_CloudMetrics_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ClusterMetrics_NodeMetrics_Labels defines model for ClusterMetrics.NodeMetrics.Labels.
type ClusterMetrics_NodeMetrics_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ClusterMetricsCpuUsage defines model for ClusterMetricsCpuUsage.
type ClusterMetricsCpuUsage struct {
	Provisioned []MetricSampleStream `json:"provisioned"`
	Requested   []MetricSampleStream `json:"requested"`
}

// ClusterMetricsGauges defines model for ClusterMetricsGauges.
type ClusterMetricsGauges struct {
	CastaiManagedNodesCount      *int `json:"castaiManagedNodesCount,omitempty"`
	CastaiSpotFallbackNodesCount *int `json:"castaiSpotFallbackNodesCount,omitempty"`
	CpuAllocatableMillicores     *int `json:"cpuAllocatableMillicores,omitempty"`
	CpuProvisionedMillicores     *int `json:"cpuProvisionedMillicores,omitempty"`
	CpuRequestedMillicores       *int `json:"cpuRequestedMillicores,omitempty"`
	MemoryAllocatableBytes       *int `json:"memoryAllocatableBytes,omitempty"`
	MemoryProvisionedBytes       *int `json:"memoryProvisionedBytes,omitempty"`
	MemoryRequestedBytes         *int `json:"memoryRequestedBytes,omitempty"`
	OnDemandNodesCount           *int `json:"onDemandNodesCount,omitempty"`
	ProviderManagedNodesCount    *int `json:"providerManagedNodesCount,omitempty"`
	ScheduledPodsCount           *int `json:"scheduledPodsCount,omitempty"`
	SpotNodesCount               *int `json:"spotNodesCount,omitempty"`
	TotalNodesCount              *int `json:"totalNodesCount,omitempty"`
	TotalPodsCount               *int `json:"totalPodsCount,omitempty"`
	UnscheduledPodsCount         *int `json:"unscheduledPodsCount,omitempty"`
}

// ClusterMetricsMemoryUsage defines model for ClusterMetricsMemoryUsage.
type ClusterMetricsMemoryUsage struct {
	Provisioned []MetricSampleStream `json:"provisioned"`
	Requested   []MetricSampleStream `json:"requested"`
}

// ClusterProblematicWorkloads defines model for ClusterProblematicWorkloads.
type ClusterProblematicWorkloads struct {

	// Cluster id
	ClusterId string `json:"clusterId"`

	// Problematic workload controllers
	Controllers *[]ProblematicController `json:"controllers,omitempty"`

	// Identifies whether cluster contains any problems
	HasProblems bool `json:"hasProblems"`

	// Problematic standalone pods
	StandalonePods *[]ProblematicStandalonePod `json:"standalonePods,omitempty"`
}

// ClusterRegion defines model for ClusterRegion.
type ClusterRegion struct {

	// display name of the region, e.g. `US West ( California )`.
	DisplayName string `json:"displayName"`

	// CAST AI region name, e.g. `us-west`.
	Name string `json:"name"`
}

// ClusterWorkloads defines model for ClusterWorkloads.
type ClusterWorkloads struct {

	// Cluster id
	ClusterId string `json:"clusterId"`

	// Workload
	Workloads *[]Workload `json:"workloads,omitempty"`
}

// CostsPerProviderEstimate defines model for CostsPerProviderEstimate.
type CostsPerProviderEstimate struct {

	// Break down by provider
	Details      *[]EstimatedComponentPrice `json:"details,omitempty"`
	TotalHourly  string                     `json:"totalHourly"`
	TotalMonthly *string                    `json:"totalMonthly,omitempty"`
}

// CostsPerTypeEstimate defines model for CostsPerTypeEstimate.
type CostsPerTypeEstimate struct {
	AdditionalProperties map[string]EstimatedComponentTypePrice `json:"-"`
}

// CreateCluster defines model for CreateCluster.
type CreateCluster struct {
	Addons *AddonsConfig `json:"addons,omitempty"`

	// Credentials ID list which determines the CSP configuration of this cluster.
	CloudCredentialsIDs []string `json:"cloudCredentialsIDs"`

	// Name of this infrastructure object. Needs to be unique per organization.
	Name    string   `json:"name"`
	Network *Network `json:"network,omitempty"`

	// Initial nodes of this cluster. Must contain final masters count.
	Nodes []NewNode `json:"nodes"`

	// CAST AI region to create the cluster in.
	Region string `json:"region"`
}

// DashboardMetricsCPUUsage defines model for DashboardMetricsCPUUsage.
type DashboardMetricsCPUUsage struct {
	Provisioned []MetricSampleStream `json:"provisioned"`
	Requested   []MetricSampleStream `json:"requested"`
}

// DashboardMetricsCommonStats defines model for DashboardMetricsCommonStats.
type DashboardMetricsCommonStats struct {
	CastaiManagedNodesCount   *int `json:"castaiManagedNodesCount,omitempty"`
	CpuAllocatableMillicores  *int `json:"cpuAllocatableMillicores,omitempty"`
	CpuProvisionedMillicores  *int `json:"cpuProvisionedMillicores,omitempty"`
	CpuRequestedMillicores    *int `json:"cpuRequestedMillicores,omitempty"`
	MemoryAllocatableBytes    *int `json:"memoryAllocatableBytes,omitempty"`
	MemoryProvisionedBytes    *int `json:"memoryProvisionedBytes,omitempty"`
	MemoryRequestedBytes      *int `json:"memoryRequestedBytes,omitempty"`
	OnDemandNodesCount        *int `json:"onDemandNodesCount,omitempty"`
	ProviderManagedNodesCount *int `json:"providerManagedNodesCount,omitempty"`
	ScheduledPodsCount        *int `json:"scheduledPodsCount,omitempty"`
	SpotNodesCount            *int `json:"spotNodesCount,omitempty"`
	TotalNodesCount           *int `json:"totalNodesCount,omitempty"`
	TotalPodsCount            *int `json:"totalPodsCount,omitempty"`
	UnscheduledPodsCount      *int `json:"unscheduledPodsCount,omitempty"`
}

// DashboardMetricsMemoryUsage defines model for DashboardMetricsMemoryUsage.
type DashboardMetricsMemoryUsage struct {
	Provisioned []MetricSampleStream `json:"provisioned"`
	Requested   []MetricSampleStream `json:"requested"`
}

// DeleteNodeResult defines model for DeleteNodeResult.
type DeleteNodeResult struct {

	// specifies how long should drain be attempted (in seconds).
	DrainTimeout *int `json:"drainTimeout,omitempty"`

	// when set to false, node deletion will be aborted if drain timeout expires.
	Force *bool `json:"force,omitempty"`

	// id for long running operation
	OperationId string `json:"operationId"`
}

// DeletedNode defines model for DeletedNode.
type DeletedNode struct {

	// specifies how long should drain be attempted (in seconds).
	DrainTimeout *int `json:"drain_timeout,omitempty"`

	// when set to false, node deletion will be aborted if drain timeout expires.
	Force *bool `json:"force,omitempty"`

	// node ID autogenerated at the time of node creation
	Id string `json:"id"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {

	// in case the error is related to specific field, this list will contain
	FieldViolations []FieldViolation `json:"fieldViolations"`
	Message         string           `json:"message"`
}

// EstimatedComponentPrice defines model for EstimatedComponentPrice.
type EstimatedComponentPrice struct {

	// Price for all of the components instances. Contains dependencies breakdown
	Dependencies *EstimatedComponentPrice `json:"dependencies,omitempty"`

	// Estimated Price
	FullPrice EstimatedPriceAmount `json:"fullPrice"`

	// component's string id, e.g. "vpn", "master", "worker" and so on
	Id string `json:"id"`

	// human-readable component's name
	Name      string `json:"name"`
	UnitCount int    `json:"unitCount"`

	// Estimated Price
	UnitPrice EstimatedPriceAmount `json:"unitPrice"`
}

// EstimatedComponentTypePrice defines model for EstimatedComponentTypePrice.
type EstimatedComponentTypePrice struct {

	// Estimated Price
	Price     *EstimatedPriceAmount `json:"price,omitempty"`
	UnitCount *int                  `json:"unitCount,omitempty"`
}

// EstimatedPriceAmount defines model for EstimatedPriceAmount.
type EstimatedPriceAmount struct {

	// ISO-4217 currency code
	CurrencyCode *string `json:"currencyCode,omitempty"`

	// Price per hour (e.g. "0.1234")
	Hourly *string `json:"hourly,omitempty"`

	// Price in dollars per month (30 days, e.g. "1.234")
	Monthly *string `json:"monthly,omitempty"`
}

// EstimatedSavingsCurrentConfiguration defines model for EstimatedSavingsCurrentConfiguration.
type EstimatedSavingsCurrentConfiguration struct {

	// Current list of cluster nodes.
	Nodes *[]EstimatedSavingsNode `json:"nodes,omitempty"`

	// Current list of cluster pods.
	Pods *[]string `json:"pods,omitempty"`

	// A map of replicated workloads.
	ReplicatedWorkloads *EstimatedSavingsCurrentConfiguration_ReplicatedWorkloads `json:"replicatedWorkloads,omitempty"`
	TotalPrice          *EstimatedSavingsCurrentConfigurationTotalPrice           `json:"totalPrice,omitempty"`
}

// EstimatedSavingsCurrentConfiguration_ReplicatedWorkloads defines model for EstimatedSavingsCurrentConfiguration.ReplicatedWorkloads.
type EstimatedSavingsCurrentConfiguration_ReplicatedWorkloads struct {
	AdditionalProperties map[string]EstimatedSavingsReplicatedWorkload `json:"-"`
}

// EstimatedSavingsCurrentConfigurationTotalPrice defines model for EstimatedSavingsCurrentConfigurationTotalPrice.
type EstimatedSavingsCurrentConfigurationTotalPrice struct {

	// Total hourly price of the node configuration in $ currency.
	Hourly string `json:"hourly"`

	// Total monthly price of the node configuration in $ currency.
	Monthly string `json:"monthly"`
}

// EstimatedSavingsNode defines model for EstimatedSavingsNode.
type EstimatedSavingsNode struct {

	// Number CPU core node capacity.
	CpuCores int `json:"cpuCores"`

	// Name of the node's instance type.
	InstanceType string `json:"instanceType"`

	// Hourly price of the node in $ curreny.
	Price string `json:"price"`

	// Number of memory node capacity in bytes.
	RamBytes int `json:"ramBytes"`

	// Whether this node is a spot instance.
	Spot bool `json:"spot"`
}

// EstimatedSavingsRecommendation defines model for EstimatedSavingsRecommendation.
type EstimatedSavingsRecommendation struct {

	// Details of this savings recommendation.
	Details *struct {

		// Cluster node configuration after applying the suggestions.
		ConfigurationAfter struct {

			// Recommended list of nodes.
			Nodes *[]EstimatedSavingsNode `json:"nodes,omitempty"`
		} `json:"configurationAfter"`

		// A map of replicated workloads.
		ReplicatedWorkloads *EstimatedSavingsRecommendation_Details_ReplicatedWorkloads `json:"replicatedWorkloads,omitempty"`
	} `json:"details,omitempty"`
	Hourly  *EstimatedSavingsRecommendationPrice `json:"hourly,omitempty"`
	Monthly *EstimatedSavingsRecommendationPrice `json:"monthly,omitempty"`

	// Available savings by applying this configuration.
	SavingsPercentage *string `json:"savingsPercentage,omitempty"`
}

// EstimatedSavingsRecommendation_Details_ReplicatedWorkloads defines model for EstimatedSavingsRecommendation.Details.ReplicatedWorkloads.
type EstimatedSavingsRecommendation_Details_ReplicatedWorkloads struct {
	AdditionalProperties map[string]EstimatedSavingsReplicatedWorkload `json:"-"`
}

// EstimatedSavingsRecommendationPrice defines model for EstimatedSavingsRecommendationPrice.
type EstimatedSavingsRecommendationPrice struct {

	// Price after applying this configuration.
	PriceAfter string `json:"priceAfter"`

	// Price before applying this configuration.
	PriceBefore string `json:"priceBefore"`
}

// EstimatedSavingsRecommendations defines model for EstimatedSavingsRecommendations.
type EstimatedSavingsRecommendations struct {
	Layman        *EstimatedSavingsRecommendation `json:"Layman,omitempty"`
	SpotInstances *EstimatedSavingsRecommendation `json:"SpotInstances,omitempty"`
}

// EstimatedSavingsReplicatedWorkload defines model for EstimatedSavingsReplicatedWorkload.
type EstimatedSavingsReplicatedWorkload struct {

	// Lifecycle type of the node that hosts this workload.
	CurrentNodeType string `json:"currentNodeType"`

	// The workload controller type.
	OwnerType string `json:"ownerType"`

	// Recommended lifecycle type of the node to host this workload.
	RecommendedNodeType string `json:"recommendedNodeType"`

	// A list of replicas (pods) of this workload.
	Replicas []string `json:"replicas"`
}

// EstimatedSavingsResponse defines model for EstimatedSavingsResponse.
type EstimatedSavingsResponse struct {
	CurrentConfiguration *EstimatedSavingsCurrentConfiguration `json:"currentConfiguration,omitempty"`

	// Whether rebalancing is recommended. Calculated based on available savings.
	IsRebalancingRecommended *bool `json:"isRebalancingRecommended,omitempty"`

	// Timestamp of the last cluster snapshot used to calculate the report.
	LastUpdatedAt   *time.Time                       `json:"lastUpdatedAt,omitempty"`
	Recommendations *EstimatedSavingsRecommendations `json:"recommendations,omitempty"`
}

// ExecuteRebalancingPlanRequest defines model for ExecuteRebalancingPlanRequest.
type ExecuteRebalancingPlanRequest struct {

	// ID of the cluster that is being rebalanced.
	ClusterId *string `json:"clusterId,omitempty"`

	// ID of the rebalancing plan.
	RebalancingPlanId *string `json:"rebalancingPlanId,omitempty"`
}

// FieldViolation defines model for FieldViolation.
type FieldViolation struct {
	Description string `json:"description"`
	Field       string `json:"field"`
}

// GSLBDeleteRequest defines model for GSLBDeleteRequest.
type GSLBDeleteRequest struct {

	// ID of the cluster.
	ClusterId string `json:"clusterId"`

	// Name of the exposed LoadBalancer type service.
	ServiceName string `json:"serviceName"`

	// Namespace where the exposed LoadBalancer type service resides.
	ServiceNamespace string `json:"serviceNamespace"`
}

// GSLBRequest defines model for GSLBRequest.
type GSLBRequest struct {

	// ID of the cluster.
	ClusterId string `json:"clusterId"`

	// Array of all cloud load balancer hostnames and IP addresses which should be globally load balanced.
	Hosts []string `json:"hosts"`

	// Name of the exposed LoadBalancer type service.
	ServiceName string `json:"serviceName"`

	// Namespace where the exposed LoadBalancer type service resides.
	ServiceNamespace string `json:"serviceNamespace"`
}

// GSLBResponse defines model for GSLBResponse.
type GSLBResponse struct {

	// Hostname of the GSLB.
	Dns string `json:"dns"`
}

// Heartbeat defines model for Heartbeat.
type Heartbeat struct {

	// Timestamp of the last heartbeat from this system
	ReceivedAt *time.Time `json:"receivedAt,omitempty"`

	// originating system name
	System *string `json:"system,omitempty"`
}

// IngressLoadBalancer defines model for IngressLoadBalancer.
type IngressLoadBalancer struct {

	// Load balancer address.
	Address string `json:"address"`

	// Type/origin of load balancer.
	Type string `json:"type"`
}

// InstallAddonRequest defines model for InstallAddonRequest.
type InstallAddonRequest struct {
	Name            string                               `json:"name"`
	Repository      string                               `json:"repository"`
	ValuesOverrides *InstallAddonRequest_ValuesOverrides `json:"valuesOverrides,omitempty"`
	Version         string                               `json:"version"`
}

// InstallAddonRequest_ValuesOverrides defines model for InstallAddonRequest.ValuesOverrides.
type InstallAddonRequest_ValuesOverrides struct {
	AdditionalProperties map[string]string `json:"-"`
}

// IpSecConfig defines model for IpSecConfig.
type IpSecConfig map[string]interface{}

// KedaConfig defines model for KedaConfig.
type KedaConfig struct {

	// Whether this addon is enabled
	Enabled bool `json:"enabled"`
}

// KubernetesCluster defines model for KubernetesCluster.
type KubernetesCluster struct {
	Addons *AddonsConfig `json:"addons,omitempty"`

	// Credentials ID list which determines the CSP configuration of this cluster.
	CloudCredentialsIDs []string `json:"cloudCredentialsIDs"`

	// Cluster creation UTC time in RFC3339 format.
	CreatedAt  *time.Time                    `json:"createdAt,omitempty"`
	Heartbeats *KubernetesCluster_Heartbeats `json:"heartbeats,omitempty"`

	// Cluster ID, generated at the time of creation
	Id string `json:"id"`

	// Cluster kubernetes version.
	KubernetesVersion *string `json:"kubernetesVersion,omitempty"`

	// Name of this infrastructure object. Needs to be unique per organization.
	Name    string   `json:"name"`
	Network *Network `json:"network,omitempty"`

	// Cluster nodes.
	Nodes         []Node         `json:"nodes"`
	PauseSchedule *PauseSchedule `json:"pauseSchedule,omitempty"`

	// Optional notes added when pausing the cluster.
	PausedNotes   *string `json:"pausedNotes,omitempty"`
	ReconcileMode string  `json:"reconcileMode"`

	// Last cluster reconcile UTC time in RFC3339 format.
	ReconciledAt *time.Time `json:"reconciledAt,omitempty"`

	// CAST AI region used by cluster.
	Region ClusterRegion `json:"region"`

	// Current status of the cluster
	Status string `json:"status"`
}

// KubernetesCluster_Heartbeats defines model for KubernetesCluster.Heartbeats.
type KubernetesCluster_Heartbeats struct {
	AdditionalProperties map[string]Heartbeat `json:"-"`
}

// KubernetesClusterFeedbackEvent defines model for KubernetesClusterFeedbackEvent.
type KubernetesClusterFeedbackEvent struct {

	// Event creation UTC time in RFC3339 format.
	CreatedAt time.Time `json:"createdAt"`

	// Cluster feedback event ID, generated at the time of creation.
	Id string `json:"id"`

	// Message of this event.
	Message string `json:"message"`

	// Severity level.
	Severity string `json:"severity"`
}

// KubernetesClusterFeedbackEventsList defines model for KubernetesClusterFeedbackEventsList.
type KubernetesClusterFeedbackEventsList struct {
	Items []KubernetesClusterFeedbackEvent `json:"items"`
}

// KubernetesClusterList defines model for KubernetesClusterList.
type KubernetesClusterList struct {
	Items []KubernetesCluster `json:"items"`
}

// KubernetesIngressController defines model for KubernetesIngressController.
type KubernetesIngressController struct {

	// Set of load balancers forwarding requests to the ingress.
	LoadBalancers []IngressLoadBalancer `json:"loadBalancers"`

	// Available ingress controller ports.
	Ports []int `json:"ports"`
}

// MetricSampleStream defines model for MetricSampleStream.
type MetricSampleStream struct {
	Labels *MetricSampleStream_Labels `json:"labels,omitempty"`
	Values []MetricSampleValue        `json:"values"`
}

// MetricSampleStream_Labels defines model for MetricSampleStream.Labels.
type MetricSampleStream_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// MetricSampleValue defines model for MetricSampleValue.
type MetricSampleValue struct {
	Timestamp int    `json:"timestamp"`
	Value     string `json:"value"`
}

// Network defines model for Network.
type Network struct {
	Aws   *CloudNetworkConfig `json:"aws,omitempty"`
	Azure *CloudNetworkConfig `json:"azure,omitempty"`
	Do    *CloudNetworkConfig `json:"do,omitempty"`
	Gcp   *CloudNetworkConfig `json:"gcp,omitempty"`

	// If set to true worker nodes will use private networking and NAT gateways for node egress traffic. Currently this is supported only on AWS.
	PrivateWorkerNodes bool       `json:"privateWorkerNodes"`
	Vpn                *VpnConfig `json:"vpn,omitempty"`
}

// NewInvitations defines model for NewInvitations.
type NewInvitations struct {
	Members        []NewMembershipByEmail `json:"members"`
	OrganizationId string                 `json:"organizationId"`
}

// NewInvitationsResponse defines model for NewInvitationsResponse.
type NewInvitationsResponse struct {
	InviteIds []string `json:"inviteIds"`
}

// NewMembershipByEmail defines model for NewMembershipByEmail.
type NewMembershipByEmail struct {
	Role      string `json:"role"`
	UserEmail string `json:"userEmail"`
}

// NewNode defines model for NewNode.
type NewNode struct {

	// Cloud service provider type.
	Cloud CloudType `json:"cloud"`

	// Precise VM instance type for specific cloud. If specified, `shape` field is ignored.
	InstanceType string `json:"instanceType"`

	// Specifies the node type.
	//
	// `master` hosts the Kubernetes control plane.
	//
	// `worker` is used to run workloads and supports autoscaling.
	Role NodeType `json:"role"`

	// CAST AI shape defining VM template. Field is required unless `instanceType` is specified.
	Shape *NodeShape `json:"shape,omitempty"`

	// Spot instance configuration.
	SpotConfig *NodeSpotConfig `json:"spotConfig,omitempty"`
}

// NewOrganizationUser defines model for NewOrganizationUser.
type NewOrganizationUser struct {
	Role OrganizationRole `json:"role"`

	// User ID to add to organization
	UserId string `json:"userId"`
}

// Node defines model for Node.
type Node struct {

	// Name of entity which initiated node creation.
	AddedBy *string `json:"addedBy,omitempty"`

	// Cloud service provider type.
	Cloud CloudType `json:"cloud"`

	// Node creation UTC time in RFC3339 format.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Node ID autogenerated at the time of node creation.
	Id string `json:"id"`

	// CPU architecture of the instance
	InstanceArchitecture *string `json:"instanceArchitecture,omitempty"`

	// Cloud vm instance id.
	InstanceId *string `json:"instanceId,omitempty"`

	// Cloud vm instance labels.
	InstanceLabels *Node_InstanceLabels `json:"instanceLabels,omitempty"`

	// Cloud vm instance name.
	InstanceName *string `json:"instanceName,omitempty"`

	// Hourly price of the instance
	InstancePrice *string `json:"instancePrice,omitempty"`

	// Precise VM instance type for specific cloud.
	InstanceType string `json:"instanceType"`

	// Node kubernetes cluster join UTC time in RFC3339 format.
	JoinedAt *time.Time `json:"joinedAt,omitempty"`

	// Kubernetes node labels.
	Labels *Node_Labels `json:"labels,omitempty"`

	// Node name generated at the time of node creation.
	Name string `json:"name"`

	// Kubernetes node network
	Network *NodeNetwork `json:"network,omitempty"`

	// Node region.
	Region *string `json:"region,omitempty"`

	// Resources of kubernetes node.
	Resources *struct {
		CpuAllocatableMilli *int `json:"cpuAllocatableMilli,omitempty"`
		CpuCapacityMilli    *int `json:"cpuCapacityMilli,omitempty"`
		CpuRequestsMilli    *int `json:"cpuRequestsMilli,omitempty"`
		MemAllocatableMib   *int `json:"memAllocatableMib,omitempty"`
		MemCapacityMib      *int `json:"memCapacityMib,omitempty"`
		MemRequestsMib      *int `json:"memRequestsMib,omitempty"`
	} `json:"resources,omitempty"`

	// Specifies the node type.
	//
	// `master` hosts the Kubernetes control plane.
	//
	// `worker` is used to run workloads and supports autoscaling.
	Role NodeType `json:"role"`

	// CAST AI shape defining VM template. Field is required unless `instanceType` is specified.
	Shape *NodeShape `json:"shape,omitempty"`

	// Spot instance configuration.
	SpotConfig NodeSpotConfig `json:"spotConfig"`

	// Kubernetes node state.
	State  *NodeState `json:"state,omitempty"`
	Taints *[]Taint   `json:"taints,omitempty"`

	// Indicates if workloads can be scheduled on this kubernetes node.
	Unschedulable *bool `json:"unschedulable,omitempty"`

	// Datacenter availability zone of the VM.
	Zone string `json:"zone"`
}

// Node_InstanceLabels defines model for Node.InstanceLabels.
type Node_InstanceLabels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Node_Labels defines model for Node.Labels.
type Node_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// NodeList defines model for NodeList.
type NodeList struct {
	Items []Node `json:"items"`

	// Cursor token to be used in future request cursor parameter to retrieve subsequent items from the dataset. Empty value of nextCursor field indicates that there are no further items to retrieve.
	NextCursor string `json:"nextCursor"`
}

// NodeNetwork defines model for NodeNetwork.
type NodeNetwork struct {

	// node private IP
	PrivateIp string `json:"privateIp"`

	// node public IP
	PublicIp string `json:"publicIp"`
}

// NodeShape defines model for NodeShape.
type NodeShape string

// List of NodeShape
const (
	NodeShape__x_large NodeShape = "2x-large"
	NodeShape_large    NodeShape = "large"
	NodeShape_medium   NodeShape = "medium"
	NodeShape_small    NodeShape = "small"
	NodeShape_x_large  NodeShape = "x-large"
	NodeShape_x_small  NodeShape = "x-small"
)

// NodeSpotConfig defines model for NodeSpotConfig.
type NodeSpotConfig struct {

	// Indicates whether the node should be spot/preemtive, suitable for fault-tolerant workloads.
	//
	// `true` if instance should be Spot (AWS), Preemtible (GCP), etc.
	//
	// `false` if the node should be stable on-demand.
	IsSpot bool `json:"isSpot"`

	// Max bid price (only applicable to AWS).
	Price *string `json:"price,omitempty"`
}

// NodeState defines model for NodeState.
type NodeState struct {

	// Current status of a node.
	Phase *string `json:"phase,omitempty"`
}

// NodeType defines model for NodeType.
type NodeType string

// List of NodeType
const (
	NodeType_master NodeType = "master"
	NodeType_worker NodeType = "worker"
)

// NodeUpdateOperation defines model for NodeUpdateOperation.
type NodeUpdateOperation struct {
	Add    *[]NewNode     `json:"add,omitempty"`
	Delete *[]DeletedNode `json:"delete,omitempty"`
}

// OperationResponse defines model for OperationResponse.
type OperationResponse struct {

	// Operation creation time in RFC3339Nano format.
	CreatedAt time.Time `json:"createdAt"`

	// Indicates whether the operation is done. If 'true', the operation has finished. If 'false', the operation is still in progress.
	Done bool `json:"done"`

	// Error details for the operation. Only populated when the operation is done and has failed. If operation has completed successfully, the error will not be set.
	Error *struct {

		// Human readable caption text describing the error reason.
		Details string `json:"details"`

		// Reason is an operation specific failure code. Refer to documentation of the endpoint which generated the long-running operation about possible outcomes. Common error reasons:
		// * `internal_error`: An unknown error occurred. Retry the operation.
		Reason string `json:"reason"`
	} `json:"error,omitempty"`

	// Operation finishe time in RFC3339Nano format.
	FinishedAt *time.Time `json:"finishedAt,omitempty"`

	// ID of the operation.
	Id string `json:"id"`
}

// Organization defines model for Organization.
type Organization struct {

	// Organization ID
	Id string `json:"id"`

	// Organization name
	Name string `json:"name"`
}

// OrganizationRole defines model for OrganizationRole.
type OrganizationRole string

// List of OrganizationRole
const (
	OrganizationRole_member OrganizationRole = "member"
	OrganizationRole_owner  OrganizationRole = "owner"
	OrganizationRole_viewer OrganizationRole = "viewer"
)

// OrganizationUser defines model for OrganizationUser.
type OrganizationUser struct {

	// User role in organization
	Role string      `json:"role"`
	User UserProfile `json:"user"`
}

// OrganizationUsersList defines model for OrganizationUsersList.
type OrganizationUsersList struct {
	Users []OrganizationUser `json:"users"`
}

// OrganizationsList defines model for OrganizationsList.
type OrganizationsList struct {
	Organizations []Organization `json:"organizations"`
}

// PauseCluster defines model for PauseCluster.
type PauseCluster struct {

	// Optional notes when pausing a cluster (2000 characters at most)
	Notes *string `json:"notes,omitempty"`
}

// PauseSchedule defines model for PauseSchedule.
type PauseSchedule struct {
	Enabled bool `json:"enabled"`

	// optional name for the schedule
	Name     string              `json:"name"`
	Spans    []PauseScheduleSpan `json:"spans"`
	TimeZone string              `json:"timeZone"`
}

// PauseScheduleSpan defines model for PauseScheduleSpan.
type PauseScheduleSpan struct {

	// actual time in provided time zone when to resume the cluster
	ActiveFrom string `json:"activeFrom"`

	// actual time in provided time zone when to suspend the cluster
	ActiveTo     string `json:"activeTo"`
	DayOfTheWeek string `json:"dayOfTheWeek"`
}

// ProblematicController defines model for ProblematicController.
type ProblematicController struct {

	// kind of the controller
	Kind string `json:"kind"`

	// name of the controller
	Name string `json:"name"`

	// controller problems
	Problems []string `json:"problems"`
}

// ProblematicStandalonePod defines model for ProblematicStandalonePod.
type ProblematicStandalonePod struct {

	// name of the controller
	Name string `json:"name"`

	// standalone pod problems
	Problems []string `json:"problems"`
}

// RebalancedWorkloads defines model for RebalancedWorkloads.
type RebalancedWorkloads struct {

	// Whether rebalancing is in-progress or not.
	Active bool `json:"active"`

	// Label selectors matching workloads which are being rebalanced.
	Selectors *[]struct {

		// A more advanced label query with operators. Multiple expressions are ANDed.
		MatchExpressions *[]struct {

			// Key is a label.
			Key *string `json:"key,omitempty"`

			// Operator is the key's relationship to the values.
			Operator *string `json:"operator,omitempty"`

			// Values is an array of string values. If the operator is In or NotIn, the values array must be
			// non-empty. If the operator is Exists or DoesNotExist, the values array must be empty.
			Values *[]string `json:"values,omitempty"`
		} `json:"matchExpressions,omitempty"`

		// Used to query resource labels.
		MatchLabels *RebalancedWorkloads_Selectors_MatchLabels `json:"matchLabels,omitempty"`
	} `json:"selectors,omitempty"`
}

// RebalancedWorkloads_Selectors_MatchLabels defines model for RebalancedWorkloads.Selectors.MatchLabels.
type RebalancedWorkloads_Selectors_MatchLabels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// RebalancingAccepted defines model for RebalancingAccepted.
type RebalancingAccepted struct {

	// Rebalancing plan ID.
	RebalancingPlanId string `json:"rebalancingPlanId"`
}

// RebalancingConfiguration defines model for RebalancingConfiguration.
type RebalancingConfiguration struct {

	// A list of node in this configuration.
	Nodes  []RebalancingNode              `json:"nodes"`
	Totals RebalancingConfigurationTotals `json:"totals"`
}

// RebalancingConfigurationTotals defines model for RebalancingConfigurationTotals.
type RebalancingConfigurationTotals struct {

	// Total memory capacity of this configuration in MiBs.
	MemoryMib int `json:"memoryMib"`

	// Count of pods which can be migrated. They come from replaceable nodes.
	MigratablePods int `json:"migratablePods"`

	// Total milli CPU capacity of this configuration.
	MilliCpu int `json:"milliCpu"`

	// Count of nodes in this configuration.
	Nodes int `json:"nodes"`

	// Total number of pods in this configuration.
	Pods int `json:"pods"`

	// Total hourly price of this configuration in $ currency.
	PriceHourly string `json:"priceHourly"`

	// Total monthly price of this configuration in $ currency.
	PriceMonthly string `json:"priceMonthly"`

	// Total number of problematic pods in this configuration.
	ProblematicPods int `json:"problematicPods"`

	// Count of nodes which can be replaced in this configuration.
	ReplaceableNodes int `json:"replaceableNodes"`
}

// RebalancingConfigurations defines model for RebalancingConfigurations.
type RebalancingConfigurations struct {
	Blue  RebalancingConfiguration `json:"blue"`
	Diff  RebalancingDiff          `json:"diff"`
	Green RebalancingConfiguration `json:"green"`
}

// RebalancingCreateNodeOperationParams defines model for RebalancingCreateNodeOperationParams.
type RebalancingCreateNodeOperationParams struct {

	// The availability zone name of the created node. If empty - the AZ name will be random.
	AzName *string `json:"azName,omitempty"`

	// The cloud service provider name.
	Csp string `json:"csp"`

	// The instance type of the created node.
	InstanceType string `json:"instanceType"`

	// Whether the created node is a spot instance.
	IsSpot bool `json:"isSpot"`

	// Whether this node is a spot fallback.
	IsSpotFallback *bool `json:"isSpotFallback,omitempty"`

	// The subnet id of the created node. if empty - the subnet id will be random based on the availability zone.
	SubnetId *string `json:"subnetId,omitempty"`

	// The volume size in GiB of the created node.
	VolumeSizeGib int `json:"volumeSizeGib"`
}

// RebalancingDeleteNodeOperationParams defines model for RebalancingDeleteNodeOperationParams.
type RebalancingDeleteNodeOperationParams struct {

	// The cloud service provider name.
	Csp *string `json:"csp,omitempty"`

	// The instance type of the node.
	InstanceType *string `json:"instanceType,omitempty"`

	// Whether the node is a spot instance.
	IsSpot *bool `json:"isSpot,omitempty"`

	// Whether this node is a spot fallback.
	IsSpotFallback *bool `json:"isSpotFallback,omitempty"`
}

// RebalancingDiff defines model for RebalancingDiff.
type RebalancingDiff struct {

	// Hourly price difference between blue and green node configurations in $ currency.
	PriceHourly string `json:"priceHourly"`

	// Monthly price difference between blue and green node configurations in $ currency.
	PriceMonthly string `json:"priceMonthly"`

	// Savings percentage to be had by applying the rebalancing plan.
	SavingsPercentage string `json:"savingsPercentage"`
}

// RebalancingDrainNodeOperationParams defines model for RebalancingDrainNodeOperationParams.
type RebalancingDrainNodeOperationParams struct {

	// The cloud service provider name.
	Csp *string `json:"csp,omitempty"`

	// The instance type of the node.
	InstanceType *string `json:"instanceType,omitempty"`

	// Whether the node is a spot instance.
	IsSpot *bool `json:"isSpot,omitempty"`

	// Whether this node is a spot fallback.
	IsSpotFallback *bool `json:"isSpotFallback,omitempty"`
}

// RebalancingNode defines model for RebalancingNode.
type RebalancingNode struct {

	// Timestamp of the node creation date.
	CreatedAt time.Time `json:"createdAt"`

	// The instance type of this node.
	InstanceType string `json:"instanceType"`

	// Whether this node is control plan node.
	IsControlPlane bool `json:"isControlPlane"`

	// Whether the node is legacy.
	IsLegacy bool `json:"isLegacy"`

	// Whether this node is a spot instance.
	IsSpot bool `json:"isSpot"`

	// Whether this node is a spot fallback.
	IsSpotFallback bool `json:"isSpotFallback"`

	// The provider name which managed this node. Possible types:
	//
	// `CASTAI` - the node is managed by CAST AI.
	//
	// `EKS` - the node is managed by the AWS EKS service.
	//
	// `GKE` - the node is managed by the GCP GKE service.
	//
	// `AKS` - the node is managed by the Azure AKS service.
	//
	// `KOPS` - the node is managed by the cluster manager tool kOps.
	ManagedBy string `json:"managedBy"`

	// Memory capacity of this node in MiBs.
	MemoryMib int `json:"memoryMib"`

	// Milli CPU capacity of this node.
	MilliCpu int `json:"milliCpu"`

	// The name of the node.
	Name string `json:"name"`

	// The hourly price of this node in $ currency.
	PriceHourly string `json:"priceHourly"`

	// Total number of pods in this node.
	TotalPods int `json:"totalPods"`

	// Total number of problematic pods in this node.
	TotalProblematicPods int `json:"totalProblematicPods"`
}

// RebalancingPlan defines model for RebalancingPlan.
type RebalancingPlan struct {

	// ID of the cluster that is being rebalanced.
	ClusterId      string                    `json:"clusterId"`
	Configurations RebalancingConfigurations `json:"configurations"`

	// Timestamp of the rebalancing plan creation.
	CreatedAt time.Time `json:"createdAt"`

	// Timestamp of the rebalancing plan green nodes creation. Null if not yet created.
	CreatedNodesAt *time.Time `json:"createdNodesAt,omitempty"`

	// Timestamp of the rebalancing plan blue nodes deletion. Null if not yet deleted.
	DeletedNodesAt *time.Time `json:"deletedNodesAt,omitempty"`

	// Timestamp of the rebalancing plan blue nodes draining. Null if not yet drained.
	DrainedNodesAt *time.Time              `json:"drainedNodesAt,omitempty"`
	Errors         *[]RebalancingPlanError `json:"errors,omitempty"`

	// Timestamp of the rebalancing plan finish. Null if not yet finished.
	FinishedAt *time.Time `json:"finishedAt,omitempty"`

	// Timestamp of the rebalancing plan generation. Null if not yet generated.
	GeneratedAt *time.Time `json:"generatedAt,omitempty"`

	// Minimum count of worker nodes to be had in the rebalancing plan. Default is 3.
	MinNodes int `json:"minNodes"`

	// List of operations needed to execute this rebalancing plan.
	Operations []RebalancingPlanOperation `json:"operations"`

	// ID of the rebalancing plan.
	RebalancingPlanId string `json:"rebalancingPlanId"`

	// Status of the rebalancing plan:
	//
	// `generating` - the rebalancing plan is new and currently is being generated.
	//
	// `generated` - the rebalancing plan has been generated and can be previewed.
	//
	// `creating_nodes` - the rebalancing plan is being executed, green nodes are being created.
	//
	// `draining_nodes` - the rebalancing plan is being executed, blue nodes are being drained.
	//
	// `deleting_nodes` - the rebalancing plan is being executed, blue nodes are being deleted.
	//
	// `finished` - the rebalancing plan has finished successfully.
	//
	// `error` - the rebalancing plan has failed.
	Status string `json:"status"`

	// Timestamp of the rebalancing plan triggering. Null if not yet triggered.
	TriggeredAt *time.Time `json:"triggeredAt,omitempty"`

	// Timestamp of the rebalancing plan last update.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// RebalancingPlanError defines model for RebalancingPlanError.
type RebalancingPlanError struct {

	// Detailed error message
	Message *string `json:"message,omitempty"`

	// Node id.
	Node *string `json:"node,omitempty"`

	// Pod name.
	Pod *string `json:"pod,omitempty"`

	// Error reason
	Reason *string `json:"reason,omitempty"`
}

// RebalancingPlanOperation defines model for RebalancingPlanOperation.
type RebalancingPlanOperation struct {

	// Defines the parameters used for the `create_node` operation type.
	CreateParams *RebalancingCreateNodeOperationParams `json:"createParams,omitempty"`

	// Timestamp of the operation creation.
	CreatedAt time.Time `json:"createdAt"`

	// Defines the parameters for the `delete_node` operation type.
	DeleteParams *RebalancingDeleteNodeOperationParams `json:"deleteParams,omitempty"`

	// Defines the parameters for the `drain_node` operation type.
	DrainParams *RebalancingDrainNodeOperationParams `json:"drainParams,omitempty"`

	// Error value if the operation has finished with an error.
	Error *string `json:"error,omitempty"`

	// Timestamp of the operation finish date. Only present when the operation has finished, either with an error or not.
	FinishedAt *time.Time `json:"finishedAt,omitempty"`

	// The id of the operation.
	Id string `json:"id"`

	// The id of the node this operation will be executed on.
	NodeId *string `json:"nodeId,omitempty"`

	// Type of the operation. Possible types:
	//
	// `create_node` - a node will be created with specific `create` `params`.
	//
	// `drain_node` - a node will be drained with specific `drain` `params`.
	//
	// `delete_node` - a node will be deleted with specific `delete` `params`.
	Type string `json:"type"`
}

// RebalancingPlansResponse defines model for RebalancingPlansResponse.
type RebalancingPlansResponse struct {

	// List of rebalancing plans
	Items *[]RebalancingPlan `json:"items,omitempty"`
}

// RebalancingRequest defines model for RebalancingRequest.
type RebalancingRequest struct {

	// The minimum count of worker nodes to be had in the rebalancing plan. Default is 3.
	MinNodes *int `json:"minNodes,omitempty"`
}

// ResourceUsage defines model for ResourceUsage.
type ResourceUsage struct {

	// cpu hours used for given date.
	Cpu int `json:"cpu"`

	// start of usage time in RFC3339 format.
	From string `json:"from"`

	// memory (MB) hours used for given date.
	Memory int `json:"memory"`

	// end of usage time in RFC3339 format.
	To string `json:"to"`
}

// ResourceUsageReport defines model for ResourceUsageReport.
type ResourceUsageReport struct {
	Dates []ResourceUsage `json:"dates"`

	// reported usage has occurred after this date. RFC3339 format.
	FromDate string `json:"fromDate"`

	// reported usage has occurred before this date. RFC3339 format.
	ToDate string `json:"toDate"`
}

// Taint defines model for Taint.
type Taint struct {
	Effect *string `json:"effect,omitempty"`
	Key    *string `json:"key,omitempty"`
	Value  *string `json:"value,omitempty"`
}

// UpdateAddonRequest defines model for UpdateAddonRequest.
type UpdateAddonRequest struct {
	ValuesOverrides *UpdateAddonRequest_ValuesOverrides `json:"valuesOverrides,omitempty"`
	Version         *string                             `json:"version,omitempty"`
}

// UpdateAddonRequest_ValuesOverrides defines model for UpdateAddonRequest.ValuesOverrides.
type UpdateAddonRequest_ValuesOverrides struct {
	AdditionalProperties map[string]string `json:"-"`
}

// UpdateCluster defines model for UpdateCluster.
type UpdateCluster struct {

	// Credentials ID list which determines the CSP configuration of this cluster.
	CloudCredentialsIDs []string `json:"cloudCredentialsIDs"`
	Network             *Network `json:"network,omitempty"`
}

// UpdateOrganizationUser defines model for UpdateOrganizationUser.
type UpdateOrganizationUser struct {
	Role OrganizationRole `json:"role"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {

	// user email
	Email string `json:"email"`

	// full name of logged-in user, e.g. "John Doe".
	Name string `json:"name"`

	// internal username. globally unique
	Nickname string `json:"nickname"`
}

// UserProfileResponse defines model for UserProfileResponse.
type UserProfileResponse struct {
	// Embedded struct due to allOf(#/components/schemas/UserProfile)
	UserProfile `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// Indicates user first login to the console.
	FirstLogin *bool `json:"firstLogin,omitempty"`
}

// VpnConfig defines model for VpnConfig.
type VpnConfig struct {
	IpSec     *IpSecConfig     `json:"ipSec,omitempty"`
	WireGuard *WireGuardConfig `json:"wireGuard,omitempty"`
}

// WireGuardConfig defines model for WireGuardConfig.
type WireGuardConfig struct {
	Topology string `json:"topology"`
}

// Workload defines model for Workload.
type Workload struct {

	// Defines cost impact
	CostImpact struct {

		// Defines cost impact level (low, medium, high)
		Level string `json:"level"`

		// Defines cost impact numeric value
		Value float32 `json:"value"`
	} `json:"costImpact"`

	// Controller pods issues
	Issues *[]WorkloadIssue `json:"issues,omitempty"`

	// Memory capacity of this controller in MiBs.
	MemoryMib int `json:"memoryMib"`

	// Milli CPU capacity of this controller.
	MilliCpu int `json:"milliCpu"`

	// Workload name (Controller or Pod name)
	Name string `json:"name"`

	// Namespace
	Namespace string `json:"namespace"`

	// Nodes which are used for this controller
	Nodes []WorkloadNode `json:"nodes"`

	// Pod replicas count
	Replicas int `json:"replicas"`

	// Resource type
	Resource string                  `json:"resource"`
	Status   WorkloadMigrationStatus `json:"status"`
}

// WorkloadIssue defines model for WorkloadIssue.
type WorkloadIssue struct {

	// Issue description
	Descritption *string `json:"descritption,omitempty"`

	// Issue kind
	Kind string `json:"kind"`
}

// WorkloadMigrationStatus defines model for WorkloadMigrationStatus.
type WorkloadMigrationStatus struct {

	// Defines workload migration status
	MigrationStatus string `json:"migrationStatus"`
}

// WorkloadNode defines model for WorkloadNode.
type WorkloadNode struct {

	// Node id
	Id string `json:"id"`

	// Node name
	Name string `json:"name"`

	// Node specifications
	Specs struct {

		// Name of the node's instance type.
		InstanceType string `json:"instanceType"`

		// Memory capacity of this node in MiBs.
		MemoryMib int `json:"memoryMib"`

		// Milli CPU capacity of this nodes.
		MilliCpu int `json:"milliCpu"`
	} `json:"specs"`
	Status WorkloadMigrationStatus `json:"status"`

	// Total number of pods in node
	TotalPods int `json:"totalPods"`

	// Total number of problematic pods in node
	TotalProblematicPods int `json:"totalProblematicPods"`

	// Total number of this workload replicas on this node
	WorkloadReplicas *int `json:"workloadReplicas,omitempty"`
}

// CastaiClusterV1beta1ListNodesResponse defines model for castai.cluster.v1beta1.ListNodesResponse.
type CastaiClusterV1beta1ListNodesResponse struct {
	Items      *[]CastaiClusterV1beta1Node `json:"items,omitempty"`
	NextCursor *string                     `json:"nextCursor,omitempty"`
}

// CastaiClusterV1beta1Node defines model for castai.cluster.v1beta1.Node.
type CastaiClusterV1beta1Node struct {
	AddedBy *string `json:"addedBy,omitempty"`
	Cloud   *string `json:"cloud,omitempty"`

	// created_at represents timestamp of when node was created in cloud infrastructure.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *string    `json:"id,omitempty"`

	// Will be populated only with GetNode request.
	InstanceArchitecture *string `json:"instanceArchitecture"`

	// Will be populated only with GetNode request.
	InstanceId *string `json:"instanceId"`

	// Will be populated only with GetNode request.
	InstanceLabels *CastaiClusterV1beta1Node_InstanceLabels `json:"instanceLabels,omitempty"`

	// Will be populated only with GetNode request.
	InstanceName *string `json:"instanceName"`

	// Will be populated only with GetNode request.
	InstancePrice *string `json:"instancePrice"`
	InstanceType  *string `json:"instanceType,omitempty"`

	// joined_at represents timestamp of when node has joined kubernetes cluster.
	JoinedAt *time.Time                       `json:"joinedAt,omitempty"`
	Labels   *CastaiClusterV1beta1Node_Labels `json:"labels,omitempty"`
	Name     *string                          `json:"name,omitempty"`

	// NodeNetwork represents node network.
	Network   *CastaiClusterV1beta1NodeNetwork `json:"network,omitempty"`
	Region    *string                          `json:"region,omitempty"`
	Resources *CastaiClusterV1beta1Resources   `json:"resources,omitempty"`

	// NodeType defines the role of the VM when joining the Kubernetes cluster. Default value is not allowed.
	Role  *CastaiClusterV1beta1NodeType `json:"role,omitempty"`
	Shape *string                       `json:"shape,omitempty"`

	// NodeSpotConfig defines if node should be created as spot instance, and params for creation.
	SpotConfig *CastaiClusterV1beta1NodeSpotConfig `json:"spotConfig,omitempty"`

	// NodeState contains feedback information about progress on the node provisioning.
	State         *CastaiClusterV1beta1NodeState `json:"state,omitempty"`
	Taints        *[]CastaiClusterV1beta1Taint   `json:"taints,omitempty"`
	Unschedulable *bool                          `json:"unschedulable,omitempty"`
	Zone          *string                        `json:"zone,omitempty"`
}

// CastaiClusterV1beta1Node_InstanceLabels defines model for CastaiClusterV1beta1Node.InstanceLabels.
type CastaiClusterV1beta1Node_InstanceLabels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// CastaiClusterV1beta1Node_Labels defines model for CastaiClusterV1beta1Node.Labels.
type CastaiClusterV1beta1Node_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// CastaiClusterV1beta1NodeNetwork defines model for castai.cluster.v1beta1.NodeNetwork.
type CastaiClusterV1beta1NodeNetwork struct {
	PrivateIp *string `json:"privateIp,omitempty"`
	PublicIp  *string `json:"publicIp,omitempty"`
}

// CastaiClusterV1beta1NodeSpotConfig defines model for castai.cluster.v1beta1.NodeSpotConfig.
type CastaiClusterV1beta1NodeSpotConfig struct {

	// Whether node should be created as spot instance.
	IsSpot *bool `json:"isSpot,omitempty"`

	// Spot instance price. Applicable only for AWS nodes.
	Price *string `json:"price,omitempty"`
}

// CastaiClusterV1beta1NodeState defines model for castai.cluster.v1beta1.NodeState.
type CastaiClusterV1beta1NodeState struct {
	Phase *string `json:"phase,omitempty"`
}

// CastaiClusterV1beta1NodeType defines model for castai.cluster.v1beta1.NodeType.
type CastaiClusterV1beta1NodeType string

// List of CastaiClusterV1beta1NodeType
const (
	CastaiClusterV1beta1NodeType_NODE_TYPE_INVALID CastaiClusterV1beta1NodeType = "NODE_TYPE_INVALID"
	CastaiClusterV1beta1NodeType_NODE_TYPE_MASTER  CastaiClusterV1beta1NodeType = "NODE_TYPE_MASTER"
	CastaiClusterV1beta1NodeType_NODE_TYPE_WORKER  CastaiClusterV1beta1NodeType = "NODE_TYPE_WORKER"
	CastaiClusterV1beta1NodeType_master            CastaiClusterV1beta1NodeType = "master"
	CastaiClusterV1beta1NodeType_worker            CastaiClusterV1beta1NodeType = "worker"
)

// CastaiClusterV1beta1Resources defines model for castai.cluster.v1beta1.Resources.
type CastaiClusterV1beta1Resources struct {
	CpuAllocatableMilli *int32 `json:"cpuAllocatableMilli,omitempty"`

	// VCPU (in MiB) available on the instance type. Will be populated only with GetNode request.
	CpuCapacityMilli  *int32 `json:"cpuCapacityMilli"`
	CpuRequestsMilli  *int32 `json:"cpuRequestsMilli,omitempty"`
	MemAllocatableMib *int32 `json:"memAllocatableMib,omitempty"`

	// Ram (in MiB) available on the instance type. Will be populated only with GetNode request.
	MemCapacityMib *int32 `json:"memCapacityMib"`
	MemRequestsMib *int32 `json:"memRequestsMib,omitempty"`
}

// CastaiClusterV1beta1Taint defines model for castai.cluster.v1beta1.Taint.
type CastaiClusterV1beta1Taint struct {
	Effect *string `json:"effect,omitempty"`
	Key    *string `json:"key,omitempty"`
	Value  *string `json:"value,omitempty"`
}

// CastaiV1Cloud defines model for castai.v1.Cloud.
type CastaiV1Cloud string

// List of CastaiV1Cloud
const (
	CastaiV1Cloud_AWS     CastaiV1Cloud = "AWS"
	CastaiV1Cloud_AZURE   CastaiV1Cloud = "AZURE"
	CastaiV1Cloud_GCP     CastaiV1Cloud = "GCP"
	CastaiV1Cloud_INVALID CastaiV1Cloud = "INVALID"
	CastaiV1Cloud_aws     CastaiV1Cloud = "aws"
	CastaiV1Cloud_azure   CastaiV1Cloud = "azure"
	CastaiV1Cloud_gcp     CastaiV1Cloud = "gcp"
	CastaiV1Cloud_invalid CastaiV1Cloud = "invalid"
)

// ClusteractionsV1AckClusterActionResponse defines model for clusteractions.v1.AckClusterActionResponse.
type ClusteractionsV1AckClusterActionResponse map[string]interface{}

// ClusteractionsV1ChartSource defines model for clusteractions.v1.ChartSource.
type ClusteractionsV1ChartSource struct {
	Name    *string `json:"name,omitempty"`
	RepoUrl *string `json:"repoUrl,omitempty"`
	Version *string `json:"version,omitempty"`
}

// ClusteractionsV1ClusterAction defines model for clusteractions.v1.ClusterAction.
type ClusteractionsV1ClusterAction struct {
	ActionApproveCsr        *ClusteractionsV1ClusterActionApproveCSR        `json:"actionApproveCsr,omitempty"`
	ActionChartUninstall    *ClusteractionsV1ClusterActionChartUninstall    `json:"actionChartUninstall,omitempty"`
	ActionChartUpsert       *ClusteractionsV1ClusterActionChartUpsert       `json:"actionChartUpsert,omitempty"`
	ActionCreateEvent       *ClusteractionsV1ClusterActionCreateEvent       `json:"actionCreateEvent,omitempty"`
	ActionDeleteNode        *ClusteractionsV1ClusterActionDeleteNode        `json:"actionDeleteNode,omitempty"`
	ActionDisconnectCluster *ClusteractionsV1ClusterActionDisconnectCluster `json:"actionDisconnectCluster,omitempty"`
	ActionDrainNode         *ClusteractionsV1ClusterActionDrainNode         `json:"actionDrainNode,omitempty"`
	ActionPatchNode         *ClusteractionsV1ClusterActionPatchNode         `json:"actionPatchNode,omitempty"`
	ActionSendAksInitData   *ClusteractionsV1ClusterActionSendAKSInitData   `json:"actionSendAksInitData,omitempty"`
	CreatedAt               *time.Time                                      `json:"createdAt,omitempty"`
	DoneAt                  *time.Time                                      `json:"doneAt,omitempty"`
	Error                   *string                                         `json:"error"`
	Id                      *string                                         `json:"id,omitempty"`
}

// ClusteractionsV1ClusterActionAck defines model for clusteractions.v1.ClusterActionAck.
type ClusteractionsV1ClusterActionAck struct {
	Error *string `json:"error"`
}

// ClusteractionsV1ClusterActionApproveCSR defines model for clusteractions.v1.ClusterActionApproveCSR.
type ClusteractionsV1ClusterActionApproveCSR struct {
	NodeName *string `json:"nodeName,omitempty"`
}

// ClusteractionsV1ClusterActionChartUninstall defines model for clusteractions.v1.ClusterActionChartUninstall.
type ClusteractionsV1ClusterActionChartUninstall struct {
	Namespace   *string `json:"namespace,omitempty"`
	ReleaseName *string `json:"releaseName,omitempty"`
}

// ClusteractionsV1ClusterActionChartUpsert defines model for clusteractions.v1.ClusterActionChartUpsert.
type ClusteractionsV1ClusterActionChartUpsert struct {
	ChartSource     *ClusteractionsV1ChartSource                              `json:"chartSource,omitempty"`
	Namespace       *string                                                   `json:"namespace,omitempty"`
	ReleaseName     *string                                                   `json:"releaseName,omitempty"`
	ValuesOverrides *ClusteractionsV1ClusterActionChartUpsert_ValuesOverrides `json:"valuesOverrides,omitempty"`
}

// ClusteractionsV1ClusterActionChartUpsert_ValuesOverrides defines model for ClusteractionsV1ClusterActionChartUpsert.ValuesOverrides.
type ClusteractionsV1ClusterActionChartUpsert_ValuesOverrides struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ClusteractionsV1ClusterActionCreateEvent defines model for clusteractions.v1.ClusterActionCreateEvent.
type ClusteractionsV1ClusterActionCreateEvent struct {
	Action *string `json:"action,omitempty"`

	// Event time should not be set during action scheduling. It's added during actions poll.
	EventTime          *time.Time                       `json:"eventTime,omitempty"`
	EventType          *string                          `json:"eventType,omitempty"`
	Message            *string                          `json:"message,omitempty"`
	ObjectReference    *ClusteractionsV1ObjectReference `json:"objectReference,omitempty"`
	Reason             *string                          `json:"reason,omitempty"`
	ReportingComponent *string                          `json:"reportingComponent,omitempty"`
}

// ClusteractionsV1ClusterActionDeleteNode defines model for clusteractions.v1.ClusterActionDeleteNode.
type ClusteractionsV1ClusterActionDeleteNode struct {
	NodeName *string `json:"nodeName,omitempty"`
}

// ClusteractionsV1ClusterActionDisconnectCluster defines model for clusteractions.v1.ClusterActionDisconnectCluster.
type ClusteractionsV1ClusterActionDisconnectCluster map[string]interface{}

// ClusteractionsV1ClusterActionDrainNode defines model for clusteractions.v1.ClusterActionDrainNode.
type ClusteractionsV1ClusterActionDrainNode struct {
	DrainTimeoutSeconds *int32  `json:"drainTimeoutSeconds,omitempty"`
	Force               *bool   `json:"force,omitempty"`
	NodeName            *string `json:"nodeName,omitempty"`
}

// ClusteractionsV1ClusterActionPatchNode defines model for clusteractions.v1.ClusterActionPatchNode.
type ClusteractionsV1ClusterActionPatchNode struct {
	Labels   *ClusteractionsV1ClusterActionPatchNode_Labels `json:"labels,omitempty"`
	NodeName *string                                        `json:"nodeName,omitempty"`
	Taints   *[]ClusteractionsV1NodeTaint                   `json:"taints,omitempty"`
}

// ClusteractionsV1ClusterActionPatchNode_Labels defines model for ClusteractionsV1ClusterActionPatchNode.Labels.
type ClusteractionsV1ClusterActionPatchNode_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ClusteractionsV1ClusterActionSendAKSInitData defines model for clusteractions.v1.ClusterActionSendAKSInitData.
type ClusteractionsV1ClusterActionSendAKSInitData map[string]interface{}

// ClusteractionsV1IngestLogsResponse defines model for clusteractions.v1.IngestLogsResponse.
type ClusteractionsV1IngestLogsResponse map[string]interface{}

// ClusteractionsV1LogEvent defines model for clusteractions.v1.LogEvent.
type ClusteractionsV1LogEvent struct {
	Fields  *ClusteractionsV1LogEvent_Fields `json:"fields,omitempty"`
	Level   *string                          `json:"level,omitempty"`
	Message *string                          `json:"message,omitempty"`
	Time    *time.Time                       `json:"time,omitempty"`
}

// ClusteractionsV1LogEvent_Fields defines model for ClusteractionsV1LogEvent.Fields.
type ClusteractionsV1LogEvent_Fields struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ClusteractionsV1NodeTaint defines model for clusteractions.v1.NodeTaint.
type ClusteractionsV1NodeTaint struct {
	Effect *string `json:"effect,omitempty"`
	Key    *string `json:"key,omitempty"`
	Value  *string `json:"value,omitempty"`
}

// ClusteractionsV1ObjectReference defines model for clusteractions.v1.ObjectReference.
type ClusteractionsV1ObjectReference struct {
	ApiVersion      *string `json:"apiVersion"`
	FieldPath       *string `json:"fieldPath"`
	Kind            *string `json:"kind"`
	Name            *string `json:"name"`
	Namespace       *string `json:"namespace"`
	ResourceVersion *string `json:"resourceVersion"`
	Uid             *string `json:"uid"`
}

// ClusteractionsV1PollClusterActionsResponse defines model for clusteractions.v1.PollClusterActionsResponse.
type ClusteractionsV1PollClusterActionsResponse struct {
	Items *[]ClusteractionsV1ClusterAction `json:"items,omitempty"`
}

// ExternalclusterV1AKSClusterParams defines model for externalcluster.v1.AKSClusterParams.
type ExternalclusterV1AKSClusterParams struct {

	// Max pods per node. Default is 30.
	MaxPodsPerNode *int32 `json:"maxPodsPerNode,omitempty"`

	// Node resource group of the cluster.
	NodeResourceGroup *string `json:"nodeResourceGroup,omitempty"`

	// Region of the cluster.
	Region *string `json:"region,omitempty"`

	// Azure subscription ID where cluster runs.
	SubscriptionId *string `json:"subscriptionId,omitempty"`
}

// ExternalclusterV1AddNodeResponse defines model for externalcluster.v1.AddNodeResponse.
type ExternalclusterV1AddNodeResponse struct {

	// The ID of the node.
	NodeId string `json:"nodeId"`

	// Add node operation ID.
	OperationId string `json:"operationId"`
}

// ExternalclusterV1CloudEvent defines model for externalcluster.v1.CloudEvent.
type ExternalclusterV1CloudEvent struct {

	// Event type.
	EventType *string `json:"eventType,omitempty"`

	// Node provider ID, eg.: aws instance-id.
	Node *string `json:"node,omitempty"`

	// Cast node ID.
	NodeId *string `json:"nodeId"`

	// Node state.
	NodeState *string `json:"nodeState,omitempty"`
}

// ExternalclusterV1Cluster defines model for externalcluster.v1.Cluster.
type ExternalclusterV1Cluster struct {

	// The date agent snapshot was last received.
	AgentSnapshotReceivedAt *time.Time `json:"agentSnapshotReceivedAt,omitempty"`

	// Agent status.
	AgentStatus *string `json:"agentStatus,omitempty"`

	// AKSClusterParams defines AKS-specific arguments.
	Aks *ExternalclusterV1AKSClusterParams `json:"aks,omitempty"`

	// All available zones in cluster's region.
	AllRegionZones *[]ExternalclusterV1Zone `json:"allRegionZones,omitempty"`

	// User friendly unique cluster identifier.
	ClusterNameId *string `json:"clusterNameId,omitempty"`

	// The date when cluster was registered.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// The cluster's credentials ID.
	CredentialsId *string `json:"credentialsId,omitempty"`

	// EKSClusterParams defines EKS-specific arguments.
	Eks *ExternalclusterV1EKSClusterParams `json:"eks,omitempty"`

	// GKEClusterParams defines GKE-specific arguments.
	Gke *ExternalclusterV1GKEClusterParams `json:"gke,omitempty"`

	// The cluster's ID.
	Id *string `json:"id,omitempty"`

	// KOPSClusterParams defines KOPS-specific arguments.
	Kops *ExternalclusterV1KOPSClusterParams `json:"kops,omitempty"`

	// The name of the external cluster.
	Name *string `json:"name,omitempty"`

	// The cluster's organization ID.
	OrganizationId *string `json:"organizationId,omitempty"`

	// Cluster cloud provider type.
	ProviderType *string `json:"providerType,omitempty"`

	// Shows last reconcile error if any.
	ReconcileError *string `json:"reconcileError"`

	// Region represents cluster region.
	Region *ExternalclusterV1Region `json:"region,omitempty"`

	// Optional SSH public key for nodes.
	SshPublicKey *string `json:"sshPublicKey"`

	// Current status of the cluster.
	Status *string `json:"status,omitempty"`

	// Cluster subnets.
	Subnets *[]ExternalclusterV1Subnet `json:"subnets,omitempty"`

	// Cluster zones.
	Zones *[]ExternalclusterV1Zone `json:"zones,omitempty"`
}

// ExternalclusterV1ClusterUpdate defines model for externalcluster.v1.ClusterUpdate.
type ExternalclusterV1ClusterUpdate struct {
	Aks *ExternalclusterV1UpdateAKSClusterParams `json:"aks,omitempty"`

	// JSON encoded cluster credentials string.
	Credentials *string `json:"credentials,omitempty"`

	// UpdateEKSClusterParams defines updatable EKS cluster configuration.
	Eks *ExternalclusterV1UpdateEKSClusterParams `json:"eks,omitempty"`

	// UpdateKOPSClusterParams defines updatable KOPS cluster configuration.
	Kops *ExternalclusterV1UpdateKOPSClusterParams `json:"kops,omitempty"`

	// Optional SSH public key. Value should be base64 encoded. For AWS (eks,kops) it's also allowed to pass key pair id.
	SshPublicKey *string `json:"sshPublicKey"`
}

// ExternalclusterV1CreateClusterTokenResponse defines model for externalcluster.v1.CreateClusterTokenResponse.
type ExternalclusterV1CreateClusterTokenResponse struct {
	Token *string `json:"token,omitempty"`
}

// ExternalclusterV1DeleteNodeResponse defines model for externalcluster.v1.DeleteNodeResponse.
type ExternalclusterV1DeleteNodeResponse struct {

	// Node delete operation ID.
	OperationId *string `json:"operationId,omitempty"`
}

// ExternalclusterV1DisconnectConfig defines model for externalcluster.v1.DisconnectConfig.
type ExternalclusterV1DisconnectConfig struct {

	// Whether CAST provisioned nodes should be deleted.
	DeleteProvisionedNodes *bool `json:"deleteProvisionedNodes,omitempty"`
}

// ExternalclusterV1DrainConfig defines model for externalcluster.v1.DrainConfig.
type ExternalclusterV1DrainConfig struct {

	// If set to true, pods will be forcefully deleted after drain timeout.
	Force *bool `json:"force,omitempty"`

	// Node drain timeout in seconds. Defaults to 600s if not set.
	TimeoutSeconds *int32 `json:"timeoutSeconds,omitempty"`
}

// ExternalclusterV1DrainNodeResponse defines model for externalcluster.v1.DrainNodeResponse.
type ExternalclusterV1DrainNodeResponse struct {

	// Drain node operation ID.
	OperationId string `json:"operationId"`
}

// ExternalclusterV1EKSClusterParams defines model for externalcluster.v1.EKSClusterParams.
type ExternalclusterV1EKSClusterParams struct {

	// AWS Account ID where cluster runs.
	AccountId     *string `json:"accountId,omitempty"`
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`

	// Name of the cluster.
	ClusterName  *string `json:"clusterName,omitempty"`
	DnsClusterIp *string `json:"dnsClusterIp,omitempty"`

	// Output only. Cluster's instance profile ARN used for CAST provisioned nodes.
	InstanceProfileArn *string `json:"instanceProfileArn,omitempty"`

	// Region of the cluster.
	Region *string `json:"region,omitempty"`

	// Output only. Cluster's security groups configuration.
	SecurityGroups *[]string `json:"securityGroups,omitempty"`

	// Output only. Cluster's subnets configuration.
	Subnets *[]string `json:"subnets,omitempty"`

	// Output only. CAST provisioned nodes tags configuration.
	Tags *ExternalclusterV1EKSClusterParams_Tags `json:"tags,omitempty"`
}

// ExternalclusterV1EKSClusterParams_Tags defines model for ExternalclusterV1EKSClusterParams.Tags.
type ExternalclusterV1EKSClusterParams_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ExternalclusterV1GKEClusterParams defines model for externalcluster.v1.GKEClusterParams.
type ExternalclusterV1GKEClusterParams struct {

	// Name of the cluster.
	ClusterName *string `json:"clusterName,omitempty"`

	// Location of the cluster.
	Location *string `json:"location,omitempty"`

	// GCP project ID where cluster runs.
	ProjectId *string `json:"projectId,omitempty"`

	// Region of the cluster.
	Region *string `json:"region,omitempty"`
}

// ExternalclusterV1GPUConfig defines model for externalcluster.v1.GPUConfig.
type ExternalclusterV1GPUConfig struct {

	// Number of GPUs.
	Count *int32 `json:"count,omitempty"`

	// GPU type.
	Type *string `json:"type,omitempty"`
}

// ExternalclusterV1GetAssumeRoleUserResponse defines model for externalcluster.v1.GetAssumeRoleUserResponse.
type ExternalclusterV1GetAssumeRoleUserResponse struct {
	Arn *string `json:"arn,omitempty"`
}

// ExternalclusterV1GetCredentialsScriptResponse defines model for externalcluster.v1.GetCredentialsScriptResponse.
type ExternalclusterV1GetCredentialsScriptResponse struct {
	Script *string `json:"script,omitempty"`
}

// ExternalclusterV1GetKubeconfigResponse defines model for externalcluster.v1.GetKubeconfigResponse.
type ExternalclusterV1GetKubeconfigResponse struct {

	// Cluster's base64 encoded kubeconfig.
	Kubeconfig *[]byte `json:"kubeconfig,omitempty"`
}

// ExternalclusterV1HandleCloudEventResponse defines model for externalcluster.v1.HandleCloudEventResponse.
type ExternalclusterV1HandleCloudEventResponse map[string]interface{}

// ExternalclusterV1KOPSClusterParams defines model for externalcluster.v1.KOPSClusterParams.
type ExternalclusterV1KOPSClusterParams struct {

	// Cloud provider of the cluster.
	Cloud *string `json:"cloud,omitempty"`

	// Name of the cluster.
	ClusterName *string `json:"clusterName,omitempty"`

	// Custom vm image. See https://kops.sigs.k8s.io/operations/images for more details.
	Image *string `json:"image,omitempty"`

	// Region of the cluster.
	Region *string `json:"region,omitempty"`

	// KOPS state store url.
	StateStore *string `json:"stateStore,omitempty"`

	// Output only. CAST provisioned nodes tags configuration.
	Tags *ExternalclusterV1KOPSClusterParams_Tags `json:"tags,omitempty"`
}

// ExternalclusterV1KOPSClusterParams_Tags defines model for ExternalclusterV1KOPSClusterParams.Tags.
type ExternalclusterV1KOPSClusterParams_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ExternalclusterV1KubernetesTaint defines model for externalcluster.v1.KubernetesTaint.
type ExternalclusterV1KubernetesTaint struct {
	Effect string `json:"effect"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

// ExternalclusterV1ListClustersResponse defines model for externalcluster.v1.ListClustersResponse.
type ExternalclusterV1ListClustersResponse struct {
	Items *[]ExternalclusterV1Cluster `json:"items,omitempty"`
}

// ExternalclusterV1NodeConfig defines model for externalcluster.v1.NodeConfig.
type ExternalclusterV1NodeConfig struct {

	// GPUConfig describes instance GPU configuration.
	//
	// Required while provisioning GCP N1 instance types with GPU.
	// Eg.: n1-standard-2 with 8 x NVIDIA Tesla K80
	GpuConfig *ExternalclusterV1GPUConfig `json:"gpuConfig,omitempty"`

	// Instance type of the node.
	InstanceType string `json:"instanceType"`

	// Node Kubernetes labels.
	KubernetesLabels *ExternalclusterV1NodeConfig_KubernetesLabels `json:"kubernetesLabels,omitempty"`

	// Node Kubernetes taints.
	KubernetesTaints *[]ExternalclusterV1KubernetesTaint `json:"kubernetesTaints,omitempty"`

	// NodeSpotConfig defines if node should be created as spot instance, and params for creation.
	SpotConfig *CastaiClusterV1beta1NodeSpotConfig `json:"spotConfig,omitempty"`

	// Node subnet ID.
	SubnetId *string `json:"subnetId"`

	// NodeVolume defines node's local root volume configuration.
	Volume *ExternalclusterV1NodeVolume `json:"volume,omitempty"`

	// Zone of the node.
	Zone *string `json:"zone"`
}

// ExternalclusterV1NodeConfig_KubernetesLabels defines model for ExternalclusterV1NodeConfig.KubernetesLabels.
type ExternalclusterV1NodeConfig_KubernetesLabels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ExternalclusterV1NodeVolume defines model for externalcluster.v1.NodeVolume.
type ExternalclusterV1NodeVolume struct {

	// Volume size in GiB.
	Size *int32 `json:"size,omitempty"`
}

// ExternalclusterV1ReconcileClusterResponse defines model for externalcluster.v1.ReconcileClusterResponse.
type ExternalclusterV1ReconcileClusterResponse map[string]interface{}

// ExternalclusterV1Region defines model for externalcluster.v1.Region.
type ExternalclusterV1Region struct {

	// Display name of the region.
	DisplayName *string `json:"displayName,omitempty"`

	// Name of the region.
	Name *string `json:"name,omitempty"`
}

// ExternalclusterV1RegisterClusterRequest defines model for externalcluster.v1.RegisterClusterRequest.
type ExternalclusterV1RegisterClusterRequest struct {

	// AKSClusterParams defines AKS-specific arguments.
	Aks *ExternalclusterV1AKSClusterParams `json:"aks,omitempty"`

	// EKSClusterParams defines EKS-specific arguments.
	Eks *ExternalclusterV1EKSClusterParams `json:"eks,omitempty"`

	// GKEClusterParams defines GKE-specific arguments.
	Gke *ExternalclusterV1GKEClusterParams `json:"gke,omitempty"`

	// The ID of the cluster.
	Id *string `json:"id,omitempty"`

	// KOPSClusterParams defines KOPS-specific arguments.
	Kops *ExternalclusterV1KOPSClusterParams `json:"kops,omitempty"`

	// The name of the cluster.
	Name string `json:"name"`

	// Organization of the cluster.
	OrganizationId *string `json:"organizationId,omitempty"`
}

// ExternalclusterV1Subnet defines model for externalcluster.v1.Subnet.
type ExternalclusterV1Subnet struct {

	// Cidr block of the subnet.
	Cidr *string `json:"cidr,omitempty"`

	// The ID of the subnet.
	Id *string `json:"id,omitempty"`

	// Deprecated. Subnet name is not filled and should not be used.
	Name *string `json:"name,omitempty"`

	// Subnet's zone name.
	ZoneName *string `json:"zoneName,omitempty"`
}

// ExternalclusterV1UpdateAKSClusterParams defines model for externalcluster.v1.UpdateAKSClusterParams.
type ExternalclusterV1UpdateAKSClusterParams struct {

	// Maximum number of pods that can be run on a node, which affects how many IP addresses you will need for each node. Defaults to 30.
	// With the Azure CNI plugin you can specify a value between 10 and 250 inclusive, and with the kubenet plugin you can specify a value between 10 and 110 inclusive.
	MaxPodsPerNode *int32 `json:"maxPodsPerNode,omitempty"`

	// Optional subnet ids for CAST provisioned nodes.
	// If not set, subnets from AKS cluster configuration are used.
	Subnets *[]string `json:"subnets,omitempty"`
}

// ExternalclusterV1UpdateEKSClusterParams defines model for externalcluster.v1.UpdateEKSClusterParams.
type ExternalclusterV1UpdateEKSClusterParams struct {
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
	DnsClusterIp  *string `json:"dnsClusterIp,omitempty"`

	// Optional instance profile ARN for CAST provisioned nodes.
	InstanceProfileArn *string `json:"instanceProfileArn,omitempty"`

	// Optional security groups for CAST provisioned nodes.
	SecurityGroups *[]string `json:"securityGroups,omitempty"`

	// Optional subnets for CAST provisioned nodes.
	// If not set, subnets from EKS cluster configuration are used.
	Subnets *[]string `json:"subnets,omitempty"`

	// Optional tags for CAST provisioned nodes.
	Tags *ExternalclusterV1UpdateEKSClusterParams_Tags `json:"tags,omitempty"`
}

// ExternalclusterV1UpdateEKSClusterParams_Tags defines model for ExternalclusterV1UpdateEKSClusterParams.Tags.
type ExternalclusterV1UpdateEKSClusterParams_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ExternalclusterV1UpdateKOPSClusterParams defines model for externalcluster.v1.UpdateKOPSClusterParams.
type ExternalclusterV1UpdateKOPSClusterParams struct {

	// Optional custom vm image. See https://kops.sigs.k8s.io/operations/images for more details.
	Image *string `json:"image,omitempty"`

	// Optional tags for CAST provisioned nodes.
	Tags *ExternalclusterV1UpdateKOPSClusterParams_Tags `json:"tags,omitempty"`
}

// ExternalclusterV1UpdateKOPSClusterParams_Tags defines model for ExternalclusterV1UpdateKOPSClusterParams.Tags.
type ExternalclusterV1UpdateKOPSClusterParams_Tags struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ExternalclusterV1Zone defines model for externalcluster.v1.Zone.
type ExternalclusterV1Zone struct {

	// ID of the zone.
	Id *string `json:"id,omitempty"`

	// Zone name.
	Name *string `json:"name,omitempty"`
}

// PoliciesV1ClusterLimitsCpu defines model for policies.v1.ClusterLimitsCpu.
type PoliciesV1ClusterLimitsCpu struct {

	// Defines the maximum allowed amount of vCPUs in the whole cluster.
	MaxCores *int32 `json:"maxCores,omitempty"`

	// Defines the minimum allowed amount of CPUs in the whole cluster.
	MinCores *int32 `json:"minCores,omitempty"`
}

// PoliciesV1ClusterLimitsPolicy defines model for policies.v1.ClusterLimitsPolicy.
type PoliciesV1ClusterLimitsPolicy struct {

	// Defines the minimum and maximum amount of vCPUs for cluster's worker nodes.
	Cpu *PoliciesV1ClusterLimitsCpu `json:"cpu,omitempty"`

	// Enable/disable cluster size limits policy.
	Enabled *bool `json:"enabled"`
}

// PoliciesV1Evictor defines model for policies.v1.Evictor.
type PoliciesV1Evictor struct {

	// Enable/disable aggressive mode. By default, Evictor does not target nodes that are running unreplicated pods.
	// This mode will make the Evictor start considering application with just a single replica.
	AggressiveMode *bool `json:"aggressiveMode"`

	// * We have detected an already existing Evictor installation. If you want CAST AI to manage the Evictor instead,
	//   then you will need to remove the current installation first.
	Allowed *bool `json:"allowed"`

	// Configure the interval duration between Evictor operations. This property can be used to lower or raise the
	// frequency of the Evictor's find-and-drain operations.
	CycleInterval *string `json:"cycleInterval"`

	// Enable/disable dry-run. This property allows you to prevent the Evictor from carrying any operations out and
	// preview the actions it would take.
	DryRun *bool `json:"dryRun"`

	// Enable/disable the Evictor policy. This will either install or uninstall the Evictor component in your cluster.
	Enabled *bool `json:"enabled"`

	// Enable/disable scoped mode. By default, Evictor targets all nodes in the cluster. This mode will constrain in to
	// just the nodes which were created by CAST AI.
	ScopedMode *bool `json:"scopedMode"`
}

// PoliciesV1GetClusterNodeConstraintsResponse defines model for policies.v1.GetClusterNodeConstraintsResponse.
type PoliciesV1GetClusterNodeConstraintsResponse struct {

	// The ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`

	// A list of viable CPU:Memory combinations.
	Items *[]PoliciesV1GetClusterNodeConstraintsResponseCpuRam `json:"items,omitempty"`
}

// PoliciesV1GetClusterNodeConstraintsResponseCpuRam defines model for policies.v1.GetClusterNodeConstraintsResponse.CpuRam.
type PoliciesV1GetClusterNodeConstraintsResponseCpuRam struct {

	// Number of CPUs.
	CpuCores *int32 `json:"cpuCores,omitempty"`

	// Number of memory in MiB.
	RamMib *int32 `json:"ramMib,omitempty"`
}

// PoliciesV1Headroom defines model for policies.v1.Headroom.
type PoliciesV1Headroom struct {

	// Defines percentage of additional CPU capacity to be added.
	CpuPercentage *int32 `json:"cpuPercentage,omitempty"`

	// Defines whether Headroom is enabled.
	Enabled          *bool  `json:"enabled"`
	MemoryPercentage *int32 `json:"memoryPercentage,omitempty"`
}

// PoliciesV1NodeConstraints defines model for policies.v1.NodeConstraints.
type PoliciesV1NodeConstraints struct {

	// Defines whether NodeConstraints are enabled.
	Enabled *bool `json:"enabled"`

	// Defines max CPU cores for the node to pick.
	MaxCpuCores *int32 `json:"maxCpuCores,omitempty"`

	// Defines max RAM in MiB for the node to pick.
	MaxRamMib *int32 `json:"maxRamMib,omitempty"`

	// Defines min CPU cores for the node to pick.
	MinCpuCores *int32 `json:"minCpuCores,omitempty"`

	// Defines min RAM in MiB for the node to pick.
	MinRamMib *int32 `json:"minRamMib,omitempty"`
}

// PoliciesV1NodeDownscaler defines model for policies.v1.NodeDownscaler.
type PoliciesV1NodeDownscaler struct {

	// Defines whether Node Downscaler should opt in for removing empty worker nodes when possible.
	EmptyNodes *PoliciesV1NodeDownscalerEmptyNodes `json:"emptyNodes,omitempty"`

	// Defines the CAST AI Evictor component settings. Evictor watches the pods running in your cluster and looks for
	// ways to compact them into fewer nodes, making nodes empty, which will be removed by the the empty worker nodes
	// policy.
	Evictor *PoliciesV1Evictor `json:"evictor,omitempty"`
}

// PoliciesV1NodeDownscalerEmptyNodes defines model for policies.v1.NodeDownscalerEmptyNodes.
type PoliciesV1NodeDownscalerEmptyNodes struct {

	// * increasing the value will make the cluster more responsive to dynamic
	// * workloads in the expense of higher cluster cost.
	DelaySeconds *int32 `json:"delaySeconds"`

	// Enable/disable the empty worker nodes policy.
	Enabled *bool `json:"enabled"`
}

// PoliciesV1Policies defines model for policies.v1.Policies.
type PoliciesV1Policies struct {

	// Defines minimum and maximum amount of CPU the cluster can have.
	ClusterLimits *PoliciesV1ClusterLimitsPolicy `json:"clusterLimits,omitempty"`

	// Enable/disable all policies.
	Enabled *bool `json:"enabled"`

	// Run autoscaler in scoped mode. Only specifically marked pods will be considered for autoscaling, and only nodes
	// provisioned by autoscaler will be considered for downscaling.
	IsScopedMode *bool `json:"isScopedMode"`

	// Node Downscaler defines policies for removing nodes based on the configured conditions.
	NodeDownscaler *PoliciesV1NodeDownscaler `json:"nodeDownscaler,omitempty"`

	// Policy defining whether autoscaler can use spot instances for provisioning additional workloads.
	SpotInstances *PoliciesV1SpotInstances `json:"spotInstances,omitempty"`

	// Policy defining autoscaler's behavior when unscedulable pods were detected.
	UnschedulablePods *PoliciesV1UnschedulablePodsPolicy `json:"unschedulablePods,omitempty"`
}

// PoliciesV1SpotBackups defines model for policies.v1.SpotBackups.
type PoliciesV1SpotBackups struct {

	// Enable/disable spot backups policy.
	Enabled *bool `json:"enabled"`

	// Defines interval on how often spot backups restore to real spot should occur.
	SpotBackupRestoreRateSeconds *int32 `json:"spotBackupRestoreRateSeconds"`
}

// PoliciesV1SpotInstances defines model for policies.v1.SpotInstances.
type PoliciesV1SpotInstances struct {

	// Enable spot instances for these cloud service providers.
	Clouds *[]CastaiV1Cloud `json:"clouds,omitempty"`

	// Enable/disable spot instances policy.
	Enabled *bool `json:"enabled"`

	// Max allowed reclaim rate when choosing spot instance type. E.g. if the value is 10%, instance types having 10% or
	// higher reclaim rate will not be considered. Set to zero to use all instance types regardless of reclaim rate.
	MaxReclaimRate *int32 `json:"maxReclaimRate"`

	// Policy defining whether autoscaler can use spot backups instead of spot instances when spot instances are not
	// available.
	SpotBackups *PoliciesV1SpotBackups `json:"spotBackups,omitempty"`
}

// PoliciesV1UnschedulablePodsPolicy defines model for policies.v1.UnschedulablePodsPolicy.
type PoliciesV1UnschedulablePodsPolicy struct {

	// Defines default ratio of 1 CPU to Volume GiB when creating new nodes. If set to 25, the ration would be
	// 1 CPU : 25 GiB, for example a node with 16 CPU would have a 400 GiB volume.
	DiskGibToCpuRatio *int32 `json:"diskGibToCpuRatio"`

	// Enable/disable unschedulable pods detection policy.
	Enabled *bool `json:"enabled"`

	// Defines Headroom for Unschedulable Pods.
	Headroom *PoliciesV1Headroom `json:"headroom,omitempty"`

	// Defines Headroom for Unschedulable Pods.
	HeadroomSpot *PoliciesV1Headroom `json:"headroomSpot,omitempty"`

	// Defines the NodeConstraints that will be applied when autoscaling with UnschedulablePodsPolicy.
	NodeConstraints *PoliciesV1NodeConstraints `json:"nodeConstraints,omitempty"`
}

// MetricType defines model for MetricType.
type MetricType []string

// AuthTokenId defines model for authTokenId.
type AuthTokenId string

// ClusterId defines model for clusterId.
type ClusterId string

// CredentialsId defines model for credentialsId.
type CredentialsId string

// Cursor defines model for cursor.
type Cursor string

// FilterClusterId defines model for filterClusterId.
type FilterClusterId string

// FilterFromDate defines model for filterFromDate.
type FilterFromDate string

// FilterToDate defines model for filterToDate.
type FilterToDate string

// HeaderOrganizationId defines model for headerOrganizationId.
type HeaderOrganizationId string

// Limit defines model for limit.
type Limit int

// ListAddonsParams defines parameters for ListAddons.
type ListAddonsParams struct {

	// Addon id.
	Ids *[]string `json:"ids,omitempty"`

	// Addon name.
	Names *[]string `json:"names,omitempty"`

	// Version (example: 1.1.0) or on of keywords: [latest].
	Versions *[]string `json:"versions,omitempty"`

	// Repository type (example: 'official-addons').
	Repositories *[]string `json:"repositories,omitempty"`
}

// GetAgentInstallScriptParams defines parameters for GetAgentInstallScript.
type GetAgentInstallScriptParams struct {

	// Kubernetes provider name.
	Provider *string `json:"provider,omitempty"`

	// AWS region of your EKS cluster.
	EksRegion *string `json:"eks.region,omitempty"`

	// Your AWS account id. Can be retrieved by executing `aws sts get-caller-identity`.
	EksAccountId *string `json:"eks.accountId,omitempty"`

	// The name of your EKS cluster.
	EksClusterName *string `json:"eks.clusterName,omitempty"`

	// GCP region of your GKE cluster.
	GkeRegion *string `json:"gke.region,omitempty"`

	// Location of your GKE cluster.
	GkeLocation *string `json:"gke.location,omitempty"`

	// GCP project id in which your GKE cluster is created.
	GkeProjectId *string `json:"gke.projectId,omitempty"`

	// The name of your GKE cluster.
	GkeClusterName *string `json:"gke.clusterName,omitempty"`

	// The Cloud Service Provider (CSP) of your kOps cluster.
	KopsCsp *string `json:"kops.csp,omitempty"`

	// The region of your kOps cluster. Region is CSP specific.
	KopsRegion *string `json:"kops.region,omitempty"`

	// The name of your kOps cluster.
	KopsClusterName *string `json:"kops.clusterName,omitempty"`

	// The kOps cluster state store. Only remote S3 state is supported at the moment.
	KopsStateStore *string `json:"kops.stateStore,omitempty"`

	// Azure location of your AKS cluster.
	AksLocation *string `json:"aks.location,omitempty"`

	// Azure resource group where AKS nodes are deployed.
	AksNodeResourceGroup *string `json:"aks.nodeResourceGroup,omitempty"`

	// Azure account subscription id.
	AksSubscriptionId *string `json:"aks.subscriptionId,omitempty"`
}

// ListAuditEventsParams defines parameters for ListAuditEvents.
type ListAuditEventsParams struct {

	// A limit on the number of objects to be returned, between 1 and 500. Default is 10.
	Limit *Limit `json:"limit,omitempty"`

	// A cursor for use in pagination. This is a token that defines your place in the list. For instance, if you make a list request - you will receive nextCursor field in response metadata. Given that nextCursor field is not empty, it can be used as a cursor query parameter to get subsequent items. If nextCursor is empty - there are no more items to retrieve.
	Cursor *Cursor `json:"cursor,omitempty"`

	// Request filter parameter declaring point of time after which the results should be returned. Moment in time must be declared in RFC3339 format. https://tools.ietf.org/html/rfc3339
	FromDate *FilterFromDate `json:"fromDate,omitempty"`

	// Request filter parameter declaring point of time until which the results should be returned. Moment in time must be declared in RFC3339 format. https://tools.ietf.org/html/rfc3339
	ToDate *FilterToDate `json:"toDate,omitempty"`

	// Request filter parameter representing unique cluster ID. For instance, if you make a list request with clusterId filter parameter - returned results will represent the respective cluster. Cluster ID must be a valid UUID.
	ClusterId *FilterClusterId `json:"clusterId,omitempty"`

	// List of label names to filter by. You can supply more than one label in a form of `label=A&labelValue=a&label=B&labelValue=b`.
	Label *[]string `json:"label,omitempty"`

	// Values corresponding to each label supplied as `label` parameter.
	LabelValue *[]string `json:"labelValue,omitempty"`
}

// ListAuthTokensParams defines parameters for ListAuthTokens.
type ListAuthTokensParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// CreateAuthTokenJSONBody defines parameters for CreateAuthToken.
type CreateAuthTokenJSONBody AuthToken

// CreateAuthTokenParams defines parameters for CreateAuthToken.
type CreateAuthTokenParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// DeleteAuthTokenParams defines parameters for DeleteAuthToken.
type DeleteAuthTokenParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// GetAuthTokenParams defines parameters for GetAuthToken.
type GetAuthTokenParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// UpdateAuthTokenJSONBody defines parameters for UpdateAuthToken.
type UpdateAuthTokenJSONBody AuthTokenUpdateRequest

// UpdateAuthTokenParams defines parameters for UpdateAuthToken.
type UpdateAuthTokenParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// PlanClusterPriceJSONBody defines parameters for PlanClusterPrice.
type PlanClusterPriceJSONBody struct {
	Addons  *AddonsConfig `json:"addons,omitempty"`
	Clouds  *[]CloudType  `json:"clouds,omitempty"`
	Network *Network      `json:"network,omitempty"`

	// Initial nodes of this cluster. Both masters and workers
	Nodes *[]Node `json:"nodes,omitempty"`

	// CAST AI region used by cluster.
	Region *ClusterRegion `json:"region,omitempty"`
}

// CreateCloudCredentialsJSONBody defines parameters for CreateCloudCredentials.
type CreateCloudCredentialsJSONBody CloudCredentials

// DeleteGslbJSONBody defines parameters for DeleteGslb.
type DeleteGslbJSONBody GSLBDeleteRequest

// CreateOrUpdateGslbJSONBody defines parameters for CreateOrUpdateGslb.
type CreateOrUpdateGslbJSONBody GSLBRequest

// CreateInvitationJSONBody defines parameters for CreateInvitation.
type CreateInvitationJSONBody NewInvitations

// ClaimInvitationJSONBody defines parameters for ClaimInvitation.
type ClaimInvitationJSONBody map[string]interface{}

// ListKubernetesClustersParams defines parameters for ListKubernetesClusters.
type ListKubernetesClustersParams struct {

	// Optional parameter to query for clusters which are using the particular credentials.
	// Provide as repeated parameter in case of multiple arguments, e.g. `?credentialsId=123&credentialsId=456`.
	// Cluster will be included in the list if it's using any of the provided credentials.
	CredentialsId *[]string `json:"credentialsId,omitempty"`
}

// CreateNewClusterJSONBody defines parameters for CreateNewCluster.
type CreateNewClusterJSONBody CreateCluster

// PrometheusRawMetricsParams defines parameters for PrometheusRawMetrics.
type PrometheusRawMetricsParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// UpdateClusterJSONBody defines parameters for UpdateCluster.
type UpdateClusterJSONBody UpdateCluster

// ClusterActionsAPIIngestLogsJSONBody defines parameters for ClusterActionsAPIIngestLogs.
type ClusterActionsAPIIngestLogsJSONBody ClusteractionsV1LogEvent

// ClusterActionsAPIAckClusterActionJSONBody defines parameters for ClusterActionsAPIAckClusterAction.
type ClusterActionsAPIAckClusterActionJSONBody ClusteractionsV1ClusterActionAck

// InstallClusterAddonJSONBody defines parameters for InstallClusterAddon.
type InstallClusterAddonJSONBody InstallAddonRequest

// UpdateClusterAddonJSONBody defines parameters for UpdateClusterAddon.
type UpdateClusterAddonJSONBody UpdateAddonRequest

// GetCostHistoryParams defines parameters for GetCostHistory.
type GetCostHistoryParams struct {

	// Request filter parameter declaring point of time after which the results should be returned. Moment in time must be declared in RFC3339 format. https://tools.ietf.org/html/rfc3339
	FromDate *FilterFromDate `json:"fromDate,omitempty"`

	// Request filter parameter declaring point of time until which the results should be returned. Moment in time must be declared in RFC3339 format. https://tools.ietf.org/html/rfc3339
	ToDate *FilterToDate `json:"toDate,omitempty"`
}

// GetDashboardMetricsCpuUsageParams defines parameters for GetDashboardMetricsCpuUsage.
type GetDashboardMetricsCpuUsageParams struct {

	// Metrics period in hours, e.g., periodHours=24. This field is ignored if startTime and endTime fields are set.
	PeriodHours *string `json:"periodHours,omitempty"`

	// Metrics range start time in unix timestamp, e.g., startTime=1640091345020
	StartTime *string `json:"startTime,omitempty"`

	// Metrics range end time in unix timestamp, e.g., endTime=1640091345030
	EndTime *string `json:"endTime,omitempty"`

	// Metrics data points steps in seconds, e.g., stepSeconds=3600
	StepSeconds *string `json:"stepSeconds,omitempty"`
}

// GetDashboardMetricsMemoryUsageParams defines parameters for GetDashboardMetricsMemoryUsage.
type GetDashboardMetricsMemoryUsageParams struct {

	// Metrics period in hours, e.g., periodHours=24. This field is ignored if startTime and endTime fields are set.
	PeriodHours *string `json:"periodHours,omitempty"`

	// Metrics range start time in unix timestamp, e.g., startTime=1640091345020
	StartTime *string `json:"startTime,omitempty"`

	// Metrics range end time in unix timestamp, e.g., endTime=1640091345030
	EndTime *string `json:"endTime,omitempty"`

	// Metrics data points steps in seconds, e.g., stepSeconds=3600
	StepSeconds *string `json:"stepSeconds,omitempty"`
}

// ConfigureClusterAddonsJSONBody defines parameters for ConfigureClusterAddons.
type ConfigureClusterAddonsJSONBody AddonsConfig

// GetClusterMetricsParams defines parameters for GetClusterMetrics.
type GetClusterMetricsParams struct {

	// The type of metrics to query
	MetricType MetricType `json:"metricType"`
}

// GetClusterMetricsCpuUsageParams defines parameters for GetClusterMetricsCpuUsage.
type GetClusterMetricsCpuUsageParams struct {

	// Metrics period in hours, e.g., periodHours=24. This field is ignored if startTime and endTime fields are set.
	PeriodHours *string `json:"periodHours,omitempty"`

	// Metrics range start time in unix timestamp, e.g., startTime=1640091345020
	StartTime *string `json:"startTime,omitempty"`

	// Metrics range end time in unix timestamp, e.g., endTime=1640091345030
	EndTime *string `json:"endTime,omitempty"`

	// Metrics data points steps in seconds, e.g., stepSeconds=3600
	StepSeconds *string `json:"stepSeconds,omitempty"`
}

// GetClusterMetricsMemoryUsageParams defines parameters for GetClusterMetricsMemoryUsage.
type GetClusterMetricsMemoryUsageParams struct {

	// Metrics period in hours, e.g., periodHours=24. This field is ignored if startTime and endTime fields are set.
	PeriodHours *string `json:"periodHours,omitempty"`

	// Metrics range start time in unix timestamp, e.g., startTime=1640091345020
	StartTime *string `json:"startTime,omitempty"`

	// Metrics range end time in unix timestamp, e.g., endTime=1640091345030
	EndTime *string `json:"endTime,omitempty"`

	// Metrics data points steps in seconds, e.g., stepSeconds=3600
	StepSeconds *string `json:"stepSeconds,omitempty"`
}

// GetClusterNodesParams defines parameters for GetClusterNodes.
type GetClusterNodesParams struct {

	// A limit on the number of objects to be returned, between 1 and 500. Default is 10.
	PageLimit *int `json:"page.limit,omitempty"`

	// A cursor for use in pagination. This is a token that defines your place in the list. For instance, if you make a list request - you will receive nextCursor field in response metadata. Given that nextCursor field is not empty, it can be used as a cursor query parameter to get subsequent items. If nextCursor is empty - there are no more items to retrieve.
	PageCursor            *string               `json:"page.cursor,omitempty"`
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// AddClusterNodeJSONBody defines parameters for AddClusterNode.
type AddClusterNodeJSONBody NewNode

// SetupNodeSshJSONBody defines parameters for SetupNodeSsh.
type SetupNodeSshJSONBody struct {

	// Public authorized key ed25519 for node SSH connection.
	PublicKey string `json:"publicKey"`

	// Public source IP for firewall access.
	SourceIp string `json:"sourceIp"`
}

// UpdateNodeListJSONBody defines parameters for UpdateNodeList.
type UpdateNodeListJSONBody NodeUpdateOperation

// PauseClusterJSONBody defines parameters for PauseCluster.
type PauseClusterJSONBody PauseCluster

// SetClusterPauseScheduleJSONBody defines parameters for SetClusterPauseSchedule.
type SetClusterPauseScheduleJSONBody PauseSchedule

// PoliciesAPIUpsertClusterPoliciesJSONBody defines parameters for PoliciesAPIUpsertClusterPolicies.
type PoliciesAPIUpsertClusterPoliciesJSONBody PoliciesV1Policies

// ListRebalancingPlansParams defines parameters for ListRebalancingPlans.
type ListRebalancingPlansParams struct {

	// A limit on the number of objects to be returned, between 1 and 500. Default is 10.
	Limit *Limit `json:"limit,omitempty"`

	// A cursor for use in pagination. This is a token that defines your place in the list. For instance, if you make a list request - you will receive nextCursor field in response metadata. Given that nextCursor field is not empty, it can be used as a cursor query parameter to get subsequent items. If nextCursor is empty - there are no more items to retrieve.
	Cursor *Cursor `json:"cursor,omitempty"`
}

// RebalanceJSONBody defines parameters for Rebalance.
type RebalanceJSONBody RebalancingRequest

// ExecuteRebalancingPlanJSONBody defines parameters for ExecuteRebalancingPlan.
type ExecuteRebalancingPlanJSONBody ExecuteRebalancingPlanRequest

// ExternalClusterAPIRegisterClusterJSONBody defines parameters for ExternalClusterAPIRegisterCluster.
type ExternalClusterAPIRegisterClusterJSONBody ExternalclusterV1RegisterClusterRequest

// ExternalClusterAPIUpdateClusterJSONBody defines parameters for ExternalClusterAPIUpdateCluster.
type ExternalClusterAPIUpdateClusterJSONBody ExternalclusterV1ClusterUpdate

// ExternalClusterAPIGetCredentialsScriptParams defines parameters for ExternalClusterAPIGetCredentialsScript.
type ExternalClusterAPIGetCredentialsScriptParams struct {
	CrossRole *bool `json:"crossRole,omitempty"`
}

// ExternalClusterAPIDisconnectClusterJSONBody defines parameters for ExternalClusterAPIDisconnectCluster.
type ExternalClusterAPIDisconnectClusterJSONBody ExternalclusterV1DisconnectConfig

// ExternalClusterAPIHandleCloudEventJSONBody defines parameters for ExternalClusterAPIHandleCloudEvent.
type ExternalClusterAPIHandleCloudEventJSONBody ExternalclusterV1CloudEvent

// ExternalClusterAPIListNodesParams defines parameters for ExternalClusterAPIListNodes.
type ExternalClusterAPIListNodesParams struct {
	PageLimit *string `json:"page.limit,omitempty"`

	// Cursor defines token indicating where to start the page.
	// Empty value indicates to start from beginning of the dataset.
	PageCursor *string `json:"page.cursor,omitempty"`
}

// ExternalClusterAPIAddNodeJSONBody defines parameters for ExternalClusterAPIAddNode.
type ExternalClusterAPIAddNodeJSONBody ExternalclusterV1NodeConfig

// ExternalClusterAPIDeleteNodeParams defines parameters for ExternalClusterAPIDeleteNode.
type ExternalClusterAPIDeleteNodeParams struct {

	// Node drain timeout in seconds. Defaults to 600s if not set.
	DrainTimeout *string `json:"drainTimeout,omitempty"`

	// If set to true, node will be deleted even if node fails to be drained gracefully.
	ForceDelete *bool `json:"forceDelete,omitempty"`
}

// ExternalClusterAPIDrainNodeJSONBody defines parameters for ExternalClusterAPIDrainNode.
type ExternalClusterAPIDrainNodeJSONBody ExternalclusterV1DrainConfig

// UpdateCurrentUserProfileJSONBody defines parameters for UpdateCurrentUserProfile.
type UpdateCurrentUserProfileJSONBody UserProfile

// GetPromMetricsParams defines parameters for GetPromMetrics.
type GetPromMetricsParams struct {

	// Optional cluster names. Values should match castai_cluster label on metrics. It could also be found on GET cluster clusterNameId field.
	ClusterNames          *[]string             `json:"clusterNames,omitempty"`
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// CreateOrganizationJSONBody defines parameters for CreateOrganization.
type CreateOrganizationJSONBody Organization

// UpdateOrganizationJSONBody defines parameters for UpdateOrganization.
type UpdateOrganizationJSONBody Organization

// CreateOrganizationUserJSONBody defines parameters for CreateOrganizationUser.
type CreateOrganizationUserJSONBody NewOrganizationUser

// UpdateOrganizationUserJSONBody defines parameters for UpdateOrganizationUser.
type UpdateOrganizationUserJSONBody UpdateOrganizationUser

// GetUsageReportParams defines parameters for GetUsageReport.
type GetUsageReportParams struct {

	// Request filter parameter representing unique cluster ID. For instance, if you make a list request with clusterId filter parameter - returned results will represent the respective cluster. Cluster ID must be a valid UUID.
	ClusterId *FilterClusterId `json:"clusterId,omitempty"`

	// Request filter parameter declaring point of time after which the results should be returned. Moment in time must be declared in RFC3339 format. https://tools.ietf.org/html/rfc3339
	FromDate *FilterFromDate `json:"fromDate,omitempty"`

	// Request filter parameter declaring point of time until which the results should be returned. Moment in time must be declared in RFC3339 format. https://tools.ietf.org/html/rfc3339
	ToDate *FilterToDate `json:"toDate,omitempty"`
}

// ExternalClusterAPIGetCredentialsScriptTemplateParams defines parameters for ExternalClusterAPIGetCredentialsScriptTemplate.
type ExternalClusterAPIGetCredentialsScriptTemplateParams struct {
	CrossRole *bool `json:"crossRole,omitempty"`
}

// CreateAuthTokenJSONRequestBody defines body for CreateAuthToken for application/json ContentType.
type CreateAuthTokenJSONRequestBody CreateAuthTokenJSONBody

// UpdateAuthTokenJSONRequestBody defines body for UpdateAuthToken for application/json ContentType.
type UpdateAuthTokenJSONRequestBody UpdateAuthTokenJSONBody

// PlanClusterPriceJSONRequestBody defines body for PlanClusterPrice for application/json ContentType.
type PlanClusterPriceJSONRequestBody PlanClusterPriceJSONBody

// CreateCloudCredentialsJSONRequestBody defines body for CreateCloudCredentials for application/json ContentType.
type CreateCloudCredentialsJSONRequestBody CreateCloudCredentialsJSONBody

// DeleteGslbJSONRequestBody defines body for DeleteGslb for application/json ContentType.
type DeleteGslbJSONRequestBody DeleteGslbJSONBody

// CreateOrUpdateGslbJSONRequestBody defines body for CreateOrUpdateGslb for application/json ContentType.
type CreateOrUpdateGslbJSONRequestBody CreateOrUpdateGslbJSONBody

// CreateInvitationJSONRequestBody defines body for CreateInvitation for application/json ContentType.
type CreateInvitationJSONRequestBody CreateInvitationJSONBody

// ClaimInvitationJSONRequestBody defines body for ClaimInvitation for application/json ContentType.
type ClaimInvitationJSONRequestBody ClaimInvitationJSONBody

// CreateNewClusterJSONRequestBody defines body for CreateNewCluster for application/json ContentType.
type CreateNewClusterJSONRequestBody CreateNewClusterJSONBody

// UpdateClusterJSONRequestBody defines body for UpdateCluster for application/json ContentType.
type UpdateClusterJSONRequestBody UpdateClusterJSONBody

// ClusterActionsAPIIngestLogsJSONRequestBody defines body for ClusterActionsAPIIngestLogs for application/json ContentType.
type ClusterActionsAPIIngestLogsJSONRequestBody ClusterActionsAPIIngestLogsJSONBody

// ClusterActionsAPIAckClusterActionJSONRequestBody defines body for ClusterActionsAPIAckClusterAction for application/json ContentType.
type ClusterActionsAPIAckClusterActionJSONRequestBody ClusterActionsAPIAckClusterActionJSONBody

// InstallClusterAddonJSONRequestBody defines body for InstallClusterAddon for application/json ContentType.
type InstallClusterAddonJSONRequestBody InstallClusterAddonJSONBody

// UpdateClusterAddonJSONRequestBody defines body for UpdateClusterAddon for application/json ContentType.
type UpdateClusterAddonJSONRequestBody UpdateClusterAddonJSONBody

// ConfigureClusterAddonsJSONRequestBody defines body for ConfigureClusterAddons for application/json ContentType.
type ConfigureClusterAddonsJSONRequestBody ConfigureClusterAddonsJSONBody

// AddClusterNodeJSONRequestBody defines body for AddClusterNode for application/json ContentType.
type AddClusterNodeJSONRequestBody AddClusterNodeJSONBody

// SetupNodeSshJSONRequestBody defines body for SetupNodeSsh for application/json ContentType.
type SetupNodeSshJSONRequestBody SetupNodeSshJSONBody

// UpdateNodeListJSONRequestBody defines body for UpdateNodeList for application/json ContentType.
type UpdateNodeListJSONRequestBody UpdateNodeListJSONBody

// PauseClusterJSONRequestBody defines body for PauseCluster for application/json ContentType.
type PauseClusterJSONRequestBody PauseClusterJSONBody

// SetClusterPauseScheduleJSONRequestBody defines body for SetClusterPauseSchedule for application/json ContentType.
type SetClusterPauseScheduleJSONRequestBody SetClusterPauseScheduleJSONBody

// PoliciesAPIUpsertClusterPoliciesJSONRequestBody defines body for PoliciesAPIUpsertClusterPolicies for application/json ContentType.
type PoliciesAPIUpsertClusterPoliciesJSONRequestBody PoliciesAPIUpsertClusterPoliciesJSONBody

// RebalanceJSONRequestBody defines body for Rebalance for application/json ContentType.
type RebalanceJSONRequestBody RebalanceJSONBody

// ExecuteRebalancingPlanJSONRequestBody defines body for ExecuteRebalancingPlan for application/json ContentType.
type ExecuteRebalancingPlanJSONRequestBody ExecuteRebalancingPlanJSONBody

// ExternalClusterAPIRegisterClusterJSONRequestBody defines body for ExternalClusterAPIRegisterCluster for application/json ContentType.
type ExternalClusterAPIRegisterClusterJSONRequestBody ExternalClusterAPIRegisterClusterJSONBody

// ExternalClusterAPIUpdateClusterJSONRequestBody defines body for ExternalClusterAPIUpdateCluster for application/json ContentType.
type ExternalClusterAPIUpdateClusterJSONRequestBody ExternalClusterAPIUpdateClusterJSONBody

// ExternalClusterAPIDisconnectClusterJSONRequestBody defines body for ExternalClusterAPIDisconnectCluster for application/json ContentType.
type ExternalClusterAPIDisconnectClusterJSONRequestBody ExternalClusterAPIDisconnectClusterJSONBody

// ExternalClusterAPIHandleCloudEventJSONRequestBody defines body for ExternalClusterAPIHandleCloudEvent for application/json ContentType.
type ExternalClusterAPIHandleCloudEventJSONRequestBody ExternalClusterAPIHandleCloudEventJSONBody

// ExternalClusterAPIAddNodeJSONRequestBody defines body for ExternalClusterAPIAddNode for application/json ContentType.
type ExternalClusterAPIAddNodeJSONRequestBody ExternalClusterAPIAddNodeJSONBody

// ExternalClusterAPIDrainNodeJSONRequestBody defines body for ExternalClusterAPIDrainNode for application/json ContentType.
type ExternalClusterAPIDrainNodeJSONRequestBody ExternalClusterAPIDrainNodeJSONBody

// UpdateCurrentUserProfileJSONRequestBody defines body for UpdateCurrentUserProfile for application/json ContentType.
type UpdateCurrentUserProfileJSONRequestBody UpdateCurrentUserProfileJSONBody

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody CreateOrganizationJSONBody

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody UpdateOrganizationJSONBody

// CreateOrganizationUserJSONRequestBody defines body for CreateOrganizationUser for application/json ContentType.
type CreateOrganizationUserJSONRequestBody CreateOrganizationUserJSONBody

// UpdateOrganizationUserJSONRequestBody defines body for UpdateOrganizationUser for application/json ContentType.
type UpdateOrganizationUserJSONRequestBody UpdateOrganizationUserJSONBody

// Getter for additional properties for AuditEvent_Labels. Returns the specified
// element and whether it was found
func (a AuditEvent_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuditEvent_Labels
func (a *AuditEvent_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuditEvent_Labels to handle AdditionalProperties
func (a *AuditEvent_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuditEvent_Labels to handle AdditionalProperties
func (a AuditEvent_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ClusterMetrics_CloudMetrics_Labels. Returns the specified
// element and whether it was found
func (a ClusterMetrics_CloudMetrics_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ClusterMetrics_CloudMetrics_Labels
func (a *ClusterMetrics_CloudMetrics_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ClusterMetrics_CloudMetrics_Labels to handle AdditionalProperties
func (a *ClusterMetrics_CloudMetrics_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ClusterMetrics_CloudMetrics_Labels to handle AdditionalProperties
func (a ClusterMetrics_CloudMetrics_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ClusterMetrics_NodeMetrics_Labels. Returns the specified
// element and whether it was found
func (a ClusterMetrics_NodeMetrics_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ClusterMetrics_NodeMetrics_Labels
func (a *ClusterMetrics_NodeMetrics_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ClusterMetrics_NodeMetrics_Labels to handle AdditionalProperties
func (a *ClusterMetrics_NodeMetrics_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ClusterMetrics_NodeMetrics_Labels to handle AdditionalProperties
func (a ClusterMetrics_NodeMetrics_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CostsPerTypeEstimate. Returns the specified
// element and whether it was found
func (a CostsPerTypeEstimate) Get(fieldName string) (value EstimatedComponentTypePrice, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CostsPerTypeEstimate
func (a *CostsPerTypeEstimate) Set(fieldName string, value EstimatedComponentTypePrice) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]EstimatedComponentTypePrice)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CostsPerTypeEstimate to handle AdditionalProperties
func (a *CostsPerTypeEstimate) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]EstimatedComponentTypePrice)
		for fieldName, fieldBuf := range object {
			var fieldVal EstimatedComponentTypePrice
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CostsPerTypeEstimate to handle AdditionalProperties
func (a CostsPerTypeEstimate) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EstimatedSavingsCurrentConfiguration_ReplicatedWorkloads. Returns the specified
// element and whether it was found
func (a EstimatedSavingsCurrentConfiguration_ReplicatedWorkloads) Get(fieldName string) (value EstimatedSavingsReplicatedWorkload, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EstimatedSavingsCurrentConfiguration_ReplicatedWorkloads
func (a *EstimatedSavingsCurrentConfiguration_ReplicatedWorkloads) Set(fieldName string, value EstimatedSavingsReplicatedWorkload) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]EstimatedSavingsReplicatedWorkload)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EstimatedSavingsCurrentConfiguration_ReplicatedWorkloads to handle AdditionalProperties
func (a *EstimatedSavingsCurrentConfiguration_ReplicatedWorkloads) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]EstimatedSavingsReplicatedWorkload)
		for fieldName, fieldBuf := range object {
			var fieldVal EstimatedSavingsReplicatedWorkload
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EstimatedSavingsCurrentConfiguration_ReplicatedWorkloads to handle AdditionalProperties
func (a EstimatedSavingsCurrentConfiguration_ReplicatedWorkloads) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EstimatedSavingsRecommendation_Details_ReplicatedWorkloads. Returns the specified
// element and whether it was found
func (a EstimatedSavingsRecommendation_Details_ReplicatedWorkloads) Get(fieldName string) (value EstimatedSavingsReplicatedWorkload, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EstimatedSavingsRecommendation_Details_ReplicatedWorkloads
func (a *EstimatedSavingsRecommendation_Details_ReplicatedWorkloads) Set(fieldName string, value EstimatedSavingsReplicatedWorkload) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]EstimatedSavingsReplicatedWorkload)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EstimatedSavingsRecommendation_Details_ReplicatedWorkloads to handle AdditionalProperties
func (a *EstimatedSavingsRecommendation_Details_ReplicatedWorkloads) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]EstimatedSavingsReplicatedWorkload)
		for fieldName, fieldBuf := range object {
			var fieldVal EstimatedSavingsReplicatedWorkload
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EstimatedSavingsRecommendation_Details_ReplicatedWorkloads to handle AdditionalProperties
func (a EstimatedSavingsRecommendation_Details_ReplicatedWorkloads) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for InstallAddonRequest_ValuesOverrides. Returns the specified
// element and whether it was found
func (a InstallAddonRequest_ValuesOverrides) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for InstallAddonRequest_ValuesOverrides
func (a *InstallAddonRequest_ValuesOverrides) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for InstallAddonRequest_ValuesOverrides to handle AdditionalProperties
func (a *InstallAddonRequest_ValuesOverrides) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for InstallAddonRequest_ValuesOverrides to handle AdditionalProperties
func (a InstallAddonRequest_ValuesOverrides) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for KubernetesCluster_Heartbeats. Returns the specified
// element and whether it was found
func (a KubernetesCluster_Heartbeats) Get(fieldName string) (value Heartbeat, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KubernetesCluster_Heartbeats
func (a *KubernetesCluster_Heartbeats) Set(fieldName string, value Heartbeat) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Heartbeat)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KubernetesCluster_Heartbeats to handle AdditionalProperties
func (a *KubernetesCluster_Heartbeats) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Heartbeat)
		for fieldName, fieldBuf := range object {
			var fieldVal Heartbeat
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KubernetesCluster_Heartbeats to handle AdditionalProperties
func (a KubernetesCluster_Heartbeats) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for MetricSampleStream_Labels. Returns the specified
// element and whether it was found
func (a MetricSampleStream_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for MetricSampleStream_Labels
func (a *MetricSampleStream_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for MetricSampleStream_Labels to handle AdditionalProperties
func (a *MetricSampleStream_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for MetricSampleStream_Labels to handle AdditionalProperties
func (a MetricSampleStream_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Node_InstanceLabels. Returns the specified
// element and whether it was found
func (a Node_InstanceLabels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Node_InstanceLabels
func (a *Node_InstanceLabels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Node_InstanceLabels to handle AdditionalProperties
func (a *Node_InstanceLabels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Node_InstanceLabels to handle AdditionalProperties
func (a Node_InstanceLabels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Node_Labels. Returns the specified
// element and whether it was found
func (a Node_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Node_Labels
func (a *Node_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Node_Labels to handle AdditionalProperties
func (a *Node_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Node_Labels to handle AdditionalProperties
func (a Node_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RebalancedWorkloads_Selectors_MatchLabels. Returns the specified
// element and whether it was found
func (a RebalancedWorkloads_Selectors_MatchLabels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RebalancedWorkloads_Selectors_MatchLabels
func (a *RebalancedWorkloads_Selectors_MatchLabels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RebalancedWorkloads_Selectors_MatchLabels to handle AdditionalProperties
func (a *RebalancedWorkloads_Selectors_MatchLabels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RebalancedWorkloads_Selectors_MatchLabels to handle AdditionalProperties
func (a RebalancedWorkloads_Selectors_MatchLabels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdateAddonRequest_ValuesOverrides. Returns the specified
// element and whether it was found
func (a UpdateAddonRequest_ValuesOverrides) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdateAddonRequest_ValuesOverrides
func (a *UpdateAddonRequest_ValuesOverrides) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdateAddonRequest_ValuesOverrides to handle AdditionalProperties
func (a *UpdateAddonRequest_ValuesOverrides) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdateAddonRequest_ValuesOverrides to handle AdditionalProperties
func (a UpdateAddonRequest_ValuesOverrides) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CastaiClusterV1beta1Node_InstanceLabels. Returns the specified
// element and whether it was found
func (a CastaiClusterV1beta1Node_InstanceLabels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CastaiClusterV1beta1Node_InstanceLabels
func (a *CastaiClusterV1beta1Node_InstanceLabels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CastaiClusterV1beta1Node_InstanceLabels to handle AdditionalProperties
func (a *CastaiClusterV1beta1Node_InstanceLabels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CastaiClusterV1beta1Node_InstanceLabels to handle AdditionalProperties
func (a CastaiClusterV1beta1Node_InstanceLabels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CastaiClusterV1beta1Node_Labels. Returns the specified
// element and whether it was found
func (a CastaiClusterV1beta1Node_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CastaiClusterV1beta1Node_Labels
func (a *CastaiClusterV1beta1Node_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CastaiClusterV1beta1Node_Labels to handle AdditionalProperties
func (a *CastaiClusterV1beta1Node_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CastaiClusterV1beta1Node_Labels to handle AdditionalProperties
func (a CastaiClusterV1beta1Node_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ClusteractionsV1ClusterActionChartUpsert_ValuesOverrides. Returns the specified
// element and whether it was found
func (a ClusteractionsV1ClusterActionChartUpsert_ValuesOverrides) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ClusteractionsV1ClusterActionChartUpsert_ValuesOverrides
func (a *ClusteractionsV1ClusterActionChartUpsert_ValuesOverrides) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ClusteractionsV1ClusterActionChartUpsert_ValuesOverrides to handle AdditionalProperties
func (a *ClusteractionsV1ClusterActionChartUpsert_ValuesOverrides) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ClusteractionsV1ClusterActionChartUpsert_ValuesOverrides to handle AdditionalProperties
func (a ClusteractionsV1ClusterActionChartUpsert_ValuesOverrides) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ClusteractionsV1ClusterActionPatchNode_Labels. Returns the specified
// element and whether it was found
func (a ClusteractionsV1ClusterActionPatchNode_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ClusteractionsV1ClusterActionPatchNode_Labels
func (a *ClusteractionsV1ClusterActionPatchNode_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ClusteractionsV1ClusterActionPatchNode_Labels to handle AdditionalProperties
func (a *ClusteractionsV1ClusterActionPatchNode_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ClusteractionsV1ClusterActionPatchNode_Labels to handle AdditionalProperties
func (a ClusteractionsV1ClusterActionPatchNode_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ClusteractionsV1LogEvent_Fields. Returns the specified
// element and whether it was found
func (a ClusteractionsV1LogEvent_Fields) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ClusteractionsV1LogEvent_Fields
func (a *ClusteractionsV1LogEvent_Fields) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ClusteractionsV1LogEvent_Fields to handle AdditionalProperties
func (a *ClusteractionsV1LogEvent_Fields) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ClusteractionsV1LogEvent_Fields to handle AdditionalProperties
func (a ClusteractionsV1LogEvent_Fields) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExternalclusterV1EKSClusterParams_Tags. Returns the specified
// element and whether it was found
func (a ExternalclusterV1EKSClusterParams_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExternalclusterV1EKSClusterParams_Tags
func (a *ExternalclusterV1EKSClusterParams_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExternalclusterV1EKSClusterParams_Tags to handle AdditionalProperties
func (a *ExternalclusterV1EKSClusterParams_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExternalclusterV1EKSClusterParams_Tags to handle AdditionalProperties
func (a ExternalclusterV1EKSClusterParams_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExternalclusterV1KOPSClusterParams_Tags. Returns the specified
// element and whether it was found
func (a ExternalclusterV1KOPSClusterParams_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExternalclusterV1KOPSClusterParams_Tags
func (a *ExternalclusterV1KOPSClusterParams_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExternalclusterV1KOPSClusterParams_Tags to handle AdditionalProperties
func (a *ExternalclusterV1KOPSClusterParams_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExternalclusterV1KOPSClusterParams_Tags to handle AdditionalProperties
func (a ExternalclusterV1KOPSClusterParams_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExternalclusterV1NodeConfig_KubernetesLabels. Returns the specified
// element and whether it was found
func (a ExternalclusterV1NodeConfig_KubernetesLabels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExternalclusterV1NodeConfig_KubernetesLabels
func (a *ExternalclusterV1NodeConfig_KubernetesLabels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExternalclusterV1NodeConfig_KubernetesLabels to handle AdditionalProperties
func (a *ExternalclusterV1NodeConfig_KubernetesLabels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExternalclusterV1NodeConfig_KubernetesLabels to handle AdditionalProperties
func (a ExternalclusterV1NodeConfig_KubernetesLabels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExternalclusterV1UpdateEKSClusterParams_Tags. Returns the specified
// element and whether it was found
func (a ExternalclusterV1UpdateEKSClusterParams_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExternalclusterV1UpdateEKSClusterParams_Tags
func (a *ExternalclusterV1UpdateEKSClusterParams_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExternalclusterV1UpdateEKSClusterParams_Tags to handle AdditionalProperties
func (a *ExternalclusterV1UpdateEKSClusterParams_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExternalclusterV1UpdateEKSClusterParams_Tags to handle AdditionalProperties
func (a ExternalclusterV1UpdateEKSClusterParams_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExternalclusterV1UpdateKOPSClusterParams_Tags. Returns the specified
// element and whether it was found
func (a ExternalclusterV1UpdateKOPSClusterParams_Tags) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExternalclusterV1UpdateKOPSClusterParams_Tags
func (a *ExternalclusterV1UpdateKOPSClusterParams_Tags) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExternalclusterV1UpdateKOPSClusterParams_Tags to handle AdditionalProperties
func (a *ExternalclusterV1UpdateKOPSClusterParams_Tags) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExternalclusterV1UpdateKOPSClusterParams_Tags to handle AdditionalProperties
func (a ExternalclusterV1UpdateKOPSClusterParams_Tags) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
