// Package sdk provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package sdk

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/pkg/errors"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// AddExternalClusterNode defines model for AddExternalClusterNode.
type AddExternalClusterNode struct {

	// Instance type for the new VM.
	InstanceType string `json:"instanceType"`

	// Spot instance configuration.
	SpotConfig *NodeSpotConfig `json:"spotConfig,omitempty"`

	// Optional subnet on which to create VM. Subnet must already exist.
	SubnetId *string     `json:"subnetId,omitempty"`
	Volume   *NodeVolume `json:"volume,omitempty"`

	// Zone for the new VM. Must be a zone for one of the subnets in the cluster.
	Zone *string `json:"zone,omitempty"`
}

// AddNodeResult defines model for AddNodeResult.
type AddNodeResult struct {

	// id of the created note
	NodeId string `json:"nodeId"`

	// id for long running operation
	OperationId string `json:"operationId"`
}

// Addon defines model for Addon.
type Addon struct {

	// Array of categories this addon falls under.
	Categories *[]string `json:"categories,omitempty"`

	// Addon's attributes from helm chart (Chart.yaml)
	Chart *struct {

		// Date when this addon was created in CAST.AI addons registry.
		CreatedAt *time.Time `json:"createdAt,omitempty"`

		// Chart description.
		Description *string `json:"description,omitempty"`

		// Array of keywords in this chart.
		Features *[]string `json:"features,omitempty"`

		// Chart home url.
		Home *string `json:"home,omitempty"`

		// Url to chart's icon.
		Icon *string `json:"icon,omitempty"`

		// Chart name.
		Name    *string   `json:"name,omitempty"`
		Sources *[]string `json:"sources,omitempty"`

		// Array of archive urls for chart version.
		Urls *[]string `json:"urls,omitempty"`

		// Chart version.
		Version *string `json:"version,omitempty"`
	} `json:"chart,omitempty"`

	// Array of features this addon brings.
	Features *[]string `json:"features,omitempty"`

	// Unique add-on ID. Same add-on with different versions will also have different ID.
	Id string `json:"id"`

	// Long description.
	LongDescription *string `json:"longDescription,omitempty"`

	// Name.
	Name string `json:"name"`

	// The repository this add-on comes from (example: official-addons).
	Repository string `json:"repository"`

	// Short description.
	ShortDescription *string `json:"shortDescription,omitempty"`

	// Title.
	Title string `json:"title"`

	// Version.
	Version string `json:"version"`
}

// AddonList defines model for AddonList.
type AddonList struct {
	List []Addon `json:"list"`
}

// AddonsConfig defines model for AddonsConfig.
type AddonsConfig struct {

	// KEDA (keda.sh) an event-based k8s resources autoscaler
	Keda *KedaConfig `json:"keda,omitempty"`
}

// AuditEvent defines model for AuditEvent.
type AuditEvent struct {
	Event interface{} `json:"event"`

	// type of the performed operation
	EventType string `json:"eventType"`

	// audit event id
	Id          string         `json:"id"`
	InitiatedBy AuditInitiator `json:"initiatedBy"`

	// Event creation UTC time in RFC3339 format.
	Time time.Time `json:"time"`
}

// AuditEventClusterCreated defines model for AuditEventClusterCreated.
type AuditEventClusterCreated struct {

	// snapshot of created cluster
	Cluster *map[string]interface{} `json:"cluster,omitempty"`
}

// AuditEventClusterDeleted defines model for AuditEventClusterDeleted.
type AuditEventClusterDeleted struct {

	// snapshot of deleted cluster
	Cluster *map[string]interface{} `json:"cluster,omitempty"`
}

// AuditEventList defines model for AuditEventList.
type AuditEventList struct {
	Items []AuditEvent `json:"items"`

	// Cursor token to be used in future request cursor parameter to retrieve subsequent items from the dataset. Empty value of nextCursor field indicates that there are no further items to retrieve.
	NextCursor string `json:"nextCursor"`
}

// AuditInitiator defines model for AuditInitiator.
type AuditInitiator struct {

	// email of the user (absent for system calls)
	Email *string `json:"email,omitempty"`

	// user or system ID.
	Id string `json:"id"`

	// user or system name.
	Name string `json:"name"`
}

// AuditLogEvent defines model for AuditLogEvent.
type AuditLogEvent struct {

	// Event creation UTC time in RFC3339 format.
	CreatedAt time.Time `json:"createdAt"`

	// Audit Log Event ID, generated at the time of creation.
	Id string `json:"id"`

	// Metadata about the event
	Metadata map[string]interface{} `json:"metadata"`

	// Operation.
	Operation string `json:"operation"`
}

// AuthToken defines model for AuthToken.
type AuthToken struct {

	// Indicates whether this auth token is active.
	Active bool `json:"active"`

	// Auth token creation UTC time in RFC3339 format.
	CreatedAt time.Time `json:"createdAt"`

	// Default organization id of the token. Used when requests do not specify organization explicitly.
	DefaultOrganizationId *string `json:"defaultOrganizationId,omitempty"`

	// Auth token deletion UTC time in RFC3339 format.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Auth token ID, generated at the time of creation
	Id string `json:"id"`

	// Auth token last used UTC time in RFC3339 format.
	LastUsedAt *time.Time `json:"lastUsedAt,omitempty"`

	// Name of the token. Must be unique among other active tokens for the current user.
	Name string `json:"name"`
}

// AuthTokenCreateResponse defines model for AuthTokenCreateResponse.
type AuthTokenCreateResponse struct {

	// Indicates whether this auth token is active.
	Active bool `json:"active"`

	// Auth token creation UTC time in RFC3339 format.
	CreatedAt time.Time `json:"createdAt"`

	// Default organization id of the token. Used when requests do not specify organization explicitly.
	DefaultOrganizationId *string `json:"defaultOrganizationId,omitempty"`

	// Auth token ID, generated at the time of creation
	Id string `json:"id"`

	// Name of the token. Must be unique among other active tokens for the current user.
	Name string `json:"name"`

	// Generated secret for this auth token (only shown once on creation)
	Token string `json:"token"`
}

// AuthTokenList defines model for AuthTokenList.
type AuthTokenList struct {
	Items []AuthToken `json:"items"`
}

// AuthTokenUpdateRequest defines model for AuthTokenUpdateRequest.
type AuthTokenUpdateRequest struct {

	// Indicates whether this auth token is active.
	Active bool `json:"active"`

	// Default organization id of the token. Used when requests do not specify organization explicitly.
	DefaultOrganizationId *string `json:"defaultOrganizationId,omitempty"`
}

// CastRegion defines model for CastRegion.
type CastRegion struct {

	// List of available cloud providers in given CAST AI region.
	Clouds []Cloud `json:"clouds"`

	// display name of the region, e.g. `US West ( California )`.
	DisplayName string `json:"displayName"`

	// CAST AI region name, e.g. `us-west`.
	Name string `json:"name"`
}

// CastRegionList defines model for CastRegionList.
type CastRegionList struct {
	Items []CastRegion `json:"items"`
}

// Cloud defines model for Cloud.
type Cloud struct {

	// Cloud provider name.
	Name string `json:"name"`
}

// CloudCredentials defines model for CloudCredentials.
type CloudCredentials struct {

	// Cloud type that these credentials represent.
	Cloud string `json:"cloud"`

	// Actual credentials data of given cloud.
	Credentials string `json:"credentials"`

	// Credential expiration UTC time in RFC3339 format.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Whether credentials are under free trial.
	FreeTrial *bool `json:"freeTrial,omitempty"`

	// Id of cloud credentials item.
	Id string `json:"id"`

	// Name of cloud credentials object.
	Name   string                         `json:"name"`
	UsedBy *[]CloudCredentialsReservation `json:"usedBy,omitempty"`
}

// CloudCredentialsList defines model for CloudCredentialsList.
type CloudCredentialsList struct {
	Items []CloudCredentials `json:"items"`
}

// CloudCredentialsReservation defines model for CloudCredentialsReservation.
type CloudCredentialsReservation struct {

	// Id of the object which uses credentials.
	Id string `json:"id"`

	// Name of the object which uses credentials.
	Name string `json:"name"`
}

// CloudNetworkConfig defines model for CloudNetworkConfig.
type CloudNetworkConfig struct {

	// Optional AWS VPC IPv4 CIDR. If not specified default CIDR is used. (GCP - 10.0.0.0/16, AWS - 10.10.0.0/16, Azure - 10.20.0.0/16, DO - Any available)
	VpcCidr string `json:"vpcCidr"`
}

// CloudType defines model for CloudType.
type CloudType string

// List of CloudType
const (
	CloudType_aws   CloudType = "aws"
	CloudType_azure CloudType = "azure"
	CloudType_do    CloudType = "do"
	CloudType_gcp   CloudType = "gcp"
)

// ClusterAddon defines model for ClusterAddon.
type ClusterAddon struct {
	Addon Addon `json:"addon"`

	// URL to open addon exposed UI dashboard if supported.
	ClusterGatewayUrl string `json:"clusterGatewayUrl"`

	// Installed add-on status (unknown, deployed, uninstalled, superseded, failed, uninstalling, pending-install, pending-upgrade, pending-rollback)
	Status string `json:"status"`
}

// ClusterAddonsList defines model for ClusterAddonsList.
type ClusterAddonsList struct {
	List []ClusterAddon `json:"list"`
}

// ClusterCostEstimate defines model for ClusterCostEstimate.
type ClusterCostEstimate struct {
	PerCloud *CostsPerProviderEstimate `json:"perCloud,omitempty"`
	PerType  *CostsPerTypeEstimate     `json:"perType,omitempty"`

	// Estimated Price
	Total *EstimatedPriceAmount `json:"total,omitempty"`
}

// ClusterHealth defines model for ClusterHealth.
type ClusterHealth struct {
	Cilium     ClusterHealthCilium     `json:"cilium"`
	Kubernetes ClusterHealthKubernetes `json:"kubernetes"`
	Nodes      ClusterHealthNodes      `json:"nodes"`
}

// ClusterHealthCilium defines model for ClusterHealthCilium.
type ClusterHealthCilium struct {
	Msg   string `json:"msg"`
	State string `json:"state"`
}

// ClusterHealthKubernetes defines model for ClusterHealthKubernetes.
type ClusterHealthKubernetes struct {
	Msg   string `json:"msg"`
	State string `json:"state"`
}

// ClusterHealthNode defines model for ClusterHealthNode.
type ClusterHealthNode struct {
	HostIp string `json:"hostIp"`
	Name   string `json:"name"`
	State  string `json:"state"`
}

// ClusterHealthNodes defines model for ClusterHealthNodes.
type ClusterHealthNodes struct {
	Items []ClusterHealthNode `json:"items"`
	Msg   string              `json:"msg"`
}

// ClusterLimitsCpu defines model for ClusterLimitsCpu.
type ClusterLimitsCpu struct {

	// Defines the maximum allowed amount of vCPUs in the whole cluster.
	MaxCores int64 `json:"maxCores"`

	// Defines the minimum allowed amount of vCPUs in the whole cluster.
	MinCores int64 `json:"minCores"`
}

// ClusterLimitsPolicy defines model for ClusterLimitsPolicy.
type ClusterLimitsPolicy struct {

	// Defines the minimum and maximum amount of vCPUs for cluster's worker nodes.
	Cpu ClusterLimitsCpu `json:"cpu"`

	// Enable/disable cluster size limits policy.
	Enabled bool `json:"enabled"`
}

// ClusterMetrics defines model for ClusterMetrics.
type ClusterMetrics struct {

	// List of cluster cloud provider metrics.
	CloudMetrics *[]struct {

		// Cloud labels.
		Labels ClusterMetrics_CloudMetrics_Labels `json:"labels"`

		// Running pod count on this cloud.
		PodCount int `json:"podCount"`

		// Percentage value of requested CPU capacity.
		RequestedCPUPercentage int `json:"requestedCPUPercentage"`

		// Percentage value of requested Memory capacity.
		RequestedMemPercentage int `json:"requestedMemPercentage"`
	} `json:"cloudMetrics,omitempty"`

	// List of cluster nodes metrics.
	NodeMetrics *[]struct {

		// Node labels.
		Labels ClusterMetrics_NodeMetrics_Labels `json:"labels"`

		// Percentage value of requested CPU capacity.
		RequestedCPUPercentage int `json:"requestedCPUPercentage"`

		// Percentage value of requested Memory capacity.
		RequestedMemPercentage int `json:"requestedMemPercentage"`
	} `json:"nodeMetrics,omitempty"`
}

// ClusterMetrics_CloudMetrics_Labels defines model for ClusterMetrics.CloudMetrics.Labels.
type ClusterMetrics_CloudMetrics_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ClusterMetrics_NodeMetrics_Labels defines model for ClusterMetrics.NodeMetrics.Labels.
type ClusterMetrics_NodeMetrics_Labels struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ClusterProblematicWorkloads defines model for ClusterProblematicWorkloads.
type ClusterProblematicWorkloads struct {

	// Cluster id
	ClusterId string `json:"clusterId"`

	// Problematic workload controllers
	Controllers *[]ProblematicController `json:"controllers,omitempty"`

	// Identifies whether cluster contains any problems
	HasProblems bool `json:"hasProblems"`

	// Problematic standalone pods
	StandalonePods *[]ProblematicStandalonePod `json:"standalonePods,omitempty"`
}

// ClusterRegion defines model for ClusterRegion.
type ClusterRegion struct {

	// display name of the region, e.g. `US West ( California )`.
	DisplayName string `json:"displayName"`

	// CAST AI region name, e.g. `us-west`.
	Name string `json:"name"`
}

// CostsPerProviderEstimate defines model for CostsPerProviderEstimate.
type CostsPerProviderEstimate struct {

	// Break down by provider
	Details      *[]EstimatedComponentPrice `json:"details,omitempty"`
	TotalHourly  string                     `json:"totalHourly"`
	TotalMonthly *string                    `json:"totalMonthly,omitempty"`
}

// CostsPerTypeEstimate defines model for CostsPerTypeEstimate.
type CostsPerTypeEstimate struct {
	AdditionalProperties map[string]EstimatedComponentTypePrice `json:"-"`
}

// CreateCluster defines model for CreateCluster.
type CreateCluster struct {
	Addons *AddonsConfig `json:"addons,omitempty"`

	// Credentials ID list which determines the CSP configuration of this cluster.
	CloudCredentialsIDs []string `json:"cloudCredentialsIDs"`

	// Name of this infrastructure object. Needs to be unique per organization.
	Name    string   `json:"name"`
	Network *Network `json:"network,omitempty"`

	// Initial nodes of this cluster. Must contain final masters count.
	Nodes []Node `json:"nodes"`

	// CAST AI region to create the cluster in.
	Region string `json:"region"`
}

// CredentialsScript defines model for CredentialsScript.
type CredentialsScript struct {

	// script to execute in terminal or cloud shell to generate credentials
	Script *string `json:"script,omitempty"`
}

// DeleteNodeResult defines model for DeleteNodeResult.
type DeleteNodeResult struct {

	// specifies how long should drain be attempted (in seconds).
	DrainTimeout *int `json:"drainTimeout,omitempty"`

	// when set to false, node deletion will be aborted if drain timeout expires.
	Force *bool `json:"force,omitempty"`

	// id for long running operation
	OperationId string `json:"operationId"`
}

// DeletedNode defines model for DeletedNode.
type DeletedNode struct {

	// specifies how long should drain be attempted (in seconds).
	DrainTimeout *int `json:"drain_timeout,omitempty"`

	// when set to false, node deletion will be aborted if drain timeout expires.
	Force *bool `json:"force,omitempty"`

	// node ID autogenerated at the time of node creation
	Id string `json:"id"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {

	// in case the error is related to specific field, this list will contain
	FieldViolations []FieldViolation `json:"fieldViolations"`
	Message         string           `json:"message"`
}

// EstimatedComponentPrice defines model for EstimatedComponentPrice.
type EstimatedComponentPrice struct {

	// Price for all of the components instances. Contains dependencies breakdown
	Dependencies *EstimatedComponentPrice `json:"dependencies,omitempty"`

	// Estimated Price
	FullPrice EstimatedPriceAmount `json:"fullPrice"`

	// component's string id, e.g. "vpn", "master", "worker" and so on
	Id string `json:"id"`

	// human-readable component's name
	Name      string `json:"name"`
	UnitCount int    `json:"unitCount"`

	// Estimated Price
	UnitPrice EstimatedPriceAmount `json:"unitPrice"`
}

// EstimatedComponentTypePrice defines model for EstimatedComponentTypePrice.
type EstimatedComponentTypePrice struct {

	// Estimated Price
	Price     *EstimatedPriceAmount `json:"price,omitempty"`
	UnitCount *int                  `json:"unitCount,omitempty"`
}

// EstimatedPriceAmount defines model for EstimatedPriceAmount.
type EstimatedPriceAmount struct {

	// ISO-4217 currency code
	CurrencyCode *string `json:"currencyCode,omitempty"`

	// Price per hour (e.g. "0.1234")
	Hourly *string `json:"hourly,omitempty"`

	// Price in dollars per month (30 days, e.g. "1.234")
	Monthly *string `json:"monthly,omitempty"`
}

// ExternalCluster defines model for ExternalCluster.
type ExternalCluster struct {

	// Cloud credentials ID.
	CredentialsId *string                          `json:"credentialsId,omitempty"`
	Eks           *ExternalClusterEksConfiguration `json:"eks,omitempty"`
	Gke           *ExternalClusterGkeConfiguration `json:"gke,omitempty"`

	// Cluster ID, generated at the time of creation; can be provided as part of onboarding request
	Id   string                            `json:"id"`
	Kops *ExternalClusterKopsConfiguration `json:"kops,omitempty"`

	// Name of this infrastructure object. Needs to be unique per organization.
	Name string `json:"name"`

	// Organization ID to register cluster for.
	OrganizationId *string `json:"organizationId,omitempty"`

	// Provider type.
	ProviderType *string `json:"providerType,omitempty"`

	// Current status of the cluster
	Status *string `json:"status,omitempty"`

	// agent token to use when registering the cluster
	Token *string `json:"token,omitempty"`
}

// ExternalClusterAddNodeResult defines model for ExternalClusterAddNodeResult.
type ExternalClusterAddNodeResult struct {

	// Node UUID.
	NodeId string `json:"nodeId"`

	// Node add operation ID for checking actualy operation status.
	OperationId string `json:"operationId"`
}

// ExternalClusterDeleteNodeResult defines model for ExternalClusterDeleteNodeResult.
type ExternalClusterDeleteNodeResult struct {

	// Node deletion operation ID for checking actualy operation status.
	OperationId string `json:"operationId"`
}

// ExternalClusterEditParams defines model for ExternalClusterEditParams.
type ExternalClusterEditParams struct {

	// Actual cloud credentials.
	Credentials *string                                `json:"credentials,omitempty"`
	Eks         *UpdateExternalClusterEksConfiguration `json:"eks,omitempty"`
	Gke         *UpdateExternalClusterGkeConfiguration `json:"gke,omitempty"`
}

// ExternalClusterEksConfiguration defines model for ExternalClusterEksConfiguration.
type ExternalClusterEksConfiguration struct {

	// AWS account ID
	AccountId *string `json:"accountId,omitempty"`

	// EKS cluster name
	ClusterName *string `json:"clusterName,omitempty"`

	// Optional instance profile arn for CAST AI managed nodes.
	InstanceProfileArn *string `json:"instanceProfileArn,omitempty"`

	// EKS cluster region
	Region *string `json:"region,omitempty"`

	// Optional security groups for CAST AI managed nodes.
	SecurityGroups *[]string `json:"securityGroups,omitempty"`

	// Optional subnets for CAST AI managed nodes. If not set subnets from EKS cluster subnetIds list are used.
	Subnets *[]string `json:"subnets,omitempty"`
}

// ExternalClusterGkeConfiguration defines model for ExternalClusterGkeConfiguration.
type ExternalClusterGkeConfiguration struct {

	// GKE cluster name
	ClusterName *string `json:"clusterName,omitempty"`

	// GKE cluster location
	Location *string `json:"location,omitempty"`

	// GCP project which owns GKE cluster
	ProjectId *string `json:"projectId,omitempty"`

	// GKE cluster region
	Region *string `json:"region,omitempty"`
}

// ExternalClusterKopsConfiguration defines model for ExternalClusterKopsConfiguration.
type ExternalClusterKopsConfiguration struct {

	// KOPS cluster cloud provider
	Cloud *string `json:"cloud,omitempty"`

	// KOPS cluster name
	ClusterName *string `json:"clusterName,omitempty"`

	// KOPS cluster cloud provider region
	Region *string `json:"region,omitempty"`

	// KOPS cluster state storage bucket URL
	StateStore *string `json:"stateStore,omitempty"`
}

// ExternalClusterKubeconfig defines model for ExternalClusterKubeconfig.
type ExternalClusterKubeconfig struct {

	// Base64 encoded kubeconfig.
	Kubeconfig string `json:"kubeconfig"`
}

// ExternalClusterNode defines model for ExternalClusterNode.
type ExternalClusterNode struct {

	// cloud provider of this node.
	Cloud string `json:"cloud"`

	// node ID.
	Id string `json:"id"`

	// node instance type.
	InstanceType string `json:"instanceType"`

	// node name.
	Name string `json:"name"`

	// Spot instance configuration.
	SpotConfig NodeSpotConfig `json:"spotConfig"`

	// datacenter availability zone of the node.
	Zone string `json:"zone"`
}

// ExternalClusterNodes defines model for ExternalClusterNodes.
type ExternalClusterNodes struct {
	Items []ExternalClusterNode `json:"items"`
}

// ExternalClusterRegistrationToken defines model for ExternalClusterRegistrationToken.
type ExternalClusterRegistrationToken struct {

	// Token to use when deploying monitoring agent on remote clusters.
	Token string `json:"token"`
}

// ExternalClustersList defines model for ExternalClustersList.
type ExternalClustersList struct {
	Items []ExternalCluster `json:"items"`
}

// FieldViolation defines model for FieldViolation.
type FieldViolation struct {
	Description string `json:"description"`
	Field       string `json:"field"`
}

// GSLBDeleteRequest defines model for GSLBDeleteRequest.
type GSLBDeleteRequest struct {

	// ID of the cluster.
	ClusterId string `json:"clusterId"`

	// Name of the exposed LoadBalancer type service.
	ServiceName string `json:"serviceName"`

	// Namespace where the exposed LoadBalancer type service resides.
	ServiceNamespace string `json:"serviceNamespace"`
}

// GSLBRequest defines model for GSLBRequest.
type GSLBRequest struct {

	// ID of the cluster.
	ClusterId string `json:"clusterId"`

	// Array of all cloud load balancer hostnames and IP addresses which should be globally load balanced.
	Hosts []string `json:"hosts"`

	// Name of the exposed LoadBalancer type service.
	ServiceName string `json:"serviceName"`

	// Namespace where the exposed LoadBalancer type service resides.
	ServiceNamespace string `json:"serviceNamespace"`
}

// GSLBResponse defines model for GSLBResponse.
type GSLBResponse struct {

	// Hostname of the GSLB.
	Dns string `json:"dns"`
}

// Headroom defines model for Headroom.
type Headroom struct {

	// Defines percentage of additional CPU capacity to be added
	CpuPercentage int `json:"cpuPercentage"`

	// Defines whether Headroom is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// Defines percentage of additional memory capacity to be added
	MemoryPercentage int `json:"memoryPercentage"`
}

// Heartbeat defines model for Heartbeat.
type Heartbeat struct {

	// Timestamp of the last heartbeat from this system
	ReceivedAt *time.Time `json:"receivedAt,omitempty"`

	// originating system name
	System *string `json:"system,omitempty"`
}

// IngressLoadBalancer defines model for IngressLoadBalancer.
type IngressLoadBalancer struct {

	// Load balancer address.
	Address string `json:"address"`

	// Type/origin of load balancer.
	Type string `json:"type"`
}

// InstallAddonRequest defines model for InstallAddonRequest.
type InstallAddonRequest struct {
	Name            string                               `json:"name"`
	Repository      string                               `json:"repository"`
	ValuesOverrides *InstallAddonRequest_ValuesOverrides `json:"valuesOverrides,omitempty"`
	Version         string                               `json:"version"`
}

// InstallAddonRequest_ValuesOverrides defines model for InstallAddonRequest.ValuesOverrides.
type InstallAddonRequest_ValuesOverrides struct {
	AdditionalProperties map[string]string `json:"-"`
}

// IpSecConfig defines model for IpSecConfig.
type IpSecConfig map[string]interface{}

// KedaConfig defines model for KedaConfig.
type KedaConfig struct {

	// Whether this addon is enabled
	Enabled bool `json:"enabled"`
}

// KubernetesCluster defines model for KubernetesCluster.
type KubernetesCluster struct {
	Addons *AddonsConfig `json:"addons,omitempty"`

	// Credentials ID list which determines the CSP configuration of this cluster.
	CloudCredentialsIDs []string `json:"cloudCredentialsIDs"`

	// Cluster creation UTC time in RFC3339 format.
	CreatedAt  *time.Time                    `json:"createdAt,omitempty"`
	Heartbeats *KubernetesCluster_Heartbeats `json:"heartbeats,omitempty"`

	// Cluster ID, generated at the time of creation
	Id string `json:"id"`

	// Cluster kubernetes version.
	KubernetesVersion *string `json:"kubernetesVersion,omitempty"`

	// Name of this infrastructure object. Needs to be unique per organization.
	Name    string   `json:"name"`
	Network *Network `json:"network,omitempty"`

	// Cluster nodes.
	Nodes         []Node         `json:"nodes"`
	PauseSchedule *PauseSchedule `json:"pauseSchedule,omitempty"`

	// Optional notes added when pausing the cluster.
	PausedNotes   *string `json:"pausedNotes,omitempty"`
	ReconcileMode string  `json:"reconcileMode"`

	// Last cluster reconcile UTC time in RFC3339 format.
	ReconciledAt *time.Time `json:"reconciledAt,omitempty"`

	// CAST AI region used by cluster.
	Region ClusterRegion `json:"region"`

	// Current status of the cluster
	Status string `json:"status"`
}

// KubernetesCluster_Heartbeats defines model for KubernetesCluster.Heartbeats.
type KubernetesCluster_Heartbeats struct {
	AdditionalProperties map[string]Heartbeat `json:"-"`
}

// KubernetesClusterAuditLogEventsList defines model for KubernetesClusterAuditLogEventsList.
type KubernetesClusterAuditLogEventsList struct {
	Items []AuditLogEvent `json:"items"`
}

// KubernetesClusterFeedbackEvent defines model for KubernetesClusterFeedbackEvent.
type KubernetesClusterFeedbackEvent struct {

	// Event creation UTC time in RFC3339 format.
	CreatedAt time.Time `json:"createdAt"`

	// Cluster feedback event ID, generated at the time of creation.
	Id string `json:"id"`

	// Message of this event.
	Message string `json:"message"`

	// Severity level.
	Severity string `json:"severity"`
}

// KubernetesClusterFeedbackEventsList defines model for KubernetesClusterFeedbackEventsList.
type KubernetesClusterFeedbackEventsList struct {
	Items []KubernetesClusterFeedbackEvent `json:"items"`
}

// KubernetesClusterList defines model for KubernetesClusterList.
type KubernetesClusterList struct {
	Items []KubernetesCluster `json:"items"`
}

// KubernetesIngressController defines model for KubernetesIngressController.
type KubernetesIngressController struct {

	// Set of load balancers forwarding requests to the ingress.
	LoadBalancers []IngressLoadBalancer `json:"loadBalancers"`

	// Available ingress controller ports.
	Ports []int `json:"ports"`
}

// Network defines model for Network.
type Network struct {
	Aws   *CloudNetworkConfig `json:"aws,omitempty"`
	Azure *CloudNetworkConfig `json:"azure,omitempty"`
	Do    *CloudNetworkConfig `json:"do,omitempty"`
	Gcp   *CloudNetworkConfig `json:"gcp,omitempty"`

	// If set to true worker nodes will use private networking and NAT gateways for node egress traffic. Currently this is supported only on AWS.
	PrivateWorkerNodes bool       `json:"privateWorkerNodes"`
	Vpn                *VpnConfig `json:"vpn,omitempty"`
}

// NewInvitations defines model for NewInvitations.
type NewInvitations struct {
	Members        []NewMembershipByEmail `json:"members"`
	OrganizationId string                 `json:"organizationId"`
}

// NewInvitationsResponse defines model for NewInvitationsResponse.
type NewInvitationsResponse struct {
	InviteIds []string `json:"inviteIds"`
}

// NewMembershipByEmail defines model for NewMembershipByEmail.
type NewMembershipByEmail struct {
	Role      string `json:"role"`
	UserEmail string `json:"userEmail"`
}

// NewOrganizationUser defines model for NewOrganizationUser.
type NewOrganizationUser struct {

	// User role in organization
	Role string `json:"role"`

	// User ID to add to organization
	UserId string `json:"userId"`
}

// Node defines model for Node.
type Node struct {

	// Cloud service provider type.
	Cloud CloudType `json:"cloud"`

	// Node creation UTC time in RFC3339 format.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Node ID autogenerated at the time of node creation.
	Id *string `json:"id,omitempty"`

	// Precise VM instance type for specific cloud. If specified, `shape` field is ignored.
	InstanceType string `json:"instanceType"`

	// Node name generated at the time of node creation.
	Name *string `json:"name,omitempty"`

	// Kubernetes node network
	Network *NodeNetwork `json:"network,omitempty"`

	// Specifies the node type.
	//
	// `master` hosts the Kubernetes control plane.
	//
	// `worker` is used to run workloads and supports autoscaling.
	Role NodeType `json:"role"`

	// CAST AI shape defining VM template. Field is required unless `instanceType` is specified.
	Shape *NodeShape `json:"shape,omitempty"`

	// Spot instance configuration.
	SpotConfig *NodeSpotConfig `json:"spotConfig,omitempty"`

	// Kubernetes node state.
	State *NodeState `json:"state,omitempty"`
}

// NodeConstraints defines model for NodeConstraints.
type NodeConstraints struct {

	// Defines whether NodeConstraints are enabled.
	Enabled bool `json:"enabled"`

	// Defines max CPU cores for the node to pick.
	MaxCpuCores int32 `json:"maxCpuCores"`

	// Defines max RAM in MiB for the node to pick.
	MaxRamMib int32 `json:"maxRamMib"`

	// Defines min CPU cores for the node to pick.
	MinCpuCores int32 `json:"minCpuCores"`

	// Defines min RAM in MiB for the node to pick.
	MinRamMib int32 `json:"minRamMib"`
}

// NodeDownscaler defines model for NodeDownscaler.
type NodeDownscaler struct {
	EmptyNodes *NodeDownscalerEmptyNodes `json:"emptyNodes,omitempty"`
}

// NodeDownscalerEmptyNodes defines model for NodeDownscalerEmptyNodes.
type NodeDownscalerEmptyNodes struct {

	// Period (in seconds) to wait before removing the node. Might be useful to control the aggressiveness of the downscaler: increasing the value will make the cluster more responsive to dynamic workloads in the expense of higher cluster cost.
	DelaySeconds *int `json:"delaySeconds,omitempty"`

	// Defines whether Node Downscaler should opt in for removing empty worker nodes when possible.
	Enabled *bool `json:"enabled,omitempty"`
}

// NodeList defines model for NodeList.
type NodeList struct {
	Items []Node `json:"items"`
}

// NodeNetwork defines model for NodeNetwork.
type NodeNetwork struct {

	// node private IP
	PrivateIp string `json:"privateIp"`

	// node public IP
	PublicIp string `json:"publicIp"`
}

// NodeShape defines model for NodeShape.
type NodeShape string

// List of NodeShape
const (
	NodeShape__x_large NodeShape = "2x-large"
	NodeShape_large    NodeShape = "large"
	NodeShape_medium   NodeShape = "medium"
	NodeShape_small    NodeShape = "small"
	NodeShape_x_large  NodeShape = "x-large"
	NodeShape_x_small  NodeShape = "x-small"
)

// NodeSpotConfig defines model for NodeSpotConfig.
type NodeSpotConfig struct {

	// Indicates whether the node should be spot/preemtive, suitable for fault-tolerant workloads.
	//
	// `true` if instance should be Spot (AWS), Preemtible (GCP), etc.
	//
	// `false` if the node should be stable on-demand.
	IsSpot bool `json:"isSpot"`

	// Max bid price (only applicable to AWS).
	Price *string `json:"price,omitempty"`
}

// NodeState defines model for NodeState.
type NodeState struct {

	// Current status of a node.
	Phase *string `json:"phase,omitempty"`
}

// NodeType defines model for NodeType.
type NodeType string

// List of NodeType
const (
	NodeType_master NodeType = "master"
	NodeType_worker NodeType = "worker"
)

// NodeUpdateOperation defines model for NodeUpdateOperation.
type NodeUpdateOperation struct {
	Add    *[]Node        `json:"add,omitempty"`
	Delete *[]DeletedNode `json:"delete,omitempty"`
}

// NodeVolume defines model for NodeVolume.
type NodeVolume struct {

	// Volume size in GiB.
	Size float32 `json:"size"`
}

// OperationResponse defines model for OperationResponse.
type OperationResponse struct {

	// Operation creation time in RFC3339Nano format.
	CreatedAt time.Time `json:"createdAt"`

	// Indicates whether the operation is done. If 'true', the operation has finished. If 'false', the operation is still in progress.
	Done bool `json:"done"`

	// Error details for the operation. Only populated when the operation is done and has failed. If operation has completed successfully, the error will not be set.
	Error *struct {

		// Human readable caption text describing the error reason.
		Details string `json:"details"`

		// Reason is an operation specific failure code. Refer to documentation of the endpoint which generated the long-running operation about possible outcomes. Common error reasons:
		// * `internal_error`: An unknown error occurred. Retry the operation.
		Reason string `json:"reason"`
	} `json:"error,omitempty"`

	// Operation finishe time in RFC3339Nano format.
	FinishedAt *time.Time `json:"finishedAt,omitempty"`

	// ID of the operation.
	Id string `json:"id"`
}

// Organization defines model for Organization.
type Organization struct {

	// Organization ID
	Id string `json:"id"`

	// Organization name
	Name string `json:"name"`
}

// OrganizationUser defines model for OrganizationUser.
type OrganizationUser struct {

	// User role in organization
	Role string                 `json:"role"`
	User map[string]interface{} `json:"user"`
}

// OrganizationUsersList defines model for OrganizationUsersList.
type OrganizationUsersList struct {
	Users []OrganizationUser `json:"users"`
}

// OrganizationsList defines model for OrganizationsList.
type OrganizationsList struct {
	Organizations []Organization `json:"organizations"`
}

// PauseCluster defines model for PauseCluster.
type PauseCluster struct {

	// Optional notes when pausing a cluster (2000 characters at most)
	Notes *string `json:"notes,omitempty"`
}

// PauseSchedule defines model for PauseSchedule.
type PauseSchedule struct {
	Enabled bool `json:"enabled"`

	// optional name for the schedule
	Name     string              `json:"name"`
	Spans    []PauseScheduleSpan `json:"spans"`
	TimeZone string              `json:"timeZone"`
}

// PauseScheduleSpan defines model for PauseScheduleSpan.
type PauseScheduleSpan struct {

	// actual time in provided time zone when to resume the cluster
	ActiveFrom string `json:"activeFrom"`

	// actual time in provided time zone when to suspend the cluster
	ActiveTo     string `json:"activeTo"`
	DayOfTheWeek string `json:"dayOfTheWeek"`
}

// PoliciesConfig defines model for PoliciesConfig.
type PoliciesConfig struct {

	// Defines minimum and maximum amount of vCPUs for cluster's worker nodes.
	ClusterLimits ClusterLimitsPolicy `json:"clusterLimits"`

	// Enable/disable all policies
	Enabled bool `json:"enabled"`

	// Node Downscaler defines policies for removing nodes based on the configured conditions.
	NodeDownscaler *NodeDownscaler `json:"nodeDownscaler,omitempty"`

	// Policy defining whether autoscaler can use spot instances for provisioning additional workloads.
	SpotInstances SpotInstances `json:"spotInstances"`

	// Policy defining autoscaler's behavior when unscedulable pods were detected.
	UnschedulablePods UnschedulablePodsPolicy `json:"unschedulablePods"`
}

// ProblematicController defines model for ProblematicController.
type ProblematicController struct {

	// kind of the controller
	Kind string `json:"kind"`

	// name of the controller
	Name string `json:"name"`

	// controller problems
	Problems []string `json:"problems"`
}

// ProblematicStandalonePod defines model for ProblematicStandalonePod.
type ProblematicStandalonePod struct {

	// name of the controller
	Name string `json:"name"`

	// standalone pod problems
	Problems []string `json:"problems"`
}

// RebalanceAddNode defines model for RebalanceAddNode.
type RebalanceAddNode struct {

	// availability zone
	Az *string `json:"az,omitempty"`

	// count of nodes of such instanceType
	Count int `json:"count"`

	// cloud service provider
	Csp string `json:"csp"`

	// vm instance type
	InstanceType string `json:"instanceType"`

	// whether node should be spot instance
	Spot bool `json:"spot"`

	// subnet id
	SubnetId *string `json:"subnetId,omitempty"`
}

// RebalanceDeleteNode defines model for RebalanceDeleteNode.
type RebalanceDeleteNode struct {

	// id of the node targeted for deletion
	Id string `json:"id"`

	// instance type of the node
	InstanceType string `json:"instanceType"`

	// name of the node
	Name string `json:"name"`

	// whether node should be spot instance
	Spot bool `json:"spot"`
}

// RebalancePlanResponse defines model for RebalancePlanResponse.
type RebalancePlanResponse struct {

	// nodes suggested for adding
	AddNodes *[]RebalanceAddNode `json:"addNodes,omitempty"`

	// unique cluster id
	ClusterId *string `json:"clusterId,omitempty"`

	// pricing information
	ClusterPrice *struct {

		// approximate price with plan executed
		After *string `json:"after,omitempty"`

		// price before plan
		Before *string `json:"before,omitempty"`

		// difference in price
		Diff *string `json:"diff,omitempty"`
	} `json:"clusterPrice,omitempty"`

	// node generation date time
	CreatedAt *string `json:"createdAt,omitempty"`

	// nodes suggestions for deletion
	DeleteNodes *[]RebalanceDeleteNode `json:"deleteNodes,omitempty"`

	// unique plan indentifier
	Id *string `json:"id,omitempty"`
}

// ResourceUsage defines model for ResourceUsage.
type ResourceUsage struct {

	// cpu hours used for given date.
	Cpu int `json:"cpu"`

	// start of usage time in RFC3339 format.
	From string `json:"from"`

	// memory (MB) hours used for given date.
	Memory int `json:"memory"`

	// end of usage time in RFC3339 format.
	To string `json:"to"`
}

// ResourceUsageReport defines model for ResourceUsageReport.
type ResourceUsageReport struct {
	Dates []ResourceUsage `json:"dates"`

	// reported usage has occurred after this date. RFC3339 format.
	FromDate string `json:"fromDate"`

	// reported usage has occurred before this date. RFC3339 format.
	ToDate string `json:"toDate"`
}

// SpotInstances defines model for SpotInstances.
type SpotInstances struct {

	// Enable/disable spot instances policy.
	Clouds []string `json:"clouds"`

	// Enable/disable spot instances policy.
	Enabled bool `json:"enabled"`

	// Max allowed reclaim rate when choosing spot instance type. E.g. if the value is 10%, instance types having
	// 10% or higher reclaim rate will not be considered. Set to zero to use all instance types regardless of
	// reclaim rate.
	MaxReclaimRate *int `json:"maxReclaimRate,omitempty"`
}

// UnschedulablePodsPolicy defines model for UnschedulablePodsPolicy.
type UnschedulablePodsPolicy struct {

	// Defines default ratio of 1 CPU to Volume GiB when creating new nodes. If set to 25, the ration would be 1 CPU : 25 GiB, for example a node with 16 CPU would have a 400 GiB volume.
	DiskGibToCpuRatio *int `json:"diskGibToCpuRatio,omitempty"`

	// Enable/disable unschedulable pods detection policy.
	Enabled bool `json:"enabled"`

	// Additional headroom based on cluster's total available capacity.
	Headroom Headroom `json:"headroom"`

	// Defines the node constraints that will be applied when autoscaling with Unschedulable Pods policy.
	NodeConstraints *NodeConstraints `json:"nodeConstraints,omitempty"`
}

// UpdateAddonRequest defines model for UpdateAddonRequest.
type UpdateAddonRequest struct {
	ValuesOverrides *UpdateAddonRequest_ValuesOverrides `json:"valuesOverrides,omitempty"`
	Version         *string                             `json:"version,omitempty"`
}

// UpdateAddonRequest_ValuesOverrides defines model for UpdateAddonRequest.ValuesOverrides.
type UpdateAddonRequest_ValuesOverrides struct {
	AdditionalProperties map[string]string `json:"-"`
}

// UpdateCluster defines model for UpdateCluster.
type UpdateCluster struct {

	// Credentials ID list which determines the CSP configuration of this cluster.
	CloudCredentialsIDs []string `json:"cloudCredentialsIDs"`
	Network             *Network `json:"network,omitempty"`
}

// UpdateExternalClusterEksConfiguration defines model for UpdateExternalClusterEksConfiguration.
type UpdateExternalClusterEksConfiguration struct {

	// Optional instance profile arn for CAST AI managed nodes.
	InstanceProfileArn *string `json:"instanceProfileArn,omitempty"`

	// Optional security groups for CAST AI managed nodes.
	SecurityGroups *[]string `json:"securityGroups,omitempty"`

	// Optional subnets for CAST AI managed nodes. If not set subnets from EKS cluster subnetIds list are used.
	Subnets *[]string `json:"subnets,omitempty"`
}

// UpdateExternalClusterGkeConfiguration defines model for UpdateExternalClusterGkeConfiguration.
type UpdateExternalClusterGkeConfiguration struct {

	// GKE cluster location. Must be set during phase 2 registration if not provided during initial cluster registration. Ignored if already set.
	Location *string `json:"location,omitempty"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {

	// user email
	Email string `json:"email"`

	// full name of logged-in user, e.g. "John Doe".
	Name string `json:"name"`

	// internal username. globally unique
	Nickname string             `json:"nickname"`
	Survey   *UserProfileSurvey `json:"survey,omitempty"`
}

// UserProfileSurvey defines model for UserProfileSurvey.
type UserProfileSurvey struct {

	// current cloud spend in USD
	AnnualCloudBudget *int    `json:"annualCloudBudget,omitempty"`
	CompanyName       *string `json:"companyName,omitempty"`
	MonthlyCpuUsage   *int    `json:"monthlyCpuUsage,omitempty"`
	Submitted         *bool   `json:"submitted,omitempty"`
}

// ValidNodeConstraint defines model for ValidNodeConstraint.
type ValidNodeConstraint struct {

	// number of cpu cores
	CpuCores *int `json:"cpuCores,omitempty"`

	// amount of mebibytes
	RamMib *int `json:"ramMib,omitempty"`
}

// ValidNodeConstraints defines model for ValidNodeConstraints.
type ValidNodeConstraints struct {
	Items *[]ValidNodeConstraint `json:"items,omitempty"`
}

// VpnConfig defines model for VpnConfig.
type VpnConfig struct {
	IpSec     *IpSecConfig     `json:"ipSec,omitempty"`
	WireGuard *WireGuardConfig `json:"wireGuard,omitempty"`
}

// WireGuardConfig defines model for WireGuardConfig.
type WireGuardConfig struct {
	Topology string `json:"topology"`
}

// MetricType defines model for MetricType.
type MetricType []string

// AuthTokenId defines model for authTokenId.
type AuthTokenId string

// ClusterId defines model for clusterId.
type ClusterId string

// CredentialsId defines model for credentialsId.
type CredentialsId string

// Cursor defines model for cursor.
type Cursor string

// FilterClusterId defines model for filterClusterId.
type FilterClusterId string

// FilterFromDate defines model for filterFromDate.
type FilterFromDate string

// FilterToDate defines model for filterToDate.
type FilterToDate string

// HeaderOrganizationId defines model for headerOrganizationId.
type HeaderOrganizationId string

// Limit defines model for limit.
type Limit int

// ListAddonsParams defines parameters for ListAddons.
type ListAddonsParams struct {

	// Addon id.
	Ids *[]string `json:"ids,omitempty"`

	// Addon name.
	Names *[]string `json:"names,omitempty"`

	// Version (example: 1.1.0) or on of keywords: [latest].
	Versions *[]string `json:"versions,omitempty"`

	// Repository type (example: 'official-addons').
	Repositories *[]string `json:"repositories,omitempty"`
}

// GetAgentInstallScriptParams defines parameters for GetAgentInstallScript.
type GetAgentInstallScriptParams struct {

	// Kubernetes provider name.
	Provider *string `json:"provider,omitempty"`

	// AWS region of your EKS cluster.
	EksRegion *string `json:"eks.region,omitempty"`

	// Your AWS account id. Can be retrieved by executing `aws sts get-caller-identity`.
	EksAccountId *string `json:"eks.accountId,omitempty"`

	// The name of your EKS cluster.
	EksClusterName *string `json:"eks.clusterName,omitempty"`

	// GCP region of your GKE cluster.
	GkeRegion *string `json:"gke.region,omitempty"`

	// Location of your GKE cluster.
	GkeLocation *string `json:"gke.location,omitempty"`

	// GCP project id in which your GKE cluster is created.
	GkeProjectId *string `json:"gke.projectId,omitempty"`

	// The name of your GKE cluster.
	GkeClusterName *string `json:"gke.clusterName,omitempty"`

	// The Cloud Service Provider (CSP) of your kOps cluster.
	KopsCsp *string `json:"kops.csp,omitempty"`

	// The region of your kOps cluster. Region is CSP specific.
	KopsRegion *string `json:"kops.region,omitempty"`

	// The name of your kOps cluster.
	KopsClusterName *string `json:"kops.clusterName,omitempty"`

	// The kOps cluster state store. Only remote S3 state is supported at the moment.
	KopsStateStore *string `json:"kops.stateStore,omitempty"`
}

// ListAuditEventsParams defines parameters for ListAuditEvents.
type ListAuditEventsParams struct {

	// A limit on the number of objects to be returned, between 1 and 500. Default is 10.
	Limit *Limit `json:"limit,omitempty"`

	// A cursor for use in pagination. This is a token that defines your place in the list. For instance, if you make a list request - you will receive nextCursor field in response metadata. Given that nextCursor field is not empty, it can be used as a cursor query parameter to get subsequent items. If nextCursor is empty - there are no more items to retrieve.
	Cursor *Cursor `json:"cursor,omitempty"`

	// Request filter parameter declaring point of time after which the results should be returned. Moment in time must be declared in RFC3339 format. https://tools.ietf.org/html/rfc3339
	FromDate *FilterFromDate `json:"fromDate,omitempty"`

	// Request filter parameter declaring point of time until which the results should be returned. Moment in time must be declared in RFC3339 format. https://tools.ietf.org/html/rfc3339
	ToDate *FilterToDate `json:"toDate,omitempty"`

	// Request filter parameter representing unique cluster ID. For instance, if you make a list request with clusterId filter parameter - returned results will represent the respective cluster. Cluster ID must be a valid UUID.
	ClusterId *FilterClusterId `json:"clusterId,omitempty"`
}

// ListAuthTokensParams defines parameters for ListAuthTokens.
type ListAuthTokensParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// CreateAuthTokenJSONBody defines parameters for CreateAuthToken.
type CreateAuthTokenJSONBody AuthToken

// CreateAuthTokenParams defines parameters for CreateAuthToken.
type CreateAuthTokenParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// DeleteAuthTokenParams defines parameters for DeleteAuthToken.
type DeleteAuthTokenParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// GetAuthTokenParams defines parameters for GetAuthToken.
type GetAuthTokenParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// UpdateAuthTokenJSONBody defines parameters for UpdateAuthToken.
type UpdateAuthTokenJSONBody AuthTokenUpdateRequest

// UpdateAuthTokenParams defines parameters for UpdateAuthToken.
type UpdateAuthTokenParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// PlanClusterPriceJSONBody defines parameters for PlanClusterPrice.
type PlanClusterPriceJSONBody struct {
	Addons  *AddonsConfig `json:"addons,omitempty"`
	Clouds  *[]CloudType  `json:"clouds,omitempty"`
	Network *Network      `json:"network,omitempty"`

	// Initial nodes of this cluster. Both masters and workers
	Nodes *[]Node `json:"nodes,omitempty"`

	// CAST AI region used by cluster.
	Region *ClusterRegion `json:"region,omitempty"`
}

// CreateCloudCredentialsJSONBody defines parameters for CreateCloudCredentials.
type CreateCloudCredentialsJSONBody CloudCredentials

// DeleteGslbJSONBody defines parameters for DeleteGslb.
type DeleteGslbJSONBody GSLBDeleteRequest

// CreateOrUpdateGslbJSONBody defines parameters for CreateOrUpdateGslb.
type CreateOrUpdateGslbJSONBody GSLBRequest

// CreateInvitationJSONBody defines parameters for CreateInvitation.
type CreateInvitationJSONBody NewInvitations

// ClaimInvitationJSONBody defines parameters for ClaimInvitation.
type ClaimInvitationJSONBody map[string]interface{}

// ListKubernetesClustersParams defines parameters for ListKubernetesClusters.
type ListKubernetesClustersParams struct {

	// Optional parameter to query for clusters which are using the particular credentials.
	// Provide as repeated parameter in case of multiple arguments, e.g. `?credentialsId=123&credentialsId=456`.
	// Cluster will be included in the list if it's using any of the provided credentials.
	CredentialsId *[]string `json:"credentialsId,omitempty"`
}

// CreateNewClusterJSONBody defines parameters for CreateNewCluster.
type CreateNewClusterJSONBody CreateCluster

// UpdateClusterJSONBody defines parameters for UpdateCluster.
type UpdateClusterJSONBody UpdateCluster

// InstallClusterAddonJSONBody defines parameters for InstallClusterAddon.
type InstallClusterAddonJSONBody InstallAddonRequest

// UpdateClusterAddonJSONBody defines parameters for UpdateClusterAddon.
type UpdateClusterAddonJSONBody UpdateAddonRequest

// ConfigureClusterAddonsJSONBody defines parameters for ConfigureClusterAddons.
type ConfigureClusterAddonsJSONBody AddonsConfig

// GetClusterMetricsParams defines parameters for GetClusterMetrics.
type GetClusterMetricsParams struct {

	// The type of metrics to query
	MetricType MetricType `json:"metricType"`
}

// AddClusterNodeJSONBody defines parameters for AddClusterNode.
type AddClusterNodeJSONBody Node

// SetupNodeSshJSONBody defines parameters for SetupNodeSsh.
type SetupNodeSshJSONBody struct {

	// Public authorized key ed25519 for node SSH connection.
	PublicKey string `json:"publicKey"`

	// Public source IP for firewall access.
	SourceIp string `json:"sourceIp"`
}

// UpdateNodeListJSONBody defines parameters for UpdateNodeList.
type UpdateNodeListJSONBody NodeUpdateOperation

// PauseClusterJSONBody defines parameters for PauseCluster.
type PauseClusterJSONBody PauseCluster

// SetClusterPauseScheduleJSONBody defines parameters for SetClusterPauseSchedule.
type SetClusterPauseScheduleJSONBody PauseSchedule

// UpsertPoliciesJSONBody defines parameters for UpsertPolicies.
type UpsertPoliciesJSONBody PoliciesConfig

// ListExternalClustersParams defines parameters for ListExternalClusters.
type ListExternalClustersParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// RegisterExternalClusterJSONBody defines parameters for RegisterExternalCluster.
type RegisterExternalClusterJSONBody ExternalCluster

// RegisterExternalClusterParams defines parameters for RegisterExternalCluster.
type RegisterExternalClusterParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// DeleteExternalClusterParams defines parameters for DeleteExternalCluster.
type DeleteExternalClusterParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// GetExternalClusterParams defines parameters for GetExternalCluster.
type GetExternalClusterParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// UpdateExternalClusterJSONBody defines parameters for UpdateExternalCluster.
type UpdateExternalClusterJSONBody ExternalClusterEditParams

// UpdateExternalClusterParams defines parameters for UpdateExternalCluster.
type UpdateExternalClusterParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// GetCredentialsScriptParams defines parameters for GetCredentialsScript.
type GetCredentialsScriptParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// DisconnectExternalClusterJSONBody defines parameters for DisconnectExternalCluster.
type DisconnectExternalClusterJSONBody struct {

	// If true, all CAST provisioned nodes will be deleted.
	DeleteProvisionedNodes *bool `json:"deleteProvisionedNodes,omitempty"`
}

// DisconnectExternalClusterParams defines parameters for DisconnectExternalCluster.
type DisconnectExternalClusterParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// GetExternalClusterKubeconfigParams defines parameters for GetExternalClusterKubeconfig.
type GetExternalClusterKubeconfigParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// ListExternalClusterNodesParams defines parameters for ListExternalClusterNodes.
type ListExternalClusterNodesParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// AddExternalClusterNodeJSONBody defines parameters for AddExternalClusterNode.
type AddExternalClusterNodeJSONBody AddExternalClusterNode

// AddExternalClusterNodeParams defines parameters for AddExternalClusterNode.
type AddExternalClusterNodeParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// DeleteExternalClusterNodeParams defines parameters for DeleteExternalClusterNode.
type DeleteExternalClusterNodeParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// PauseExternalClusterParams defines parameters for PauseExternalCluster.
type PauseExternalClusterParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// PrometheusReadParams defines parameters for PrometheusRead.
type PrometheusReadParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// ResumeExternalClusterParams defines parameters for ResumeExternalCluster.
type ResumeExternalClusterParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// UpdateCurrentUserProfileJSONBody defines parameters for UpdateCurrentUserProfile.
type UpdateCurrentUserProfileJSONBody UserProfile

// GetExternalClustersTokenParams defines parameters for GetExternalClustersToken.
type GetExternalClustersTokenParams struct {
	XCastAiOrganizationId *HeaderOrganizationId `json:"X-CastAi-Organization-Id,omitempty"`
}

// CreateOrganizationJSONBody defines parameters for CreateOrganization.
type CreateOrganizationJSONBody Organization

// UpdateOrganizationJSONBody defines parameters for UpdateOrganization.
type UpdateOrganizationJSONBody Organization

// CreateOrganizationUserJSONBody defines parameters for CreateOrganizationUser.
type CreateOrganizationUserJSONBody NewOrganizationUser

// GetUsageReportParams defines parameters for GetUsageReport.
type GetUsageReportParams struct {

	// Request filter parameter representing unique cluster ID. For instance, if you make a list request with clusterId filter parameter - returned results will represent the respective cluster. Cluster ID must be a valid UUID.
	ClusterId *FilterClusterId `json:"clusterId,omitempty"`

	// Request filter parameter declaring point of time after which the results should be returned. Moment in time must be declared in RFC3339 format. https://tools.ietf.org/html/rfc3339
	FromDate *FilterFromDate `json:"fromDate,omitempty"`

	// Request filter parameter declaring point of time until which the results should be returned. Moment in time must be declared in RFC3339 format. https://tools.ietf.org/html/rfc3339
	ToDate *FilterToDate `json:"toDate,omitempty"`
}

// CreateAuthTokenJSONRequestBody defines body for CreateAuthToken for application/json ContentType.
type CreateAuthTokenJSONRequestBody CreateAuthTokenJSONBody

// UpdateAuthTokenJSONRequestBody defines body for UpdateAuthToken for application/json ContentType.
type UpdateAuthTokenJSONRequestBody UpdateAuthTokenJSONBody

// PlanClusterPriceJSONRequestBody defines body for PlanClusterPrice for application/json ContentType.
type PlanClusterPriceJSONRequestBody PlanClusterPriceJSONBody

// CreateCloudCredentialsJSONRequestBody defines body for CreateCloudCredentials for application/json ContentType.
type CreateCloudCredentialsJSONRequestBody CreateCloudCredentialsJSONBody

// DeleteGslbJSONRequestBody defines body for DeleteGslb for application/json ContentType.
type DeleteGslbJSONRequestBody DeleteGslbJSONBody

// CreateOrUpdateGslbJSONRequestBody defines body for CreateOrUpdateGslb for application/json ContentType.
type CreateOrUpdateGslbJSONRequestBody CreateOrUpdateGslbJSONBody

// CreateInvitationJSONRequestBody defines body for CreateInvitation for application/json ContentType.
type CreateInvitationJSONRequestBody CreateInvitationJSONBody

// ClaimInvitationJSONRequestBody defines body for ClaimInvitation for application/json ContentType.
type ClaimInvitationJSONRequestBody ClaimInvitationJSONBody

// CreateNewClusterJSONRequestBody defines body for CreateNewCluster for application/json ContentType.
type CreateNewClusterJSONRequestBody CreateNewClusterJSONBody

// UpdateClusterJSONRequestBody defines body for UpdateCluster for application/json ContentType.
type UpdateClusterJSONRequestBody UpdateClusterJSONBody

// InstallClusterAddonJSONRequestBody defines body for InstallClusterAddon for application/json ContentType.
type InstallClusterAddonJSONRequestBody InstallClusterAddonJSONBody

// UpdateClusterAddonJSONRequestBody defines body for UpdateClusterAddon for application/json ContentType.
type UpdateClusterAddonJSONRequestBody UpdateClusterAddonJSONBody

// ConfigureClusterAddonsJSONRequestBody defines body for ConfigureClusterAddons for application/json ContentType.
type ConfigureClusterAddonsJSONRequestBody ConfigureClusterAddonsJSONBody

// AddClusterNodeJSONRequestBody defines body for AddClusterNode for application/json ContentType.
type AddClusterNodeJSONRequestBody AddClusterNodeJSONBody

// SetupNodeSshJSONRequestBody defines body for SetupNodeSsh for application/json ContentType.
type SetupNodeSshJSONRequestBody SetupNodeSshJSONBody

// UpdateNodeListJSONRequestBody defines body for UpdateNodeList for application/json ContentType.
type UpdateNodeListJSONRequestBody UpdateNodeListJSONBody

// PauseClusterJSONRequestBody defines body for PauseCluster for application/json ContentType.
type PauseClusterJSONRequestBody PauseClusterJSONBody

// SetClusterPauseScheduleJSONRequestBody defines body for SetClusterPauseSchedule for application/json ContentType.
type SetClusterPauseScheduleJSONRequestBody SetClusterPauseScheduleJSONBody

// UpsertPoliciesJSONRequestBody defines body for UpsertPolicies for application/json ContentType.
type UpsertPoliciesJSONRequestBody UpsertPoliciesJSONBody

// RegisterExternalClusterJSONRequestBody defines body for RegisterExternalCluster for application/json ContentType.
type RegisterExternalClusterJSONRequestBody RegisterExternalClusterJSONBody

// UpdateExternalClusterJSONRequestBody defines body for UpdateExternalCluster for application/json ContentType.
type UpdateExternalClusterJSONRequestBody UpdateExternalClusterJSONBody

// DisconnectExternalClusterJSONRequestBody defines body for DisconnectExternalCluster for application/json ContentType.
type DisconnectExternalClusterJSONRequestBody DisconnectExternalClusterJSONBody

// AddExternalClusterNodeJSONRequestBody defines body for AddExternalClusterNode for application/json ContentType.
type AddExternalClusterNodeJSONRequestBody AddExternalClusterNodeJSONBody

// UpdateCurrentUserProfileJSONRequestBody defines body for UpdateCurrentUserProfile for application/json ContentType.
type UpdateCurrentUserProfileJSONRequestBody UpdateCurrentUserProfileJSONBody

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody CreateOrganizationJSONBody

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody UpdateOrganizationJSONBody

// CreateOrganizationUserJSONRequestBody defines body for CreateOrganizationUser for application/json ContentType.
type CreateOrganizationUserJSONRequestBody CreateOrganizationUserJSONBody

// Getter for additional properties for ClusterMetrics_CloudMetrics_Labels. Returns the specified
// element and whether it was found
func (a ClusterMetrics_CloudMetrics_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ClusterMetrics_CloudMetrics_Labels
func (a *ClusterMetrics_CloudMetrics_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ClusterMetrics_CloudMetrics_Labels to handle AdditionalProperties
func (a *ClusterMetrics_CloudMetrics_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ClusterMetrics_CloudMetrics_Labels to handle AdditionalProperties
func (a ClusterMetrics_CloudMetrics_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ClusterMetrics_NodeMetrics_Labels. Returns the specified
// element and whether it was found
func (a ClusterMetrics_NodeMetrics_Labels) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ClusterMetrics_NodeMetrics_Labels
func (a *ClusterMetrics_NodeMetrics_Labels) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ClusterMetrics_NodeMetrics_Labels to handle AdditionalProperties
func (a *ClusterMetrics_NodeMetrics_Labels) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ClusterMetrics_NodeMetrics_Labels to handle AdditionalProperties
func (a ClusterMetrics_NodeMetrics_Labels) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CostsPerTypeEstimate. Returns the specified
// element and whether it was found
func (a CostsPerTypeEstimate) Get(fieldName string) (value EstimatedComponentTypePrice, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CostsPerTypeEstimate
func (a *CostsPerTypeEstimate) Set(fieldName string, value EstimatedComponentTypePrice) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]EstimatedComponentTypePrice)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CostsPerTypeEstimate to handle AdditionalProperties
func (a *CostsPerTypeEstimate) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]EstimatedComponentTypePrice)
		for fieldName, fieldBuf := range object {
			var fieldVal EstimatedComponentTypePrice
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CostsPerTypeEstimate to handle AdditionalProperties
func (a CostsPerTypeEstimate) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for InstallAddonRequest_ValuesOverrides. Returns the specified
// element and whether it was found
func (a InstallAddonRequest_ValuesOverrides) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for InstallAddonRequest_ValuesOverrides
func (a *InstallAddonRequest_ValuesOverrides) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for InstallAddonRequest_ValuesOverrides to handle AdditionalProperties
func (a *InstallAddonRequest_ValuesOverrides) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for InstallAddonRequest_ValuesOverrides to handle AdditionalProperties
func (a InstallAddonRequest_ValuesOverrides) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for KubernetesCluster_Heartbeats. Returns the specified
// element and whether it was found
func (a KubernetesCluster_Heartbeats) Get(fieldName string) (value Heartbeat, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for KubernetesCluster_Heartbeats
func (a *KubernetesCluster_Heartbeats) Set(fieldName string, value Heartbeat) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Heartbeat)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for KubernetesCluster_Heartbeats to handle AdditionalProperties
func (a *KubernetesCluster_Heartbeats) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Heartbeat)
		for fieldName, fieldBuf := range object {
			var fieldVal Heartbeat
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for KubernetesCluster_Heartbeats to handle AdditionalProperties
func (a KubernetesCluster_Heartbeats) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UpdateAddonRequest_ValuesOverrides. Returns the specified
// element and whether it was found
func (a UpdateAddonRequest_ValuesOverrides) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UpdateAddonRequest_ValuesOverrides
func (a *UpdateAddonRequest_ValuesOverrides) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UpdateAddonRequest_ValuesOverrides to handle AdditionalProperties
func (a *UpdateAddonRequest_ValuesOverrides) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UpdateAddonRequest_ValuesOverrides to handle AdditionalProperties
func (a UpdateAddonRequest_ValuesOverrides) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
