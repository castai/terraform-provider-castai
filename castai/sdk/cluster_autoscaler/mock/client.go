// Code generated by MockGen. DO NOT EDIT.
// Source: cluster_autoscaler/client.gen.go

// Package mock_cluster_autoscaler is a generated GoMock package.
package mock_cluster_autoscaler

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	cluster_autoscaler "github.com/castai/terraform-provider-castai/castai/sdk/cluster_autoscaler"
	gomock "github.com/golang/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// HibernationSchedulesAPICreateHibernationSchedule mocks base method.
func (m *MockClientInterface) HibernationSchedulesAPICreateHibernationSchedule(ctx context.Context, organizationId string, body cluster_autoscaler.HibernationSchedulesAPICreateHibernationScheduleJSONRequestBody, reqEditors ...cluster_autoscaler.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HibernationSchedulesAPICreateHibernationSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPICreateHibernationSchedule indicates an expected call of HibernationSchedulesAPICreateHibernationSchedule.
func (mr *MockClientInterfaceMockRecorder) HibernationSchedulesAPICreateHibernationSchedule(ctx, organizationId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPICreateHibernationSchedule", reflect.TypeOf((*MockClientInterface)(nil).HibernationSchedulesAPICreateHibernationSchedule), varargs...)
}

// HibernationSchedulesAPICreateHibernationScheduleWithBody mocks base method.
func (m *MockClientInterface) HibernationSchedulesAPICreateHibernationScheduleWithBody(ctx context.Context, organizationId, contentType string, body io.Reader, reqEditors ...cluster_autoscaler.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HibernationSchedulesAPICreateHibernationScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPICreateHibernationScheduleWithBody indicates an expected call of HibernationSchedulesAPICreateHibernationScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) HibernationSchedulesAPICreateHibernationScheduleWithBody(ctx, organizationId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPICreateHibernationScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).HibernationSchedulesAPICreateHibernationScheduleWithBody), varargs...)
}

// HibernationSchedulesAPIDeleteHibernationSchedule mocks base method.
func (m *MockClientInterface) HibernationSchedulesAPIDeleteHibernationSchedule(ctx context.Context, organizationId, id string, reqEditors ...cluster_autoscaler.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIDeleteHibernationSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIDeleteHibernationSchedule indicates an expected call of HibernationSchedulesAPIDeleteHibernationSchedule.
func (mr *MockClientInterfaceMockRecorder) HibernationSchedulesAPIDeleteHibernationSchedule(ctx, organizationId, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIDeleteHibernationSchedule", reflect.TypeOf((*MockClientInterface)(nil).HibernationSchedulesAPIDeleteHibernationSchedule), varargs...)
}

// HibernationSchedulesAPIGetHibernationSchedule mocks base method.
func (m *MockClientInterface) HibernationSchedulesAPIGetHibernationSchedule(ctx context.Context, organizationId, id string, reqEditors ...cluster_autoscaler.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIGetHibernationSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIGetHibernationSchedule indicates an expected call of HibernationSchedulesAPIGetHibernationSchedule.
func (mr *MockClientInterfaceMockRecorder) HibernationSchedulesAPIGetHibernationSchedule(ctx, organizationId, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIGetHibernationSchedule", reflect.TypeOf((*MockClientInterface)(nil).HibernationSchedulesAPIGetHibernationSchedule), varargs...)
}

// HibernationSchedulesAPIListHibernationSchedules mocks base method.
func (m *MockClientInterface) HibernationSchedulesAPIListHibernationSchedules(ctx context.Context, organizationId string, params *cluster_autoscaler.HibernationSchedulesAPIListHibernationSchedulesParams, reqEditors ...cluster_autoscaler.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIListHibernationSchedules", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIListHibernationSchedules indicates an expected call of HibernationSchedulesAPIListHibernationSchedules.
func (mr *MockClientInterfaceMockRecorder) HibernationSchedulesAPIListHibernationSchedules(ctx, organizationId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIListHibernationSchedules", reflect.TypeOf((*MockClientInterface)(nil).HibernationSchedulesAPIListHibernationSchedules), varargs...)
}

// HibernationSchedulesAPIUpdateHibernationSchedule mocks base method.
func (m *MockClientInterface) HibernationSchedulesAPIUpdateHibernationSchedule(ctx context.Context, organizationId, id string, body cluster_autoscaler.HibernationSchedulesAPIUpdateHibernationScheduleJSONRequestBody, reqEditors ...cluster_autoscaler.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIUpdateHibernationSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIUpdateHibernationSchedule indicates an expected call of HibernationSchedulesAPIUpdateHibernationSchedule.
func (mr *MockClientInterfaceMockRecorder) HibernationSchedulesAPIUpdateHibernationSchedule(ctx, organizationId, id, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIUpdateHibernationSchedule", reflect.TypeOf((*MockClientInterface)(nil).HibernationSchedulesAPIUpdateHibernationSchedule), varargs...)
}

// HibernationSchedulesAPIUpdateHibernationScheduleWithBody mocks base method.
func (m *MockClientInterface) HibernationSchedulesAPIUpdateHibernationScheduleWithBody(ctx context.Context, organizationId, id, contentType string, body io.Reader, reqEditors ...cluster_autoscaler.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIUpdateHibernationScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIUpdateHibernationScheduleWithBody indicates an expected call of HibernationSchedulesAPIUpdateHibernationScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) HibernationSchedulesAPIUpdateHibernationScheduleWithBody(ctx, organizationId, id, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIUpdateHibernationScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).HibernationSchedulesAPIUpdateHibernationScheduleWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// HibernationSchedulesAPICreateHibernationSchedule mocks base method.
func (m *MockClientWithResponsesInterface) HibernationSchedulesAPICreateHibernationSchedule(ctx context.Context, organizationId string, body cluster_autoscaler.HibernationSchedulesAPICreateHibernationScheduleJSONRequestBody, reqEditors ...cluster_autoscaler.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HibernationSchedulesAPICreateHibernationSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPICreateHibernationSchedule indicates an expected call of HibernationSchedulesAPICreateHibernationSchedule.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HibernationSchedulesAPICreateHibernationSchedule(ctx, organizationId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPICreateHibernationSchedule", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HibernationSchedulesAPICreateHibernationSchedule), varargs...)
}

// HibernationSchedulesAPICreateHibernationScheduleWithBody mocks base method.
func (m *MockClientWithResponsesInterface) HibernationSchedulesAPICreateHibernationScheduleWithBody(ctx context.Context, organizationId, contentType string, body io.Reader, reqEditors ...cluster_autoscaler.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HibernationSchedulesAPICreateHibernationScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPICreateHibernationScheduleWithBody indicates an expected call of HibernationSchedulesAPICreateHibernationScheduleWithBody.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HibernationSchedulesAPICreateHibernationScheduleWithBody(ctx, organizationId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPICreateHibernationScheduleWithBody", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HibernationSchedulesAPICreateHibernationScheduleWithBody), varargs...)
}

// HibernationSchedulesAPICreateHibernationScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HibernationSchedulesAPICreateHibernationScheduleWithBodyWithResponse(ctx context.Context, organizationId, contentType string, body io.Reader) (*cluster_autoscaler.HibernationSchedulesAPICreateHibernationScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HibernationSchedulesAPICreateHibernationScheduleWithBodyWithResponse", ctx, organizationId, contentType, body)
	ret0, _ := ret[0].(*cluster_autoscaler.HibernationSchedulesAPICreateHibernationScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPICreateHibernationScheduleWithBodyWithResponse indicates an expected call of HibernationSchedulesAPICreateHibernationScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HibernationSchedulesAPICreateHibernationScheduleWithBodyWithResponse(ctx, organizationId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPICreateHibernationScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HibernationSchedulesAPICreateHibernationScheduleWithBodyWithResponse), ctx, organizationId, contentType, body)
}

// HibernationSchedulesAPICreateHibernationScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HibernationSchedulesAPICreateHibernationScheduleWithResponse(ctx context.Context, organizationId string, body cluster_autoscaler.HibernationSchedulesAPICreateHibernationScheduleJSONRequestBody) (*cluster_autoscaler.HibernationSchedulesAPICreateHibernationScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HibernationSchedulesAPICreateHibernationScheduleWithResponse", ctx, organizationId, body)
	ret0, _ := ret[0].(*cluster_autoscaler.HibernationSchedulesAPICreateHibernationScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPICreateHibernationScheduleWithResponse indicates an expected call of HibernationSchedulesAPICreateHibernationScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HibernationSchedulesAPICreateHibernationScheduleWithResponse(ctx, organizationId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPICreateHibernationScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HibernationSchedulesAPICreateHibernationScheduleWithResponse), ctx, organizationId, body)
}

// HibernationSchedulesAPIDeleteHibernationSchedule mocks base method.
func (m *MockClientWithResponsesInterface) HibernationSchedulesAPIDeleteHibernationSchedule(ctx context.Context, organizationId, id string, reqEditors ...cluster_autoscaler.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIDeleteHibernationSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIDeleteHibernationSchedule indicates an expected call of HibernationSchedulesAPIDeleteHibernationSchedule.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HibernationSchedulesAPIDeleteHibernationSchedule(ctx, organizationId, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIDeleteHibernationSchedule", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HibernationSchedulesAPIDeleteHibernationSchedule), varargs...)
}

// HibernationSchedulesAPIDeleteHibernationScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HibernationSchedulesAPIDeleteHibernationScheduleWithResponse(ctx context.Context, organizationId, id string) (*cluster_autoscaler.HibernationSchedulesAPIDeleteHibernationScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIDeleteHibernationScheduleWithResponse", ctx, organizationId, id)
	ret0, _ := ret[0].(*cluster_autoscaler.HibernationSchedulesAPIDeleteHibernationScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIDeleteHibernationScheduleWithResponse indicates an expected call of HibernationSchedulesAPIDeleteHibernationScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HibernationSchedulesAPIDeleteHibernationScheduleWithResponse(ctx, organizationId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIDeleteHibernationScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HibernationSchedulesAPIDeleteHibernationScheduleWithResponse), ctx, organizationId, id)
}

// HibernationSchedulesAPIGetHibernationSchedule mocks base method.
func (m *MockClientWithResponsesInterface) HibernationSchedulesAPIGetHibernationSchedule(ctx context.Context, organizationId, id string, reqEditors ...cluster_autoscaler.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIGetHibernationSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIGetHibernationSchedule indicates an expected call of HibernationSchedulesAPIGetHibernationSchedule.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HibernationSchedulesAPIGetHibernationSchedule(ctx, organizationId, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIGetHibernationSchedule", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HibernationSchedulesAPIGetHibernationSchedule), varargs...)
}

// HibernationSchedulesAPIGetHibernationScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HibernationSchedulesAPIGetHibernationScheduleWithResponse(ctx context.Context, organizationId, id string) (*cluster_autoscaler.HibernationSchedulesAPIGetHibernationScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIGetHibernationScheduleWithResponse", ctx, organizationId, id)
	ret0, _ := ret[0].(*cluster_autoscaler.HibernationSchedulesAPIGetHibernationScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIGetHibernationScheduleWithResponse indicates an expected call of HibernationSchedulesAPIGetHibernationScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HibernationSchedulesAPIGetHibernationScheduleWithResponse(ctx, organizationId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIGetHibernationScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HibernationSchedulesAPIGetHibernationScheduleWithResponse), ctx, organizationId, id)
}

// HibernationSchedulesAPIListHibernationSchedules mocks base method.
func (m *MockClientWithResponsesInterface) HibernationSchedulesAPIListHibernationSchedules(ctx context.Context, organizationId string, params *cluster_autoscaler.HibernationSchedulesAPIListHibernationSchedulesParams, reqEditors ...cluster_autoscaler.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIListHibernationSchedules", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIListHibernationSchedules indicates an expected call of HibernationSchedulesAPIListHibernationSchedules.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HibernationSchedulesAPIListHibernationSchedules(ctx, organizationId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIListHibernationSchedules", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HibernationSchedulesAPIListHibernationSchedules), varargs...)
}

// HibernationSchedulesAPIListHibernationSchedulesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HibernationSchedulesAPIListHibernationSchedulesWithResponse(ctx context.Context, organizationId string, params *cluster_autoscaler.HibernationSchedulesAPIListHibernationSchedulesParams) (*cluster_autoscaler.HibernationSchedulesAPIListHibernationSchedulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIListHibernationSchedulesWithResponse", ctx, organizationId, params)
	ret0, _ := ret[0].(*cluster_autoscaler.HibernationSchedulesAPIListHibernationSchedulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIListHibernationSchedulesWithResponse indicates an expected call of HibernationSchedulesAPIListHibernationSchedulesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HibernationSchedulesAPIListHibernationSchedulesWithResponse(ctx, organizationId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIListHibernationSchedulesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HibernationSchedulesAPIListHibernationSchedulesWithResponse), ctx, organizationId, params)
}

// HibernationSchedulesAPIUpdateHibernationSchedule mocks base method.
func (m *MockClientWithResponsesInterface) HibernationSchedulesAPIUpdateHibernationSchedule(ctx context.Context, organizationId, id string, body cluster_autoscaler.HibernationSchedulesAPIUpdateHibernationScheduleJSONRequestBody, reqEditors ...cluster_autoscaler.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIUpdateHibernationSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIUpdateHibernationSchedule indicates an expected call of HibernationSchedulesAPIUpdateHibernationSchedule.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HibernationSchedulesAPIUpdateHibernationSchedule(ctx, organizationId, id, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIUpdateHibernationSchedule", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HibernationSchedulesAPIUpdateHibernationSchedule), varargs...)
}

// HibernationSchedulesAPIUpdateHibernationScheduleWithBody mocks base method.
func (m *MockClientWithResponsesInterface) HibernationSchedulesAPIUpdateHibernationScheduleWithBody(ctx context.Context, organizationId, id, contentType string, body io.Reader, reqEditors ...cluster_autoscaler.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIUpdateHibernationScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIUpdateHibernationScheduleWithBody indicates an expected call of HibernationSchedulesAPIUpdateHibernationScheduleWithBody.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HibernationSchedulesAPIUpdateHibernationScheduleWithBody(ctx, organizationId, id, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIUpdateHibernationScheduleWithBody", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HibernationSchedulesAPIUpdateHibernationScheduleWithBody), varargs...)
}

// HibernationSchedulesAPIUpdateHibernationScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HibernationSchedulesAPIUpdateHibernationScheduleWithBodyWithResponse(ctx context.Context, organizationId, id, contentType string, body io.Reader) (*cluster_autoscaler.HibernationSchedulesAPIUpdateHibernationScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIUpdateHibernationScheduleWithBodyWithResponse", ctx, organizationId, id, contentType, body)
	ret0, _ := ret[0].(*cluster_autoscaler.HibernationSchedulesAPIUpdateHibernationScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIUpdateHibernationScheduleWithBodyWithResponse indicates an expected call of HibernationSchedulesAPIUpdateHibernationScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HibernationSchedulesAPIUpdateHibernationScheduleWithBodyWithResponse(ctx, organizationId, id, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIUpdateHibernationScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HibernationSchedulesAPIUpdateHibernationScheduleWithBodyWithResponse), ctx, organizationId, id, contentType, body)
}

// HibernationSchedulesAPIUpdateHibernationScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HibernationSchedulesAPIUpdateHibernationScheduleWithResponse(ctx context.Context, organizationId, id string, body cluster_autoscaler.HibernationSchedulesAPIUpdateHibernationScheduleJSONRequestBody) (*cluster_autoscaler.HibernationSchedulesAPIUpdateHibernationScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HibernationSchedulesAPIUpdateHibernationScheduleWithResponse", ctx, organizationId, id, body)
	ret0, _ := ret[0].(*cluster_autoscaler.HibernationSchedulesAPIUpdateHibernationScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HibernationSchedulesAPIUpdateHibernationScheduleWithResponse indicates an expected call of HibernationSchedulesAPIUpdateHibernationScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HibernationSchedulesAPIUpdateHibernationScheduleWithResponse(ctx, organizationId, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HibernationSchedulesAPIUpdateHibernationScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HibernationSchedulesAPIUpdateHibernationScheduleWithResponse), ctx, organizationId, id, body)
}

// MockResponse is a mock of Response interface.
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
}

// MockResponseMockRecorder is the mock recorder for MockResponse.
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance.
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return m.recorder
}

// GetBody mocks base method.
func (m *MockResponse) GetBody() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockResponseMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockResponse)(nil).GetBody))
}

// Status mocks base method.
func (m *MockResponse) Status() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(string)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockResponseMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockResponse)(nil).Status))
}

// StatusCode mocks base method.
func (m *MockResponse) StatusCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// StatusCode indicates an expected call of StatusCode.
func (mr *MockResponseMockRecorder) StatusCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCode", reflect.TypeOf((*MockResponse)(nil).StatusCode))
}
