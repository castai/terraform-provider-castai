// Package cluster_autoscaler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package cluster_autoscaler

import (
	"encoding/json"
	"fmt"
	"time"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for KubernetesNodeAffinityOperator.
const (
	DOESNOTEXIST        KubernetesNodeAffinityOperator = "DOES_NOT_EXIST"
	EXISTS              KubernetesNodeAffinityOperator = "EXISTS"
	GT                  KubernetesNodeAffinityOperator = "GT"
	IN                  KubernetesNodeAffinityOperator = "IN"
	LT                  KubernetesNodeAffinityOperator = "LT"
	NOTIN               KubernetesNodeAffinityOperator = "NOT_IN"
	OPERATORUNSPECIFIED KubernetesNodeAffinityOperator = "OPERATOR_UNSPECIFIED"
)

// ClusterAssignment Cluster assignment
type ClusterAssignment struct {
	// ClusterId ID of the cluster
	ClusterId string `json:"clusterId"`
}

// ClusterAssignments Cluster assignments
type ClusterAssignments struct {
	// Items Cluster assignments
	Items []ClusterAssignment `json:"items"`
}

// GPUConfig GPUConfig describes instance GPU configuration.
//
//	Required while provisioning GCP N1 instance types with GPU.
//	Eg.: n1-standard-2 with 8 x NVIDIA Tesla K80
type GPUConfig struct {
	// Count Number of GPUs.
	Count *int32 `json:"count,omitempty"`

	// Type GPU type.
	Type *string `json:"type,omitempty"`
}

// GoogleProtobufAny Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
type GoogleProtobufAny struct {
	// Type The type of the serialized message.
	Type                 *string                `json:"@type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HibernationSchedule Hibernation schedule
type HibernationSchedule struct {
	// ClusterAssignments Cluster assignments
	ClusterAssignments ClusterAssignments `json:"clusterAssignments"`

	// CreateTime The creation time of the hibernation schedule
	CreateTime *time.Time `json:"createTime,omitempty"`

	// Enabled Whether the schedule is enabled
	Enabled bool `json:"enabled"`

	// Id ID of the schedule
	Id *string `json:"id,omitempty"`

	// Name Name of the schedule
	Name string `json:"name"`

	// OrganizationId ID of the organization that the hibernation schedule is for
	OrganizationId *string `json:"organizationId,omitempty"`

	// PauseConfig Pause configuration
	PauseConfig PauseConfig `json:"pauseConfig"`

	// ResumeConfig Resume configuration
	ResumeConfig ResumeConfig `json:"resumeConfig"`

	// UpdateTime The update time of the hibernation schedule
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// HibernationScheduleUpdate Hibernation schedule update model
type HibernationScheduleUpdate struct {
	// ClusterAssignments Cluster assignments
	ClusterAssignments *ClusterAssignments `json:"clusterAssignments,omitempty"`

	// Enabled Whether the schedule is enabled
	Enabled *bool `json:"enabled,omitempty"`

	// Name Name of the schedule
	Name *string `json:"name,omitempty"`

	// PauseConfig Pause configuration
	PauseConfig *PauseConfig `json:"pauseConfig,omitempty"`

	// ResumeConfig Resume configuration
	ResumeConfig *ResumeConfig `json:"resumeConfig,omitempty"`
}

// KubernetesNodeAffinity Node affinity
type KubernetesNodeAffinity struct {
	// Key Key
	Key string `json:"key"`

	// Operator Operator
	Operator KubernetesNodeAffinityOperator `json:"operator"`

	// Values Values
	Values []string `json:"values"`
}

// KubernetesNodeAffinityOperator Operator
type KubernetesNodeAffinityOperator string

// ListHibernationSchedulesResponse Response message for listing hibernation schedules
type ListHibernationSchedulesResponse struct {
	// Items The list of hibernation schedules
	Items []HibernationSchedule `json:"items"`

	// NextPageCursor The pagination cursor to retrieve the next page of hibernation schedules.
	NextPageCursor *string `json:"nextPageCursor,omitempty"`

	// TotalCount The total number of items.
	TotalCount *int32 `json:"totalCount,omitempty"`
}

// NodeAffinity NodeAffinity provides control over the assignment of individual nodes to dedicated host instances.
type NodeAffinity struct {
	// Affinity THe affinity rules required for choosing the group.
	Affinity *[]KubernetesNodeAffinity `json:"affinity,omitempty"`

	// DedicatedGroup The name of the dedicated group.
	DedicatedGroup *string `json:"dedicatedGroup,omitempty"`
}

// NodeConfig NodeConfig specifies type of node to provision when resuming a cluster.
type NodeConfig struct {
	// ConfigId ID reference of Node configuration (template) to be used for node creation. Supersedes Configuration Name.
	ConfigId *string `json:"configId,omitempty"`

	// ConfigName Name reference of Node configuration (template)to be used for node creation.
	//  Superseded if Configuration ID reference is provided.
	//  Request will fail if several configurations with same name exists for a given cluster.
	ConfigName *string `json:"configName,omitempty"`

	// GpuConfig Node GPU configuration.
	GpuConfig *GPUConfig `json:"gpuConfig,omitempty"`

	// InstanceType Instance type of the node.
	InstanceType string `json:"instanceType"`

	// KubernetesLabels Node Kubernetes labels.
	KubernetesLabels *map[string]string `json:"kubernetesLabels,omitempty"`

	// KubernetesTaints Node Kubernetes taints.
	KubernetesTaints *[]Taint `json:"kubernetesTaints,omitempty"`

	// NodeAffinity Node affinity options.
	NodeAffinity *NodeAffinity `json:"nodeAffinity,omitempty"`

	// SpotConfig Node spot configuration.
	SpotConfig *NodeSpotConfig `json:"spotConfig,omitempty"`

	// SubnetId Node subnet ID.
	SubnetId *string `json:"subnetId,omitempty"`

	// Volume Node volume configuration.
	Volume *NodeVolume `json:"volume,omitempty"`

	// Zone Zone of the node.
	Zone *string `json:"zone,omitempty"`
}

// NodeSpotConfig NodeSpotConfig defines if node should be created as spot instance, and params for creation.
type NodeSpotConfig struct {
	// PriceHourly Spot instance price. Applicable only for AWS nodes.
	PriceHourly *string `json:"priceHourly,omitempty"`

	// Spot Whether node should be created as spot instance.
	Spot *bool `json:"spot,omitempty"`
}

// NodeVolume NodeVolume defines node's local root volume configuration.
type NodeVolume struct {
	// RaidConfig Storage Optmized disk configuration, if present RAID0 is selected
	RaidConfig *RaidConfig `json:"raidConfig,omitempty"`

	// SizeGib Volume size in GiB.
	SizeGib *int32 `json:"sizeGib,omitempty"`
}

// PauseConfig Pause configuration
type PauseConfig struct {
	// Enabled Whether the configuration is enabled
	Enabled bool `json:"enabled"`

	// Schedule Pause configuration schedule
	Schedule Schedule `json:"schedule"`
}

// RaidConfig RaidConfig allow You have two or more devices, of approximately the same size, and you want to combine their storage capacity
//
//	and also combine their performance by accessing them in parallel.
type RaidConfig struct {
	// ChunkSizeKb Specify the RAID0 chunk size in kilobytes, this parameter affects the read/write in the disk array and must be tailored
	//  for the type of data written by the workloads in the node. If not provided it will default to 64KB.
	ChunkSizeKb *int32 `json:"chunkSizeKb,omitempty"`
}

// ResumeConfig Resume configuration
type ResumeConfig struct {
	// Enabled Whether the configuration is enabled
	Enabled bool `json:"enabled"`

	// JobConfig Resume job configuration
	JobConfig ResumeJobConfig `json:"jobConfig"`

	// Schedule Pause configuration schedule
	Schedule Schedule `json:"schedule"`
}

// ResumeJobConfig Resume configuration
type ResumeJobConfig struct {
	// NodeConfig Node configuration, that will be used to create cluster resumption nodes.
	NodeConfig NodeConfig `json:"nodeConfig"`
}

// Schedule Hibernate configuration schedule
type Schedule struct {
	// CronExpression CRON expression
	CronExpression string `json:"cronExpression"`
}

// Status The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	// Code The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
	Code *int32 `json:"code,omitempty"`

	// Details A list of messages that carry the error details.  There is a common set of message types for APIs to use.
	Details *[]GoogleProtobufAny `json:"details,omitempty"`

	// Message A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
	Message *string `json:"message,omitempty"`
}

// Taint Taint defines node taint in kubernetes cluster.
type Taint struct {
	// Effect Effect
	Effect string `json:"effect"`

	// Key Key
	Key string `json:"key"`

	// Value Value
	Value string `json:"value"`
}

// HibernationSchedulesAPIListHibernationSchedulesParams defines parameters for HibernationSchedulesAPIListHibernationSchedules.
type HibernationSchedulesAPIListHibernationSchedulesParams struct {
	// PageLimit Defines the number of items that should be returned
	PageLimit *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	//  Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`
}

// HibernationSchedulesAPICreateHibernationScheduleJSONRequestBody defines body for HibernationSchedulesAPICreateHibernationSchedule for application/json ContentType.
type HibernationSchedulesAPICreateHibernationScheduleJSONRequestBody = HibernationSchedule

// HibernationSchedulesAPIUpdateHibernationScheduleJSONRequestBody defines body for HibernationSchedulesAPIUpdateHibernationSchedule for application/json ContentType.
type HibernationSchedulesAPIUpdateHibernationScheduleJSONRequestBody = HibernationScheduleUpdate

// Getter for additional properties for GoogleProtobufAny. Returns the specified
// element and whether it was found
func (a GoogleProtobufAny) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GoogleProtobufAny
func (a *GoogleProtobufAny) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GoogleProtobufAny to handle AdditionalProperties
func (a *GoogleProtobufAny) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["@type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading '@type': %w", err)
		}
		delete(object, "@type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GoogleProtobufAny to handle AdditionalProperties
func (a GoogleProtobufAny) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Type != nil {
		object["@type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '@type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
