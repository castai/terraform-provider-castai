// Package organization_management provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package organization_management

import (
	"encoding/json"
	"fmt"
	"time"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for BatchCreateEnterpriseGroupsRequestMemberKind.
const (
	BatchCreateEnterpriseGroupsRequestMemberKindSUBJECTKINDSERVICEACCOUNT BatchCreateEnterpriseGroupsRequestMemberKind = "SUBJECT_KIND_SERVICE_ACCOUNT"
	BatchCreateEnterpriseGroupsRequestMemberKindSUBJECTKINDUNSPECIFIED    BatchCreateEnterpriseGroupsRequestMemberKind = "SUBJECT_KIND_UNSPECIFIED"
	BatchCreateEnterpriseGroupsRequestMemberKindSUBJECTKINDUSER           BatchCreateEnterpriseGroupsRequestMemberKind = "SUBJECT_KIND_USER"
)

// Defines values for BatchUpdateEnterpriseGroupsRequestMemberKind.
const (
	BatchUpdateEnterpriseGroupsRequestMemberKindSERVICEACCOUNT         BatchUpdateEnterpriseGroupsRequestMemberKind = "SERVICE_ACCOUNT"
	BatchUpdateEnterpriseGroupsRequestMemberKindSUBJECTKINDUNSPECIFIED BatchUpdateEnterpriseGroupsRequestMemberKind = "SUBJECT_KIND_UNSPECIFIED"
	BatchUpdateEnterpriseGroupsRequestMemberKindUSER                   BatchUpdateEnterpriseGroupsRequestMemberKind = "USER"
)

// Defines values for DefinitionAuthorKind.
const (
	DefinitionAuthorKindSUBJECTKINDSERVICEACCOUNT DefinitionAuthorKind = "SUBJECT_KIND_SERVICE_ACCOUNT"
	DefinitionAuthorKindSUBJECTKINDUNSPECIFIED    DefinitionAuthorKind = "SUBJECT_KIND_UNSPECIFIED"
	DefinitionAuthorKindSUBJECTKINDUSER           DefinitionAuthorKind = "SUBJECT_KIND_USER"
)

// Defines values for DefinitionMemberKind.
const (
	DefinitionMemberKindSUBJECTKINDSERVICEACCOUNT DefinitionMemberKind = "SUBJECT_KIND_SERVICE_ACCOUNT"
	DefinitionMemberKindSUBJECTKINDUNSPECIFIED    DefinitionMemberKind = "SUBJECT_KIND_UNSPECIFIED"
	DefinitionMemberKindSUBJECTKINDUSER           DefinitionMemberKind = "SUBJECT_KIND_USER"
)

// Defines values for GroupDefinitionAuthorKind.
const (
	GroupDefinitionAuthorKindKINDSERVICEACCOUNT GroupDefinitionAuthorKind = "KIND_SERVICE_ACCOUNT"
	GroupDefinitionAuthorKindKINDUNSPECIFIED    GroupDefinitionAuthorKind = "KIND_UNSPECIFIED"
	GroupDefinitionAuthorKindKINDUSER           GroupDefinitionAuthorKind = "KIND_USER"
)

// Defines values for GroupDefinitionMemberKind.
const (
	GroupDefinitionMemberKindKINDSERVICEACCOUNT GroupDefinitionMemberKind = "KIND_SERVICE_ACCOUNT"
	GroupDefinitionMemberKindKINDUNSPECIFIED    GroupDefinitionMemberKind = "KIND_UNSPECIFIED"
	GroupDefinitionMemberKindKINDUSER           GroupDefinitionMemberKind = "KIND_USER"
)

// Defines values for ListChildrenOrganizationsResponseChildOrganizationType.
const (
	ORGANIZATIONTYPECHILD       ListChildrenOrganizationsResponseChildOrganizationType = "ORGANIZATION_TYPE_CHILD"
	ORGANIZATIONTYPEDEFAULT     ListChildrenOrganizationsResponseChildOrganizationType = "ORGANIZATION_TYPE_DEFAULT"
	ORGANIZATIONTYPEENTERPRISE  ListChildrenOrganizationsResponseChildOrganizationType = "ORGANIZATION_TYPE_ENTERPRISE"
	ORGANIZATIONTYPEUNSPECIFIED ListChildrenOrganizationsResponseChildOrganizationType = "ORGANIZATION_TYPE_UNSPECIFIED"
)

// Defines values for RoleBindingRoleBindingStatusState.
const (
	POLICIESSTATEACCEPTED    RoleBindingRoleBindingStatusState = "POLICIES_STATE_ACCEPTED"
	POLICIESSTATECREATED     RoleBindingRoleBindingStatusState = "POLICIES_STATE_CREATED"
	POLICIESSTATEFAILED      RoleBindingRoleBindingStatusState = "POLICIES_STATE_FAILED"
	POLICIESSTATEUNSPECIFIED RoleBindingRoleBindingStatusState = "POLICIES_STATE_UNSPECIFIED"
)

// Defines values for RoleBindingScopeScope.
const (
	CLUSTER      RoleBindingScopeScope = "CLUSTER"
	ORGANIZATION RoleBindingScopeScope = "ORGANIZATION"
)

// Defines values for EnterpriseAPIListGroupsParamsSortOrder.
const (
	EnterpriseAPIListGroupsParamsSortOrderASC  EnterpriseAPIListGroupsParamsSortOrder = "ASC"
	EnterpriseAPIListGroupsParamsSortOrderAsc  EnterpriseAPIListGroupsParamsSortOrder = "asc"
	EnterpriseAPIListGroupsParamsSortOrderDESC EnterpriseAPIListGroupsParamsSortOrder = "DESC"
	EnterpriseAPIListGroupsParamsSortOrderDesc EnterpriseAPIListGroupsParamsSortOrder = "desc"
)

// Defines values for EnterpriseAPIListMembersParamsSortOrder.
const (
	EnterpriseAPIListMembersParamsSortOrderASC  EnterpriseAPIListMembersParamsSortOrder = "ASC"
	EnterpriseAPIListMembersParamsSortOrderAsc  EnterpriseAPIListMembersParamsSortOrder = "asc"
	EnterpriseAPIListMembersParamsSortOrderDESC EnterpriseAPIListMembersParamsSortOrder = "DESC"
	EnterpriseAPIListMembersParamsSortOrderDesc EnterpriseAPIListMembersParamsSortOrder = "desc"
)

// Defines values for EnterpriseAPIListMembersParamsStatus.
const (
	MEMBERSTATUSACTIVE        EnterpriseAPIListMembersParamsStatus = "MEMBER_STATUS_ACTIVE"
	MEMBERSTATUSALL           EnterpriseAPIListMembersParamsStatus = "MEMBER_STATUS_ALL"
	MEMBERSTATUSINVITEPENDING EnterpriseAPIListMembersParamsStatus = "MEMBER_STATUS_INVITE_PENDING"
	MEMBERSTATUSUNSPECIFIED   EnterpriseAPIListMembersParamsStatus = "MEMBER_STATUS_UNSPECIFIED"
)

// Defines values for EnterpriseAPIListChildrenOrganizationsParamsSortOrder.
const (
	ASC  EnterpriseAPIListChildrenOrganizationsParamsSortOrder = "ASC"
	Asc  EnterpriseAPIListChildrenOrganizationsParamsSortOrder = "asc"
	DESC EnterpriseAPIListChildrenOrganizationsParamsSortOrder = "DESC"
	Desc EnterpriseAPIListChildrenOrganizationsParamsSortOrder = "desc"
)

// AddUserToChildOrganizationRequest Request message for adding a user to a child organization
type AddUserToChildOrganizationRequest struct {
	// EnterpriseId Enterprise organization id which user is being managed.
	EnterpriseId string `json:"enterpriseId"`

	// Organizations List of organizations that user should have access with access definition.
	Organizations []AddUserToChildOrganizationRequestOrganizationAccess `json:"organizations"`

	// UserId User ID access to be added to the child organization.
	UserId string `json:"userId"`
}

// AddUserToChildOrganizationRequestOrganizationAccess Represents a user item with associated organization information
type AddUserToChildOrganizationRequestOrganizationAccess struct {
	// GroupIds List of groups assigned in this organization
	GroupIds *[]string `json:"groupIds,omitempty"`

	// OrganizationId Identifier for the organization
	OrganizationId string `json:"organizationId"`

	// RoleBindings List of role bindings assigned in this organization
	RoleBindings *[]AddUserToChildOrganizationRequestRoleBinding `json:"roleBindings,omitempty"`
}

// AddUserToChildOrganizationRequestRoleBinding Represents the binding between a user or group and a role
type AddUserToChildOrganizationRequestRoleBinding struct {
	// RoleId Reference to the role that is being bound
	RoleId string `json:"roleId"`

	// Scopes List of scopes to which this role binding applies
	Scopes *[]RoleBindingScope `json:"scopes,omitempty"`
}

// AddUserToChildOrganizationResponse Response message for adding a user to a child organization
type AddUserToChildOrganizationResponse = map[string]interface{}

// BatchCreateEnterpriseGroupsRequest Request message for batch creating groups in an enterprise
type BatchCreateEnterpriseGroupsRequest struct {
	// EnterpriseId Required field that identifies the enterprise.
	EnterpriseId string `json:"enterpriseId"`

	// Requests The request messages specifying the groups to create.
	//  A maximum of 100 groups can be created in a batch.
	Requests []BatchCreateEnterpriseGroupsRequestGroup `json:"requests"`
}

// BatchCreateEnterpriseGroupsRequestGroup CreateGroupRequest represents the request to create a group
type BatchCreateEnterpriseGroupsRequestGroup struct {
	// Description Description of the group.
	Description *string `json:"description,omitempty"`

	// Members Members of the group.
	Members []BatchCreateEnterpriseGroupsRequestMember `json:"members"`

	// Name Name of the group.
	Name string `json:"name"`

	// OrganizationId Required field that identifies the organization.
	OrganizationId string `json:"organizationId"`

	// RoleBindings Role bindings for the group.
	RoleBindings *[]BatchCreateEnterpriseGroupsRequestRoleBinding `json:"roleBindings,omitempty"`
}

// BatchCreateEnterpriseGroupsRequestMember Member definition
type BatchCreateEnterpriseGroupsRequestMember struct {
	// Id ID is the internal unique identifier of the member.
	Id *string `json:"id,omitempty"`

	// Kind Kind is the type of the member.
	Kind *BatchCreateEnterpriseGroupsRequestMemberKind `json:"kind,omitempty"`
}

// BatchCreateEnterpriseGroupsRequestMemberKind Kind is the type of the member.
type BatchCreateEnterpriseGroupsRequestMemberKind string

// BatchCreateEnterpriseGroupsRequestRoleBinding RoleBinding definition
type BatchCreateEnterpriseGroupsRequestRoleBinding struct {
	// Name Name is a name of the role binding.
	Name string `json:"name"`

	// RoleId Reference to the role that is being bound.
	RoleId string `json:"roleId"`

	// Scopes List of scopes to which this role binding applies.
	Scopes []Scope `json:"scopes"`
}

// BatchCreateEnterpriseGroupsResponse Response message for batch creating groups in an enterprise.
type BatchCreateEnterpriseGroupsResponse struct {
	// Groups List of groups created in the batch.
	Groups *[]BatchCreateEnterpriseGroupsResponseGroup `json:"groups,omitempty"`
}

// BatchCreateEnterpriseGroupsResponseGroup Group represents a group
type BatchCreateEnterpriseGroupsResponseGroup struct {
	// CreateTime CreatedTime is the timestamp when the group was created.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// Definition Definition is the group definition.
	Definition *GroupDefinition `json:"definition,omitempty"`

	// Description Description is the description of the group.
	Description *string `json:"description,omitempty"`

	// Id ID is the unique identifier of the group.
	Id *string `json:"id,omitempty"`

	// ManagedBy Method used to create group, eg.: console, terraform.
	ManagedBy *string `json:"managedBy,omitempty"`

	// Name Name is the name of the group.
	Name *string `json:"name,omitempty"`

	// OrganizationId OrganizationID is the unique identifier of the organization.
	OrganizationId *string `json:"organizationId,omitempty"`

	// RoleBindings RoleBindings is the list of role bindings for the group.
	RoleBindings *[]GroupRoleBinding `json:"roleBindings,omitempty"`

	// UpdateTime UpdatedTime is the timestamp when the group was last updated.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// BatchDeleteEnterpriseGroupsRequest Request message for batch deleting enterprise groups
type BatchDeleteEnterpriseGroupsRequest struct {
	// EnterpriseId Required field that identifies the enterprise.
	EnterpriseId string `json:"enterpriseId"`

	// Requests The requests specifying the groups to delete.
	//  A maximum of 100 groups can be deleted in a batch.
	Requests []BatchDeleteEnterpriseGroupsRequestDeleteGroupRequest `json:"requests"`
}

// BatchDeleteEnterpriseGroupsRequestDeleteGroupRequest Request message for deleting a single group
type BatchDeleteEnterpriseGroupsRequestDeleteGroupRequest struct {
	// Id The ID of the group to delete
	Id string `json:"id"`

	// OrganizationId The organization ID that contains the group
	OrganizationId string `json:"organizationId"`
}

// BatchUpdateEnterpriseGroupsRequest Request message for batch updating groups in an enterprise
type BatchUpdateEnterpriseGroupsRequest struct {
	// EnterpriseId Required field that identifies the enterprise.
	//  If this is set, the organization_id field in the UpdateGroupRequest messages
	//  must either be empty or match organizations within this enterprise.
	EnterpriseId string `json:"enterpriseId"`

	// Requests The request messages specifying the groups to update.
	//  A maximum of 1000 groups can be updated in a batch.
	Requests []BatchUpdateEnterpriseGroupsRequestUpdateGroupRequest `json:"requests"`
}

// BatchUpdateEnterpriseGroupsRequestMember Member definition
type BatchUpdateEnterpriseGroupsRequestMember struct {
	// Id ID is the internal unique identifier of the member.
	Id string `json:"id"`

	// Kind Kind is the type of the member.
	Kind BatchUpdateEnterpriseGroupsRequestMemberKind `json:"kind"`
}

// BatchUpdateEnterpriseGroupsRequestMemberKind Kind is the type of the member.
type BatchUpdateEnterpriseGroupsRequestMemberKind string

// BatchUpdateEnterpriseGroupsRequestRoleBinding RoleBinding definition
type BatchUpdateEnterpriseGroupsRequestRoleBinding struct {
	// Id ID is the unique identifier of the role binding (required for updates).
	Id string `json:"id"`

	// Name Name is a name of the role binding.
	Name string `json:"name"`

	// RoleId Reference to the role that is being bound.
	RoleId string `json:"roleId"`

	// Scopes List of scopes to which this role binding applies.
	Scopes []Scope `json:"scopes"`
}

// BatchUpdateEnterpriseGroupsRequestUpdateGroupRequest UpdateGroupRequest represents the request to update a group
type BatchUpdateEnterpriseGroupsRequestUpdateGroupRequest struct {
	// Description Description of the group.
	Description string `json:"description"`

	// Id Required field that identifies the group to update.
	Id string `json:"id"`

	// Members Members of the group (completely replaces existing members).
	Members []BatchUpdateEnterpriseGroupsRequestMember `json:"members"`

	// Name Name of the group.
	Name string `json:"name"`

	// OrganizationId Required field that identifies the organization.
	OrganizationId string `json:"organizationId"`

	// RoleBindings Role bindings for the group (completely replaces existing role bindings).
	RoleBindings []BatchUpdateEnterpriseGroupsRequestRoleBinding `json:"roleBindings"`
}

// BatchUpdateEnterpriseGroupsResponse Response message for batch updating groups in an enterprise
type BatchUpdateEnterpriseGroupsResponse struct {
	// Groups List of groups updated in the batch.
	Groups *[]BatchUpdateEnterpriseGroupsResponseGroup `json:"groups,omitempty"`
}

// BatchUpdateEnterpriseGroupsResponseGroup Group represents a group
type BatchUpdateEnterpriseGroupsResponseGroup struct {
	// CreateTime CreatedTime is the timestamp when the group was created.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// Definition Definition is the group definition.
	Definition *GroupDefinition `json:"definition,omitempty"`

	// Description Description is the description of the group.
	Description *string `json:"description,omitempty"`

	// Id ID is the unique identifier of the group.
	Id *string `json:"id,omitempty"`

	// ManagedBy Method used to create group, eg.: console, terraform.
	ManagedBy *string `json:"managedBy,omitempty"`

	// Name Name is the name of the group.
	Name *string `json:"name,omitempty"`

	// OrganizationId OrganizationID is the unique identifier of the organization.
	OrganizationId *string `json:"organizationId,omitempty"`

	// RoleBindings RoleBindings is the list of role bindings for the group.
	RoleBindings *[]GroupRoleBinding `json:"roleBindings,omitempty"`

	// UpdateTime UpdatedTime is the timestamp when the group was last updated.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// ChildOrganizationOrganizationCounters OrganizationCounters holds organization counters.
type ChildOrganizationOrganizationCounters struct {
	// Clusters Number of clusters in the organization.
	Clusters *int32 `json:"clusters,omitempty"`

	// Groups Number of groups in the organization.
	Groups *int32 `json:"groups,omitempty"`

	// RoleBindings Number of role bindings in the organization.
	RoleBindings *int32 `json:"roleBindings,omitempty"`

	// Users Number of users in the organization.
	Users *int32 `json:"users,omitempty"`
}

// ClusterScope ClusterScope represents the resource scope of the cluster.
//
//	Resource can be any resources inside the organization.
type ClusterScope struct {
	// Id ID is the unique identifier of the resource.
	Id string `json:"id"`
}

// CreateChildOrganizationRequestChildOrganization Represents child organization details
type CreateChildOrganizationRequestChildOrganization struct {
	// Name Name of the organization
	Name string `json:"name"`
}

// CreateChildOrganizationResponse Response message containing organization details
type CreateChildOrganizationResponse struct {
	// CreateTime CreatedTime is the timestamp when the organization was created.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// Name Name is the name of the organization
	Name *string `json:"name,omitempty"`

	// OrganizationId OrganizationID is the ID of the organization.
	OrganizationId *string `json:"organizationId,omitempty"`
}

// DefinitionAuthor Author is the author of the group
type DefinitionAuthor struct {
	// Email Email is the email of the author.
	Email *string `json:"email,omitempty"`

	// Id ID is the unique identifier of the author.
	Id *string `json:"id,omitempty"`

	// Kind Kind is the type of the author.
	Kind *DefinitionAuthorKind `json:"kind,omitempty"`
}

// DefinitionAuthorKind Kind is the type of the author.
type DefinitionAuthorKind string

// DefinitionMember Member represents a member of a group
type DefinitionMember struct {
	// AddedTime AddedTime is the timestamp when the user has been added to the group.
	AddedTime *time.Time `json:"addedTime,omitempty"`

	// Email Email is the email of the member.
	Email *string `json:"email,omitempty"`

	// Id ID is the internal unique identifier of the member.
	Id *string `json:"id,omitempty"`

	// Kind Kind is the type of the member.
	Kind *DefinitionMemberKind `json:"kind,omitempty"`

	// LastLoginTime LastLoginTime is the timestamp of the time when the user last time
	//  logged in.
	LastLoginTime *time.Time `json:"lastLoginTime,omitempty"`
}

// DefinitionMemberKind Kind is the type of the member.
type DefinitionMemberKind string

// DefinitionRoleBinding Represents the binding between a user or group and a role.
type DefinitionRoleBinding struct {
	// RoleId Reference to the role that is being bound.
	RoleId *string `json:"roleId,omitempty"`

	// Scopes List of scopes to which this role binding applies.
	Scopes *[]RoleBindingScope `json:"scopes,omitempty"`
}

// GoogleProtobufAny Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
type GoogleProtobufAny struct {
	// Type The type of the serialized message.
	Type                 *string                `json:"@type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// GroupDefinitionAuthor Author is the author of the group
type GroupDefinitionAuthor struct {
	// Email Email is the email of the author.
	Email *string `json:"email,omitempty"`

	// Id ID is the unique identifier of the author.
	Id *string `json:"id,omitempty"`

	// Kind Kind is the type of the author.
	Kind *GroupDefinitionAuthorKind `json:"kind,omitempty"`
}

// GroupDefinitionAuthorKind Kind is the type of the author.
type GroupDefinitionAuthorKind string

// GroupDefinitionMember Member represents a member of a group
type GroupDefinitionMember struct {
	// AddedTime AddedTime is the timestamp when the user has been added to the group.
	AddedTime *time.Time `json:"addedTime,omitempty"`

	// Email Email is the email of the member.
	Email *string `json:"email,omitempty"`

	// Id ID is the internal unique identifier of the member.
	Id *string `json:"id,omitempty"`

	// Kind Kind is the type of the member.
	Kind *GroupDefinitionMemberKind `json:"kind,omitempty"`

	// LastLoginTime LastLoginTime is the timestamp of the time when the user last time
	//  logged in.
	LastLoginTime *time.Time `json:"lastLoginTime,omitempty"`
}

// GroupDefinitionMemberKind Kind is the type of the member.
type GroupDefinitionMemberKind string

// GroupSubject GroupSubject represents the group subject.
type GroupSubject struct {
	// Id ID is the unique identifier of the group.
	Id string `json:"id"`

	// Name Name is the name of the group.
	Name *string `json:"name,omitempty"`
}

// GroupDefinition GroupDefinition represents the definition of a group
type GroupDefinition struct {
	// Author Author is the author of the group.
	Author *DefinitionAuthor `json:"author,omitempty"`

	// Members Members is a list of members.
	Members *[]DefinitionMember `json:"members,omitempty"`
}

// GroupRoleBinding RoleBindingStatus represents the status of a role binding
type GroupRoleBinding struct {
	// CreateTime CreateTime is the timestamp when the role binding was created.
	CreateTime time.Time `json:"createTime"`

	// Definition Definition is the role binding definition.
	Definition RoleBindingRoleBindingDefinition `json:"definition"`

	// Description Description is the description of the role binding.
	Description string `json:"description"`

	// Id ID is the unique identifier of the role binding.
	Id string `json:"id"`

	// ManagedBy Method used to create role binding, eg.: console, terraform.
	ManagedBy string `json:"managedBy"`

	// Name Name is the name of the role binding.
	Name string `json:"name"`

	// OrganizationId OrganizationID is the unique identifier of the organization
	OrganizationId string `json:"organizationId"`

	// Status Status is the status of the role binding, reflecting the state of the related policies generation.
	Status []RoleBindingRoleBindingStatus `json:"status"`

	// UpdateTime UpdateTime is the timestamp when the role binding was last updated.
	UpdateTime time.Time `json:"updateTime"`
}

// InvitationDefinition Definition represents the invitation details
type InvitationDefinition struct {
	// Groups Represents a group within the organization
	Groups *[]ListMembersResponseGroup `json:"groups,omitempty"`

	// RoleBindings Represents the binding between a user or group and a role.
	RoleBindings *[]DefinitionRoleBinding `json:"roleBindings,omitempty"`
}

// InvitationMembership Contains the data needed to invite a user to an organization.
type InvitationMembership struct {
	// GroupIds The organization groups the user will be invited to.
	GroupIds *[]string `json:"groupIds,omitempty"`

	// OrganizationId Unique identifier for the organization the user will be invited to.
	OrganizationId *string `json:"organizationId,omitempty"`

	// RoleBindings The organization role bindings the user will be invited to.
	RoleBindings *[]InviteUsersRequestRoleBinding `json:"roleBindings,omitempty"`
}

// InviteUsersRequest Request message for inviting users to child organizations in an enterprise
//
//	organization.
type InviteUsersRequest struct {
	// EnterpriseId ID of the enterprise organization to invite users to.
	//  Required field that identifies the enterprise.
	EnterpriseId string `json:"enterpriseId"`

	// Invitations Invitations to create.
	Invitations []InviteUsersRequestInvitation `json:"invitations"`
}

// InviteUsersRequestInvitation Contains data needed to invite a user to a list of organizations.
type InviteUsersRequestInvitation struct {
	// Email Email of the invited user.
	Email string `json:"email"`

	// Memberships The organizations the user will be invited to.
	Memberships *[]InvitationMembership `json:"memberships,omitempty"`
}

// InviteUsersRequestRoleBinding Represents the binding between a user or group and a role.
type InviteUsersRequestRoleBinding struct {
	// RoleId Reference to the role that is being bound.
	RoleId *string `json:"roleId,omitempty"`

	// Scopes List of scopes to which this role binding applies.
	Scopes *[]RoleBindingScope `json:"scopes,omitempty"`
}

// InviteUsersResponse Response message for inviting users to child organizations in an enterprise
//
//	organization.
type InviteUsersResponse = map[string]interface{}

// ListChildrenOrganizationsResponse ListChildrenOrganizationsResponse contains the list of child organizations.
type ListChildrenOrganizationsResponse struct {
	// Items Array of child organizations.
	Items []ListChildrenOrganizationsResponseChildOrganization `json:"items"`

	// NextPageCursor A token to retrieve the next page of results. Pass this value in the
	//  `page.cursor` field in the subsequent call to `ListChildrenOrganizations` method to retrieve the
	//  next page of results.
	NextPageCursor *string `json:"nextPageCursor,omitempty"`

	// PrevPageCursor A token to retrieve the previous page of results. Pass this value in the
	//  `page.cursor` field in the subsequent call to `ListChildrenOrganizations` method to retrieve the
	//  previous page of results.
	PrevPageCursor *string `json:"prevPageCursor,omitempty"`

	// TotalSize The total number of child organizations in the list.
	TotalSize *int32 `json:"totalSize,omitempty"`
}

// ListChildrenOrganizationsResponseChildOrganization ChildOrganization holds child organization details.
type ListChildrenOrganizationsResponseChildOrganization struct {
	// ChildOrderId The order id of child org in enterprise by created_at.
	ChildOrderId int32 `json:"childOrderId"`

	// Counters Counters of objects associated with the organization.
	Counters *ChildOrganizationOrganizationCounters `json:"counters,omitempty"`

	// CreateTime organization creation date.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// Id id of the organization.
	Id *string `json:"id,omitempty"`

	// Name name of the organization. Name of the organization must start with a
	//  letter or a number, followed by letters, numbers, underscores, hyphens,
	//  spaces and periods. The name must end with a letter or a number.
	Name *string `json:"name,omitempty"`

	// Type Type of the organization.
	Type *ListChildrenOrganizationsResponseChildOrganizationType `json:"type,omitempty"`
}

// ListChildrenOrganizationsResponseChildOrganizationType Type of the organization.
type ListChildrenOrganizationsResponseChildOrganizationType string

// ListGroupsResponse Response message containing the list of groups in the enterprise organization
type ListGroupsResponse struct {
	// Items List of groups
	Items *[]ListGroupsResponseGroup `json:"items,omitempty"`

	// NextPageCursor A token to retrieve the next page of results. Pass this value in the
	//  `page.cursor` field in the subsequent call to `ListGroups` method to retrieve the
	//  next page of results.
	NextPageCursor *string `json:"nextPageCursor,omitempty"`

	// PrevPageCursor A token to retrieve the previous page of results. Pass this value in the
	//  `page.cursor` field in the subsequent call to `ListGroups` method to retrieve the
	//  previous page of results.
	PrevPageCursor *string `json:"prevPageCursor,omitempty"`

	// TotalSize The total number of groups in the list.
	TotalSize *int32 `json:"totalSize,omitempty"`
}

// ListGroupsResponseGroup Group represents a group
type ListGroupsResponseGroup struct {
	// CreateTime CreatedTime is the timestamp when the group was created.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// Definition Definition is the group definition.
	Definition *ListGroupsResponseGroupDefinition `json:"definition,omitempty"`

	// Description Description is the description of the group.
	Description *string `json:"description,omitempty"`

	// Id ID is the unique identifier of the group.
	Id *string `json:"id,omitempty"`

	// ManagedBy Method used to create group, eg.: console, terraform.
	ManagedBy *string `json:"managedBy,omitempty"`

	// Name Name is the name of the group.
	Name *string `json:"name,omitempty"`

	// OrganizationId OrganizationID is the unique identifier of the organization.
	OrganizationId *string `json:"organizationId,omitempty"`

	// SsoProvider SSO provider information if the group is managed by SSO
	SsoProvider *string `json:"ssoProvider,omitempty"`

	// UpdateTime UpdatedTime is the timestamp when the group was last updated.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// ListGroupsResponseGroupDefinition GroupDefinition represents the definition of a group
type ListGroupsResponseGroupDefinition struct {
	// Author Author is the author of the group.
	Author *GroupDefinitionAuthor `json:"author,omitempty"`

	// Members Members is a list of members.
	Members *[]GroupDefinitionMember `json:"members,omitempty"`
}

// ListMembersResponse Response message containing the list of users in the enterprise organization
type ListMembersResponse struct {
	// Items List of users in the enterprise and child organizations
	Items *[]ListMembersResponseItem `json:"items,omitempty"`

	// NextPageCursor A token to retrieve the next page of results. Pass this value in the
	//  `page.cursor` field in the subsequent call to `ListMembers` method to retrieve the
	//  next page of results.
	NextPageCursor *string `json:"nextPageCursor,omitempty"`

	// PrevPageCursor A token to retrieve the previous page of results. Pass this value in the
	//  `page.cursor` field in the subsequent call to `ListMembers` method to retrieve the
	//  previous page of results.
	PrevPageCursor *string `json:"prevPageCursor,omitempty"`

	// TotalSize The total number of members in the list.
	TotalSize *int32 `json:"totalSize,omitempty"`
}

// ListMembersResponseGroup Represents a group within the organization
type ListMembersResponseGroup struct {
	// Id Unique identifier for the group
	Id *string `json:"id,omitempty"`

	// Name Display name of the group
	Name *string `json:"name,omitempty"`
}

// ListMembersResponseInvitation Invitation represents an invited user
type ListMembersResponseInvitation struct {
	// CreateTime Timestamp when the invitation was created
	CreateTime *time.Time `json:"createTime,omitempty"`

	// Definition Definition represents the invitation details
	Definition *InvitationDefinition `json:"definition,omitempty"`

	// Email Email address for contact and notifications
	Email *string `json:"email,omitempty"`

	// Id Unique identifier for the invitation.
	Id *string `json:"id,omitempty"`

	// OrganizationId Unique identifier for the organization
	OrganizationId *string `json:"organizationId,omitempty"`

	// ValidTime Timestamp for the valid invitation
	ValidTime *time.Time `json:"validTime,omitempty"`
}

// ListMembersResponseItem Represents a member in the enterprise organization system
type ListMembersResponseItem struct {
	// Invitation Invited user
	Invitation *ListMembersResponseInvitation `json:"invitation,omitempty"`

	// User Active user
	User *ListMembersResponseUser `json:"user,omitempty"`
}

// ListMembersResponseOrganization Represents an organization within the enterprise system
type ListMembersResponseOrganization struct {
	// Groups List of groups belonging to this organization
	Groups *[]ListMembersResponseGroup `json:"groups,omitempty"`

	// Id Unique identifier for the organization
	Id *string `json:"id,omitempty"`

	// Name Display name of the organization
	Name *string `json:"name,omitempty"`

	// RoleBinding List of role bindings assigned in this organization
	RoleBinding *[]ListMembersResponseRoleBinding `json:"roleBinding,omitempty"`
}

// ListMembersResponseRoleBinding Represents the binding between a user or group and a role
type ListMembersResponseRoleBinding struct {
	// Id Unique identifier for the role binding
	Id *string `json:"id,omitempty"`

	// Name Name is a name of the role binding
	Name *string `json:"name,omitempty"`

	// RoleId Reference to the role that is being bound
	RoleId *string `json:"roleId,omitempty"`

	// Scopes List of scopes to which this role binding applies
	Scopes *[]RoleBindingScope `json:"scopes,omitempty"`
}

// ListMembersResponseUser User represents an active user
type ListMembersResponseUser struct {
	// AuthProvider The service providing authentication (e.g., "google", "github")
	AuthProvider *string `json:"authProvider,omitempty"`

	// CreateTime Timestamp when the user account was created
	CreateTime *time.Time `json:"createTime,omitempty"`

	// Email Email address for contact and notifications
	Email *string `json:"email,omitempty"`

	// Id Unique identifier for the user.
	Id *string `json:"id,omitempty"`

	// LoginTime Timestamp of the user's last login
	LoginTime *time.Time `json:"loginTime,omitempty"`

	// Name Full name of the user
	Name *string `json:"name,omitempty"`

	// Oid Auth0 identifier from the authentication provider
	Oid *string `json:"oid,omitempty"`

	// Organizations List of organizations the user belongs to
	Organizations *[]ListMembersResponseOrganization `json:"organizations,omitempty"`

	// ScimActive Bool indicating if the user it's active/inactive in the remote IDP
	ScimActive *bool `json:"scimActive,omitempty"`

	// Username Username used for authentication
	Username *string `json:"username,omitempty"`
}

// ListRoleBindingsResponse Response message containing the list of role bindings in the enterprise organization
type ListRoleBindingsResponse struct {
	// Items List of role bindings
	Items *[]RoleBinding `json:"items,omitempty"`

	// NextPageCursor A token to retrieve the next page of results. Pass this value in the
	//  `page.cursor` field in the subsequent call to `ListRoleBindings` method to retrieve the
	//  next page of results.
	NextPageCursor *string `json:"nextPageCursor,omitempty"`

	// PrevPageCursor A token to retrieve the previous page of results. Pass this value in the
	//  `page.cursor` field in the subsequent call to `ListRoleBindings` method to retrieve the
	//  previous page of results.
	PrevPageCursor *string `json:"prevPageCursor,omitempty"`

	// TotalCount The total number of role bindings in the list.
	TotalCount *int32 `json:"totalCount,omitempty"`
}

// OrganizationScope OrganizationScope represents the organization scope.
type OrganizationScope struct {
	// Id ID is the unique identifier of the organization.
	Id string `json:"id"`
}

// OverrideUserRoleBindingsRequest Request message for overriding users role bindings for enterprise and child organizations
type OverrideUserRoleBindingsRequest struct {
	// EnterpriseId Required field that identifies the enterprise.
	EnterpriseId string `json:"enterpriseId"`

	// Items Users to delete from organizations
	Items []OverrideUserRoleBindingsRequestUserAccess `json:"items"`
}

// OverrideUserRoleBindingsRequestOrganizationAccess Represents an organization access
type OverrideUserRoleBindingsRequestOrganizationAccess struct {
	// Id Organization ID. If enterprise organization is passed, then access is removed for both enterprise and all child organizations.
	Id *string `json:"id,omitempty"`

	// RoleBindings List of role bindings that should be used for overriding. If no role bindings are specified, all role bindings will be removed.
	RoleBindings *[]OverrideUserRoleBindingsRequestRoleBinding `json:"roleBindings,omitempty"`
}

// OverrideUserRoleBindingsRequestRoleBinding Represents a role binding used to override
type OverrideUserRoleBindingsRequestRoleBinding struct {
	// RoleId Reference to the role that is being bound.
	RoleId *string `json:"roleId,omitempty"`

	// Scopes List of scopes to which this role binding applies.
	Scopes *[]RoleBindingScope `json:"scopes,omitempty"`
}

// OverrideUserRoleBindingsRequestUserAccess Represents an user access to organizations
type OverrideUserRoleBindingsRequestUserAccess struct {
	// Id User ID
	Id *string `json:"id,omitempty"`

	// Organizations List of oganizations to remove access for
	Organizations *[]OverrideUserRoleBindingsRequestOrganizationAccess `json:"organizations,omitempty"`
}

// OverrideUserRoleBindingsResponse Response message for overriding users role bindings for enterprise and child organizations
type OverrideUserRoleBindingsResponse = map[string]interface{}

// ResourceScope ResourceScope represents the resource scope.
//
//	Resource can be any resources inside the organization.
type ResourceScope struct {
	// Id ID is the unique identifier of the resource.
	Id string `json:"id"`
}

// RoleBinding RoleBinding represents a role binding
type RoleBinding struct {
	// CreateTime CreatedTime is the timestamp when the role binding was created.
	CreateTime *time.Time `json:"createTime,omitempty"`

	// Definition Definition is the definition of the role binding.
	Definition *RoleBindingDefinition `json:"definition,omitempty"`

	// Description Description is the description of the role binding.
	Description *string `json:"description,omitempty"`

	// Id ID is the unique identifier of the role binding.
	Id *string `json:"id,omitempty"`

	// ManagedBy Method used to create role binding, eg.: console, terraform.
	ManagedBy *string `json:"managedBy,omitempty"`

	// Name Name is the name of the role binding.
	Name *string `json:"name,omitempty"`

	// OrganizationId OrganizationID is the unique identifier of the organization.
	OrganizationId *string `json:"organizationId,omitempty"`

	// Status Status is the status of the role binding, reflecting the state of the related policies generation.
	Status *[]RoleBindingRoleBindingStatus `json:"status,omitempty"`

	// UpdateTime UpdatedTime is the timestamp when the role binding was last updated.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// RoleBindingDefinition RoleBindingDefinition represents the definition of a role binding
type RoleBindingDefinition struct {
	// RoleId RoleID is the unique identifier of the role.
	RoleId *string `json:"roleId,omitempty"`

	// Scopes Scopes is a list of multiple scopes of the role binding.
	Scopes *[]Scope `json:"scopes,omitempty"`

	// Subjects Subjects is a list of subjects.
	Subjects *[]Subject `json:"subjects,omitempty"`
}

// RoleBindingStatusPolicyID PolicyID is the unique identifier of the policy.
type RoleBindingStatusPolicyID struct {
	// Id ID is the unique identifier of the policy.
	Id string `json:"id"`
}

// RoleBindingRoleBindingDefinition Definition represents the role binding definition.
type RoleBindingRoleBindingDefinition struct {
	// RoleId RoleID is the unique identifier of the role.
	RoleId string `json:"roleId"`

	// Scopes Scopes is a list of multiple scopes of the role binding.
	Scopes *[]Scope `json:"scopes,omitempty"`

	// Subjects Subjects is a list of subjects.
	Subjects *[]Subject `json:"subjects,omitempty"`
}

// RoleBindingRoleBindingStatus RoleBindingStatus is the status of the role binding, reflecting the state of the related policies generation.
type RoleBindingRoleBindingStatus struct {
	// Message Message is providing more information about the state.
	Message *string `json:"message,omitempty"`

	// Policies Policies are the unique identifiers of the related policies.
	Policies *[]RoleBindingStatusPolicyID `json:"policies,omitempty"`

	// State State is the state of the policies generation.
	State RoleBindingRoleBindingStatusState `json:"state"`

	// UpdateTime UpdateTime is the timestamp when the role binding was last updated.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// RoleBindingRoleBindingStatusState State is the state of the policies generation.
type RoleBindingRoleBindingStatusState string

// RoleBindingScope Defines a scope for a role binding, specifying which resources the role
//
//	applies to.
type RoleBindingScope struct {
	// Id Unique identifier for the scope.
	Id *string `json:"id,omitempty"`

	// Scope Type of scope as defined in castai.rbac.Scope enum.
	Scope *RoleBindingScopeScope `json:"scope,omitempty"`
}

// RoleBindingScopeScope Type of scope as defined in castai.rbac.Scope enum.
type RoleBindingScopeScope string

// SCIMSchemaAttribute Represents an attribute in a SCIM schema
//
//	https://datatracker.ietf.org/doc/html/rfc7643#section-2.2
type SCIMSchemaAttribute struct {
	// CaseExact Indicates if the attribute is case exact
	CaseExact *bool `json:"caseExact,omitempty"`

	// Description Description of the attribute
	Description *string `json:"description,omitempty"`

	// MultiValued Multi-valued flag indicating if the attribute can have multiple values
	MultiValued *bool `json:"multiValued,omitempty"`

	// Mutability Mutability of the attribute (readOnly, readWrite, immutable, writeOnly)
	Mutability *string `json:"mutability,omitempty"`

	// Name Name of the attribute
	Name *string `json:"name,omitempty"`

	// ReferenceTypes Reference types for reference attributes
	ReferenceTypes *[]string `json:"referenceTypes,omitempty"`

	// Required Indicates if the attribute is required
	Required *bool `json:"required,omitempty"`

	// Returned Returned value (always, never, default, request)
	Returned *string `json:"returned,omitempty"`

	// SubAttributes Sub-attributes for complex attributes
	SubAttributes *[]SCIMSchemaAttribute `json:"subAttributes,omitempty"`

	// Type Type of the attribute (e.g., string, boolean, complex, reference)
	Type *string `json:"type,omitempty"`

	// Uniqueness Uniqueness of the attribute (none, server, global)
	Uniqueness *string `json:"uniqueness,omitempty"`
}

// Scope Scope represents the scope of the role binding.
type Scope struct {
	// Cluster ClusterScope represents the cluster scope.
	Cluster *ClusterScope `json:"cluster,omitempty"`

	// Organization OrganizationScope represents the organization scope.
	Organization *OrganizationScope `json:"organization,omitempty"`

	// Resource ResourceScope represents the resource scope.
	Resource *ResourceScope `json:"resource,omitempty"`
}

// ServiceAccountSubject ServiceAccountSubject represents the service account subject.
type ServiceAccountSubject struct {
	// Id ID is the unique identifier of the service account.
	Id string `json:"id"`

	// Name Name is the name of the service account.
	Name *string `json:"name,omitempty"`
}

// Status The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	// Code The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
	Code *int32 `json:"code,omitempty"`

	// Details A list of messages that carry the error details.  There is a common set of message types for APIs to use.
	Details *[]GoogleProtobufAny `json:"details,omitempty"`

	// Message A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
	Message *string `json:"message,omitempty"`
}

// Subject Subject represents the subject of the role binding.
type Subject struct {
	// Group GroupSubject represents the group subject.
	Group *GroupSubject `json:"group,omitempty"`

	// ServiceAccount ServiceAccountSubject represents the service account subject.
	ServiceAccount *ServiceAccountSubject `json:"serviceAccount,omitempty"`

	// User UserSubject represents the user subject.
	User *UserSubject `json:"user,omitempty"`
}

// UserSubject UserSubject represents the user subject.
type UserSubject struct {
	// Email Email is the email of the user.
	Email *string `json:"email,omitempty"`

	// Id ID is the unique identifier of the user.
	Id string `json:"id"`

	// Name Name is the name of the user.
	Name *string `json:"name,omitempty"`
}

// EnterpriseAPIListGroupsParams defines parameters for EnterpriseAPIListGroups.
type EnterpriseAPIListGroupsParams struct {
	// PageLimit Defines the number of items that should be returned
	PageLimit *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	//  Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// OrganizationId Filter by organization ID. Multiple values can be passed as query
	//  parameters (e.g., &organization_id=x&organization_id=y)
	OrganizationId *[]string `form:"organizationId,omitempty" json:"organizationId,omitempty"`

	// GroupName Filter by group name
	GroupName *string `form:"groupName,omitempty" json:"groupName,omitempty"`

	// SortField The field name to order by. Nested fields can be specified by using a dot (e.g. user.name).
	SortField *string `form:"sort.field,omitempty" json:"sort.field,omitempty"`

	// SortOrder The order of returned items. Default is ASC.
	SortOrder *EnterpriseAPIListGroupsParamsSortOrder `form:"sort.order,omitempty" json:"sort.order,omitempty"`
}

// EnterpriseAPIListGroupsParamsSortOrder defines parameters for EnterpriseAPIListGroups.
type EnterpriseAPIListGroupsParamsSortOrder string

// EnterpriseAPIListMembersParams defines parameters for EnterpriseAPIListMembers.
type EnterpriseAPIListMembersParams struct {
	// OrganizationId Filter by organization ID. Multiple values can be passed as query
	//  parameters (e.g., &organization_id=x&organization_id=y)
	OrganizationId *[]string `form:"organizationId,omitempty" json:"organizationId,omitempty"`

	// RoleId Filter by role ID. Multiple values can be passed as query parameters (e.g.,
	//  &role_id=x&role_id=y)
	RoleId *[]string `form:"roleId,omitempty" json:"roleId,omitempty"`

	// GroupId Filter by group ID. Multiple values can be passed as query parameters
	//  (e.g., &group_id=x&group_id=y)
	GroupId *[]string `form:"groupId,omitempty" json:"groupId,omitempty"`

	// PageLimit Defines the number of items that should be returned
	PageLimit *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	//  Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// Name Filter by name.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// SortField The field name to order by. Nested fields can be specified by using a dot (e.g. user.name).
	SortField *string `form:"sort.field,omitempty" json:"sort.field,omitempty"`

	// SortOrder The order of returned items. Default is ASC.
	SortOrder *EnterpriseAPIListMembersParamsSortOrder `form:"sort.order,omitempty" json:"sort.order,omitempty"`

	// Status Filter by status. Default is ALL.
	Status *EnterpriseAPIListMembersParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// EnterpriseAPIListMembersParamsSortOrder defines parameters for EnterpriseAPIListMembers.
type EnterpriseAPIListMembersParamsSortOrder string

// EnterpriseAPIListMembersParamsStatus defines parameters for EnterpriseAPIListMembers.
type EnterpriseAPIListMembersParamsStatus string

// EnterpriseAPIListChildrenOrganizationsParams defines parameters for EnterpriseAPIListChildrenOrganizations.
type EnterpriseAPIListChildrenOrganizationsParams struct {
	// PageLimit Defines the number of items that should be returned
	PageLimit *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	//  Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// OrganizationName Filter by organization name
	OrganizationName *string `form:"organizationName,omitempty" json:"organizationName,omitempty"`

	// SortField The field name to order by. Nested fields can be specified by using a dot (e.g. user.name).
	SortField *string `form:"sort.field,omitempty" json:"sort.field,omitempty"`

	// SortOrder The order of returned items. Default is ASC.
	SortOrder *EnterpriseAPIListChildrenOrganizationsParamsSortOrder `form:"sort.order,omitempty" json:"sort.order,omitempty"`
}

// EnterpriseAPIListChildrenOrganizationsParamsSortOrder defines parameters for EnterpriseAPIListChildrenOrganizations.
type EnterpriseAPIListChildrenOrganizationsParamsSortOrder string

// EnterpriseAPIListRoleBindingsParams defines parameters for EnterpriseAPIListRoleBindings.
type EnterpriseAPIListRoleBindingsParams struct {
	// PageLimit Defines the number of items that should be returned
	PageLimit *string `form:"page.limit,omitempty" json:"page.limit,omitempty"`

	// PageCursor Cursor that defines token indicating where to start the next page.
	//  Empty value indicates to start from beginning of the dataset.
	PageCursor *string `form:"page.cursor,omitempty" json:"page.cursor,omitempty"`

	// OrganizationId Filter by organization ID. Multiple values can be passed as query
	//  parameters (e.g., &organization_id=x&organization_id=y)
	OrganizationId *[]string `form:"organizationId,omitempty" json:"organizationId,omitempty"`

	// RoleId Filter by role ID. Multiple values can be passed as query parameters (e.g.,
	//  &role_id=x&role_id=y)
	RoleId *[]string `form:"roleId,omitempty" json:"roleId,omitempty"`

	// SubjectId Filter by subject ID. Multiple values can be passed as query parameters (e.g.,
	//  &subject_id=x&subject_id=y)
	SubjectId *[]string `form:"subjectId,omitempty" json:"subjectId,omitempty"`
}

// EnterpriseAPIBatchCreateEnterpriseGroupsJSONRequestBody defines body for EnterpriseAPIBatchCreateEnterpriseGroups for application/json ContentType.
type EnterpriseAPIBatchCreateEnterpriseGroupsJSONRequestBody = BatchCreateEnterpriseGroupsRequest

// EnterpriseAPIBatchDeleteEnterpriseGroupsJSONRequestBody defines body for EnterpriseAPIBatchDeleteEnterpriseGroups for application/json ContentType.
type EnterpriseAPIBatchDeleteEnterpriseGroupsJSONRequestBody = BatchDeleteEnterpriseGroupsRequest

// EnterpriseAPIBatchUpdateEnterpriseGroupsJSONRequestBody defines body for EnterpriseAPIBatchUpdateEnterpriseGroups for application/json ContentType.
type EnterpriseAPIBatchUpdateEnterpriseGroupsJSONRequestBody = BatchUpdateEnterpriseGroupsRequest

// EnterpriseAPIInviteUsersJSONRequestBody defines body for EnterpriseAPIInviteUsers for application/json ContentType.
type EnterpriseAPIInviteUsersJSONRequestBody = InviteUsersRequest

// EnterpriseAPICreateChildOrganizationJSONRequestBody defines body for EnterpriseAPICreateChildOrganization for application/json ContentType.
type EnterpriseAPICreateChildOrganizationJSONRequestBody = CreateChildOrganizationRequestChildOrganization

// EnterpriseAPIAddUserToChildOrganizationJSONRequestBody defines body for EnterpriseAPIAddUserToChildOrganization for application/json ContentType.
type EnterpriseAPIAddUserToChildOrganizationJSONRequestBody = AddUserToChildOrganizationRequest

// EnterpriseAPIOverrideUserRoleBindingsJSONRequestBody defines body for EnterpriseAPIOverrideUserRoleBindings for application/json ContentType.
type EnterpriseAPIOverrideUserRoleBindingsJSONRequestBody = OverrideUserRoleBindingsRequest

// Getter for additional properties for GoogleProtobufAny. Returns the specified
// element and whether it was found
func (a GoogleProtobufAny) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for GoogleProtobufAny
func (a *GoogleProtobufAny) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for GoogleProtobufAny to handle AdditionalProperties
func (a *GoogleProtobufAny) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["@type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading '@type': %w", err)
		}
		delete(object, "@type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for GoogleProtobufAny to handle AdditionalProperties
func (a GoogleProtobufAny) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Type != nil {
		object["@type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '@type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
