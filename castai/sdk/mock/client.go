// Code generated by MockGen. DO NOT EDIT.
// Source: client.gen.go

// Package mock_sdk is a generated GoMock package.
package mock_sdk

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	sdk "github.com/castai/terraform-provider-castai/castai/sdk"
	gomock "github.com/golang/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// AuthTokenAPICreateAuthToken mocks base method.
func (m *MockClientInterface) AuthTokenAPICreateAuthToken(ctx context.Context, body sdk.AuthTokenAPICreateAuthTokenJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthTokenAPICreateAuthToken", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPICreateAuthToken indicates an expected call of AuthTokenAPICreateAuthToken.
func (mr *MockClientInterfaceMockRecorder) AuthTokenAPICreateAuthToken(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPICreateAuthToken", reflect.TypeOf((*MockClientInterface)(nil).AuthTokenAPICreateAuthToken), varargs...)
}

// AuthTokenAPICreateAuthTokenWithBody mocks base method.
func (m *MockClientInterface) AuthTokenAPICreateAuthTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthTokenAPICreateAuthTokenWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPICreateAuthTokenWithBody indicates an expected call of AuthTokenAPICreateAuthTokenWithBody.
func (mr *MockClientInterfaceMockRecorder) AuthTokenAPICreateAuthTokenWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPICreateAuthTokenWithBody", reflect.TypeOf((*MockClientInterface)(nil).AuthTokenAPICreateAuthTokenWithBody), varargs...)
}

// AuthTokenAPIDeleteAuthToken mocks base method.
func (m *MockClientInterface) AuthTokenAPIDeleteAuthToken(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthTokenAPIDeleteAuthToken", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIDeleteAuthToken indicates an expected call of AuthTokenAPIDeleteAuthToken.
func (mr *MockClientInterfaceMockRecorder) AuthTokenAPIDeleteAuthToken(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIDeleteAuthToken", reflect.TypeOf((*MockClientInterface)(nil).AuthTokenAPIDeleteAuthToken), varargs...)
}

// AuthTokenAPIGetAuthToken mocks base method.
func (m *MockClientInterface) AuthTokenAPIGetAuthToken(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthTokenAPIGetAuthToken", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIGetAuthToken indicates an expected call of AuthTokenAPIGetAuthToken.
func (mr *MockClientInterfaceMockRecorder) AuthTokenAPIGetAuthToken(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIGetAuthToken", reflect.TypeOf((*MockClientInterface)(nil).AuthTokenAPIGetAuthToken), varargs...)
}

// AuthTokenAPIListAuthTokens mocks base method.
func (m *MockClientInterface) AuthTokenAPIListAuthTokens(ctx context.Context, params *sdk.AuthTokenAPIListAuthTokensParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthTokenAPIListAuthTokens", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIListAuthTokens indicates an expected call of AuthTokenAPIListAuthTokens.
func (mr *MockClientInterfaceMockRecorder) AuthTokenAPIListAuthTokens(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIListAuthTokens", reflect.TypeOf((*MockClientInterface)(nil).AuthTokenAPIListAuthTokens), varargs...)
}

// AuthTokenAPIUpdateAuthToken mocks base method.
func (m *MockClientInterface) AuthTokenAPIUpdateAuthToken(ctx context.Context, id string, body sdk.AuthTokenAPIUpdateAuthTokenJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthTokenAPIUpdateAuthToken", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIUpdateAuthToken indicates an expected call of AuthTokenAPIUpdateAuthToken.
func (mr *MockClientInterfaceMockRecorder) AuthTokenAPIUpdateAuthToken(ctx, id, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIUpdateAuthToken", reflect.TypeOf((*MockClientInterface)(nil).AuthTokenAPIUpdateAuthToken), varargs...)
}

// AuthTokenAPIUpdateAuthTokenWithBody mocks base method.
func (m *MockClientInterface) AuthTokenAPIUpdateAuthTokenWithBody(ctx context.Context, id, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthTokenAPIUpdateAuthTokenWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIUpdateAuthTokenWithBody indicates an expected call of AuthTokenAPIUpdateAuthTokenWithBody.
func (mr *MockClientInterfaceMockRecorder) AuthTokenAPIUpdateAuthTokenWithBody(ctx, id, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIUpdateAuthTokenWithBody", reflect.TypeOf((*MockClientInterface)(nil).AuthTokenAPIUpdateAuthTokenWithBody), varargs...)
}

// CommitmentsAPICreateCommitmentAssignment mocks base method.
func (m *MockClientInterface) CommitmentsAPICreateCommitmentAssignment(ctx context.Context, params *sdk.CommitmentsAPICreateCommitmentAssignmentParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPICreateCommitmentAssignment", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPICreateCommitmentAssignment indicates an expected call of CommitmentsAPICreateCommitmentAssignment.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPICreateCommitmentAssignment(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPICreateCommitmentAssignment", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPICreateCommitmentAssignment), varargs...)
}

// CommitmentsAPIDeleteCommitment mocks base method.
func (m *MockClientInterface) CommitmentsAPIDeleteCommitment(ctx context.Context, commitmentId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, commitmentId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIDeleteCommitment", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIDeleteCommitment indicates an expected call of CommitmentsAPIDeleteCommitment.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIDeleteCommitment(ctx, commitmentId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, commitmentId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIDeleteCommitment", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIDeleteCommitment), varargs...)
}

// CommitmentsAPIDeleteCommitmentAssignment mocks base method.
func (m *MockClientInterface) CommitmentsAPIDeleteCommitmentAssignment(ctx context.Context, assignmentId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, assignmentId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIDeleteCommitmentAssignment", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIDeleteCommitmentAssignment indicates an expected call of CommitmentsAPIDeleteCommitmentAssignment.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIDeleteCommitmentAssignment(ctx, assignmentId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, assignmentId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIDeleteCommitmentAssignment", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIDeleteCommitmentAssignment), varargs...)
}

// CommitmentsAPIGetCommitment mocks base method.
func (m *MockClientInterface) CommitmentsAPIGetCommitment(ctx context.Context, commitmentId string, params *sdk.CommitmentsAPIGetCommitmentParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, commitmentId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIGetCommitment", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIGetCommitment indicates an expected call of CommitmentsAPIGetCommitment.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIGetCommitment(ctx, commitmentId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, commitmentId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIGetCommitment", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIGetCommitment), varargs...)
}

// CommitmentsAPIGetCommitmentAssignments mocks base method.
func (m *MockClientInterface) CommitmentsAPIGetCommitmentAssignments(ctx context.Context, commitmentId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, commitmentId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIGetCommitmentAssignments", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIGetCommitmentAssignments indicates an expected call of CommitmentsAPIGetCommitmentAssignments.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIGetCommitmentAssignments(ctx, commitmentId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, commitmentId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIGetCommitmentAssignments", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIGetCommitmentAssignments), varargs...)
}

// CommitmentsAPIGetCommitments mocks base method.
func (m *MockClientInterface) CommitmentsAPIGetCommitments(ctx context.Context, params *sdk.CommitmentsAPIGetCommitmentsParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIGetCommitments", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIGetCommitments indicates an expected call of CommitmentsAPIGetCommitments.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIGetCommitments(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIGetCommitments", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIGetCommitments), varargs...)
}

// CommitmentsAPIGetCommitmentsAssignments mocks base method.
func (m *MockClientInterface) CommitmentsAPIGetCommitmentsAssignments(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIGetCommitmentsAssignments", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIGetCommitmentsAssignments indicates an expected call of CommitmentsAPIGetCommitmentsAssignments.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIGetCommitmentsAssignments(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIGetCommitmentsAssignments", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIGetCommitmentsAssignments), varargs...)
}

// CommitmentsAPIGetGCPCommitmentsImportScript mocks base method.
func (m *MockClientInterface) CommitmentsAPIGetGCPCommitmentsImportScript(ctx context.Context, params *sdk.CommitmentsAPIGetGCPCommitmentsImportScriptParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIGetGCPCommitmentsImportScript", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIGetGCPCommitmentsImportScript indicates an expected call of CommitmentsAPIGetGCPCommitmentsImportScript.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIGetGCPCommitmentsImportScript(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIGetGCPCommitmentsImportScript", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIGetGCPCommitmentsImportScript), varargs...)
}

// CommitmentsAPIGetGCPCommitmentsScriptTemplate mocks base method.
func (m *MockClientInterface) CommitmentsAPIGetGCPCommitmentsScriptTemplate(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIGetGCPCommitmentsScriptTemplate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIGetGCPCommitmentsScriptTemplate indicates an expected call of CommitmentsAPIGetGCPCommitmentsScriptTemplate.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIGetGCPCommitmentsScriptTemplate(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIGetGCPCommitmentsScriptTemplate", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIGetGCPCommitmentsScriptTemplate), varargs...)
}

// CommitmentsAPIImportAzureReservations mocks base method.
func (m *MockClientInterface) CommitmentsAPIImportAzureReservations(ctx context.Context, params *sdk.CommitmentsAPIImportAzureReservationsParams, body sdk.CommitmentsAPIImportAzureReservationsJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIImportAzureReservations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIImportAzureReservations indicates an expected call of CommitmentsAPIImportAzureReservations.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIImportAzureReservations(ctx, params, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIImportAzureReservations", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIImportAzureReservations), varargs...)
}

// CommitmentsAPIImportAzureReservationsWithBody mocks base method.
func (m *MockClientInterface) CommitmentsAPIImportAzureReservationsWithBody(ctx context.Context, params *sdk.CommitmentsAPIImportAzureReservationsParams, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIImportAzureReservationsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIImportAzureReservationsWithBody indicates an expected call of CommitmentsAPIImportAzureReservationsWithBody.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIImportAzureReservationsWithBody(ctx, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIImportAzureReservationsWithBody", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIImportAzureReservationsWithBody), varargs...)
}

// CommitmentsAPIImportGCPCommitments mocks base method.
func (m *MockClientInterface) CommitmentsAPIImportGCPCommitments(ctx context.Context, params *sdk.CommitmentsAPIImportGCPCommitmentsParams, body sdk.CommitmentsAPIImportGCPCommitmentsJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIImportGCPCommitments", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIImportGCPCommitments indicates an expected call of CommitmentsAPIImportGCPCommitments.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIImportGCPCommitments(ctx, params, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIImportGCPCommitments", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIImportGCPCommitments), varargs...)
}

// CommitmentsAPIImportGCPCommitmentsWithBody mocks base method.
func (m *MockClientInterface) CommitmentsAPIImportGCPCommitmentsWithBody(ctx context.Context, params *sdk.CommitmentsAPIImportGCPCommitmentsParams, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIImportGCPCommitmentsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIImportGCPCommitmentsWithBody indicates an expected call of CommitmentsAPIImportGCPCommitmentsWithBody.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIImportGCPCommitmentsWithBody(ctx, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIImportGCPCommitmentsWithBody", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIImportGCPCommitmentsWithBody), varargs...)
}

// CommitmentsAPIReplaceCommitmentAssignments mocks base method.
func (m *MockClientInterface) CommitmentsAPIReplaceCommitmentAssignments(ctx context.Context, commitmentId string, body sdk.CommitmentsAPIReplaceCommitmentAssignmentsJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, commitmentId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIReplaceCommitmentAssignments", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIReplaceCommitmentAssignments indicates an expected call of CommitmentsAPIReplaceCommitmentAssignments.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIReplaceCommitmentAssignments(ctx, commitmentId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, commitmentId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIReplaceCommitmentAssignments", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIReplaceCommitmentAssignments), varargs...)
}

// CommitmentsAPIReplaceCommitmentAssignmentsWithBody mocks base method.
func (m *MockClientInterface) CommitmentsAPIReplaceCommitmentAssignmentsWithBody(ctx context.Context, commitmentId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, commitmentId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIReplaceCommitmentAssignmentsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIReplaceCommitmentAssignmentsWithBody indicates an expected call of CommitmentsAPIReplaceCommitmentAssignmentsWithBody.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIReplaceCommitmentAssignmentsWithBody(ctx, commitmentId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, commitmentId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIReplaceCommitmentAssignmentsWithBody", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIReplaceCommitmentAssignmentsWithBody), varargs...)
}

// CommitmentsAPIUpdateCommitment mocks base method.
func (m *MockClientInterface) CommitmentsAPIUpdateCommitment(ctx context.Context, commitmentId string, body sdk.CommitmentsAPIUpdateCommitmentJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, commitmentId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIUpdateCommitment", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIUpdateCommitment indicates an expected call of CommitmentsAPIUpdateCommitment.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIUpdateCommitment(ctx, commitmentId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, commitmentId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIUpdateCommitment", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIUpdateCommitment), varargs...)
}

// CommitmentsAPIUpdateCommitmentWithBody mocks base method.
func (m *MockClientInterface) CommitmentsAPIUpdateCommitmentWithBody(ctx context.Context, commitmentId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, commitmentId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CommitmentsAPIUpdateCommitmentWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIUpdateCommitmentWithBody indicates an expected call of CommitmentsAPIUpdateCommitmentWithBody.
func (mr *MockClientInterfaceMockRecorder) CommitmentsAPIUpdateCommitmentWithBody(ctx, commitmentId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, commitmentId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIUpdateCommitmentWithBody", reflect.TypeOf((*MockClientInterface)(nil).CommitmentsAPIUpdateCommitmentWithBody), varargs...)
}

// EvictorAPIGetAdvancedConfig mocks base method.
func (m *MockClientInterface) EvictorAPIGetAdvancedConfig(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvictorAPIGetAdvancedConfig", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictorAPIGetAdvancedConfig indicates an expected call of EvictorAPIGetAdvancedConfig.
func (mr *MockClientInterfaceMockRecorder) EvictorAPIGetAdvancedConfig(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictorAPIGetAdvancedConfig", reflect.TypeOf((*MockClientInterface)(nil).EvictorAPIGetAdvancedConfig), varargs...)
}

// EvictorAPIUpsertAdvancedConfig mocks base method.
func (m *MockClientInterface) EvictorAPIUpsertAdvancedConfig(ctx context.Context, clusterId string, body sdk.EvictorAPIUpsertAdvancedConfigJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvictorAPIUpsertAdvancedConfig", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictorAPIUpsertAdvancedConfig indicates an expected call of EvictorAPIUpsertAdvancedConfig.
func (mr *MockClientInterfaceMockRecorder) EvictorAPIUpsertAdvancedConfig(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictorAPIUpsertAdvancedConfig", reflect.TypeOf((*MockClientInterface)(nil).EvictorAPIUpsertAdvancedConfig), varargs...)
}

// EvictorAPIUpsertAdvancedConfigWithBody mocks base method.
func (m *MockClientInterface) EvictorAPIUpsertAdvancedConfigWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvictorAPIUpsertAdvancedConfigWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictorAPIUpsertAdvancedConfigWithBody indicates an expected call of EvictorAPIUpsertAdvancedConfigWithBody.
func (mr *MockClientInterfaceMockRecorder) EvictorAPIUpsertAdvancedConfigWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictorAPIUpsertAdvancedConfigWithBody", reflect.TypeOf((*MockClientInterface)(nil).EvictorAPIUpsertAdvancedConfigWithBody), varargs...)
}

// ExternalClusterAPIAddNode mocks base method.
func (m *MockClientInterface) ExternalClusterAPIAddNode(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIAddNodeJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIAddNode", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIAddNode indicates an expected call of ExternalClusterAPIAddNode.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIAddNode(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIAddNode", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIAddNode), varargs...)
}

// ExternalClusterAPIAddNodeWithBody mocks base method.
func (m *MockClientInterface) ExternalClusterAPIAddNodeWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIAddNodeWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIAddNodeWithBody indicates an expected call of ExternalClusterAPIAddNodeWithBody.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIAddNodeWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIAddNodeWithBody", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIAddNodeWithBody), varargs...)
}

// ExternalClusterAPICreateAssumeRolePrincipal mocks base method.
func (m *MockClientInterface) ExternalClusterAPICreateAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPICreateAssumeRolePrincipal", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPICreateAssumeRolePrincipal indicates an expected call of ExternalClusterAPICreateAssumeRolePrincipal.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPICreateAssumeRolePrincipal(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPICreateAssumeRolePrincipal", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPICreateAssumeRolePrincipal), varargs...)
}

// ExternalClusterAPICreateClusterToken mocks base method.
func (m *MockClientInterface) ExternalClusterAPICreateClusterToken(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPICreateClusterToken", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPICreateClusterToken indicates an expected call of ExternalClusterAPICreateClusterToken.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPICreateClusterToken(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPICreateClusterToken", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPICreateClusterToken), varargs...)
}

// ExternalClusterAPIDeleteAssumeRolePrincipal mocks base method.
func (m *MockClientInterface) ExternalClusterAPIDeleteAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIDeleteAssumeRolePrincipal", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDeleteAssumeRolePrincipal indicates an expected call of ExternalClusterAPIDeleteAssumeRolePrincipal.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIDeleteAssumeRolePrincipal(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDeleteAssumeRolePrincipal", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIDeleteAssumeRolePrincipal), varargs...)
}

// ExternalClusterAPIDeleteCluster mocks base method.
func (m *MockClientInterface) ExternalClusterAPIDeleteCluster(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIDeleteCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDeleteCluster indicates an expected call of ExternalClusterAPIDeleteCluster.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIDeleteCluster(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDeleteCluster", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIDeleteCluster), varargs...)
}

// ExternalClusterAPIDeleteNode mocks base method.
func (m *MockClientInterface) ExternalClusterAPIDeleteNode(ctx context.Context, clusterId, nodeId string, params *sdk.ExternalClusterAPIDeleteNodeParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, nodeId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIDeleteNode", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDeleteNode indicates an expected call of ExternalClusterAPIDeleteNode.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIDeleteNode(ctx, clusterId, nodeId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, nodeId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDeleteNode", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIDeleteNode), varargs...)
}

// ExternalClusterAPIDisconnectCluster mocks base method.
func (m *MockClientInterface) ExternalClusterAPIDisconnectCluster(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIDisconnectClusterJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIDisconnectCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDisconnectCluster indicates an expected call of ExternalClusterAPIDisconnectCluster.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIDisconnectCluster(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDisconnectCluster", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIDisconnectCluster), varargs...)
}

// ExternalClusterAPIDisconnectClusterWithBody mocks base method.
func (m *MockClientInterface) ExternalClusterAPIDisconnectClusterWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIDisconnectClusterWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDisconnectClusterWithBody indicates an expected call of ExternalClusterAPIDisconnectClusterWithBody.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIDisconnectClusterWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDisconnectClusterWithBody", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIDisconnectClusterWithBody), varargs...)
}

// ExternalClusterAPIDrainNode mocks base method.
func (m *MockClientInterface) ExternalClusterAPIDrainNode(ctx context.Context, clusterId, nodeId string, body sdk.ExternalClusterAPIDrainNodeJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, nodeId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIDrainNode", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDrainNode indicates an expected call of ExternalClusterAPIDrainNode.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIDrainNode(ctx, clusterId, nodeId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, nodeId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDrainNode", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIDrainNode), varargs...)
}

// ExternalClusterAPIDrainNodeWithBody mocks base method.
func (m *MockClientInterface) ExternalClusterAPIDrainNodeWithBody(ctx context.Context, clusterId, nodeId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, nodeId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIDrainNodeWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDrainNodeWithBody indicates an expected call of ExternalClusterAPIDrainNodeWithBody.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIDrainNodeWithBody(ctx, clusterId, nodeId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, nodeId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDrainNodeWithBody", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIDrainNodeWithBody), varargs...)
}

// ExternalClusterAPIGetAssumeRolePrincipal mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetAssumeRolePrincipal", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetAssumeRolePrincipal indicates an expected call of ExternalClusterAPIGetAssumeRolePrincipal.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetAssumeRolePrincipal(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetAssumeRolePrincipal", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetAssumeRolePrincipal), varargs...)
}

// ExternalClusterAPIGetAssumeRoleUser mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetAssumeRoleUser(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetAssumeRoleUser", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetAssumeRoleUser indicates an expected call of ExternalClusterAPIGetAssumeRoleUser.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetAssumeRoleUser(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetAssumeRoleUser", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetAssumeRoleUser), varargs...)
}

// ExternalClusterAPIGetCleanupScript mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetCleanupScript(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCleanupScript", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCleanupScript indicates an expected call of ExternalClusterAPIGetCleanupScript.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetCleanupScript(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCleanupScript", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetCleanupScript), varargs...)
}

// ExternalClusterAPIGetCleanupScriptTemplate mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetCleanupScriptTemplate(ctx context.Context, provider string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, provider}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCleanupScriptTemplate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCleanupScriptTemplate indicates an expected call of ExternalClusterAPIGetCleanupScriptTemplate.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetCleanupScriptTemplate(ctx, provider interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, provider}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCleanupScriptTemplate", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetCleanupScriptTemplate), varargs...)
}

// ExternalClusterAPIGetCluster mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetCluster(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCluster indicates an expected call of ExternalClusterAPIGetCluster.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetCluster(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCluster", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetCluster), varargs...)
}

// ExternalClusterAPIGetCredentialsScript mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetCredentialsScript(ctx context.Context, clusterId string, params *sdk.ExternalClusterAPIGetCredentialsScriptParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCredentialsScript", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCredentialsScript indicates an expected call of ExternalClusterAPIGetCredentialsScript.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetCredentialsScript(ctx, clusterId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCredentialsScript", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetCredentialsScript), varargs...)
}

// ExternalClusterAPIGetCredentialsScriptTemplate mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetCredentialsScriptTemplate(ctx context.Context, provider string, params *sdk.ExternalClusterAPIGetCredentialsScriptTemplateParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, provider, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCredentialsScriptTemplate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCredentialsScriptTemplate indicates an expected call of ExternalClusterAPIGetCredentialsScriptTemplate.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetCredentialsScriptTemplate(ctx, provider, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, provider, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCredentialsScriptTemplate", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetCredentialsScriptTemplate), varargs...)
}

// ExternalClusterAPIGetListNodesFilters mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetListNodesFilters(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetListNodesFilters", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetListNodesFilters indicates an expected call of ExternalClusterAPIGetListNodesFilters.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetListNodesFilters(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetListNodesFilters", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetListNodesFilters), varargs...)
}

// ExternalClusterAPIGetNode mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetNode(ctx context.Context, clusterId, nodeId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, nodeId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetNode", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetNode indicates an expected call of ExternalClusterAPIGetNode.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetNode(ctx, clusterId, nodeId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, nodeId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetNode", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetNode), varargs...)
}

// ExternalClusterAPIHandleCloudEvent mocks base method.
func (m *MockClientInterface) ExternalClusterAPIHandleCloudEvent(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIHandleCloudEventJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIHandleCloudEvent", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIHandleCloudEvent indicates an expected call of ExternalClusterAPIHandleCloudEvent.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIHandleCloudEvent(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIHandleCloudEvent", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIHandleCloudEvent), varargs...)
}

// ExternalClusterAPIHandleCloudEventWithBody mocks base method.
func (m *MockClientInterface) ExternalClusterAPIHandleCloudEventWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIHandleCloudEventWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIHandleCloudEventWithBody indicates an expected call of ExternalClusterAPIHandleCloudEventWithBody.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIHandleCloudEventWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIHandleCloudEventWithBody", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIHandleCloudEventWithBody), varargs...)
}

// ExternalClusterAPIListClusters mocks base method.
func (m *MockClientInterface) ExternalClusterAPIListClusters(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIListClusters", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIListClusters indicates an expected call of ExternalClusterAPIListClusters.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIListClusters(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIListClusters", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIListClusters), varargs...)
}

// ExternalClusterAPIListNodes mocks base method.
func (m *MockClientInterface) ExternalClusterAPIListNodes(ctx context.Context, clusterId string, params *sdk.ExternalClusterAPIListNodesParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIListNodes", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIListNodes indicates an expected call of ExternalClusterAPIListNodes.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIListNodes(ctx, clusterId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIListNodes", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIListNodes), varargs...)
}

// ExternalClusterAPIReconcileCluster mocks base method.
func (m *MockClientInterface) ExternalClusterAPIReconcileCluster(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIReconcileCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIReconcileCluster indicates an expected call of ExternalClusterAPIReconcileCluster.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIReconcileCluster(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIReconcileCluster", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIReconcileCluster), varargs...)
}

// ExternalClusterAPIRegisterCluster mocks base method.
func (m *MockClientInterface) ExternalClusterAPIRegisterCluster(ctx context.Context, body sdk.ExternalClusterAPIRegisterClusterJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIRegisterCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIRegisterCluster indicates an expected call of ExternalClusterAPIRegisterCluster.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIRegisterCluster(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIRegisterCluster", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIRegisterCluster), varargs...)
}

// ExternalClusterAPIRegisterClusterWithBody mocks base method.
func (m *MockClientInterface) ExternalClusterAPIRegisterClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIRegisterClusterWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIRegisterClusterWithBody indicates an expected call of ExternalClusterAPIRegisterClusterWithBody.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIRegisterClusterWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIRegisterClusterWithBody", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIRegisterClusterWithBody), varargs...)
}

// ExternalClusterAPIUpdateCluster mocks base method.
func (m *MockClientInterface) ExternalClusterAPIUpdateCluster(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIUpdateClusterJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIUpdateCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIUpdateCluster indicates an expected call of ExternalClusterAPIUpdateCluster.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIUpdateCluster(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIUpdateCluster", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIUpdateCluster), varargs...)
}

// ExternalClusterAPIUpdateClusterTags mocks base method.
func (m *MockClientInterface) ExternalClusterAPIUpdateClusterTags(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIUpdateClusterTagsJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIUpdateClusterTags", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIUpdateClusterTags indicates an expected call of ExternalClusterAPIUpdateClusterTags.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIUpdateClusterTags(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIUpdateClusterTags", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIUpdateClusterTags), varargs...)
}

// ExternalClusterAPIUpdateClusterTagsWithBody mocks base method.
func (m *MockClientInterface) ExternalClusterAPIUpdateClusterTagsWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIUpdateClusterTagsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIUpdateClusterTagsWithBody indicates an expected call of ExternalClusterAPIUpdateClusterTagsWithBody.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIUpdateClusterTagsWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIUpdateClusterTagsWithBody", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIUpdateClusterTagsWithBody), varargs...)
}

// ExternalClusterAPIUpdateClusterWithBody mocks base method.
func (m *MockClientInterface) ExternalClusterAPIUpdateClusterWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIUpdateClusterWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIUpdateClusterWithBody indicates an expected call of ExternalClusterAPIUpdateClusterWithBody.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIUpdateClusterWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIUpdateClusterWithBody", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIUpdateClusterWithBody), varargs...)
}

// InventoryAPIAddReservation mocks base method.
func (m *MockClientInterface) InventoryAPIAddReservation(ctx context.Context, organizationId string, body sdk.InventoryAPIAddReservationJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIAddReservation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIAddReservation indicates an expected call of InventoryAPIAddReservation.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIAddReservation(ctx, organizationId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIAddReservation", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIAddReservation), varargs...)
}

// InventoryAPIAddReservationWithBody mocks base method.
func (m *MockClientInterface) InventoryAPIAddReservationWithBody(ctx context.Context, organizationId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIAddReservationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIAddReservationWithBody indicates an expected call of InventoryAPIAddReservationWithBody.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIAddReservationWithBody(ctx, organizationId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIAddReservationWithBody", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIAddReservationWithBody), varargs...)
}

// InventoryAPIDeleteReservation mocks base method.
func (m *MockClientInterface) InventoryAPIDeleteReservation(ctx context.Context, organizationId, reservationId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, reservationId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIDeleteReservation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIDeleteReservation indicates an expected call of InventoryAPIDeleteReservation.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIDeleteReservation(ctx, organizationId, reservationId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, reservationId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIDeleteReservation", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIDeleteReservation), varargs...)
}

// InventoryAPIGetOrganizationReservationsBalance mocks base method.
func (m *MockClientInterface) InventoryAPIGetOrganizationReservationsBalance(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIGetOrganizationReservationsBalance", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIGetOrganizationReservationsBalance indicates an expected call of InventoryAPIGetOrganizationReservationsBalance.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIGetOrganizationReservationsBalance(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIGetOrganizationReservationsBalance", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIGetOrganizationReservationsBalance), varargs...)
}

// InventoryAPIGetOrganizationResourceUsage mocks base method.
func (m *MockClientInterface) InventoryAPIGetOrganizationResourceUsage(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIGetOrganizationResourceUsage", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIGetOrganizationResourceUsage indicates an expected call of InventoryAPIGetOrganizationResourceUsage.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIGetOrganizationResourceUsage(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIGetOrganizationResourceUsage", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIGetOrganizationResourceUsage), varargs...)
}

// InventoryAPIGetReservations mocks base method.
func (m *MockClientInterface) InventoryAPIGetReservations(ctx context.Context, organizationId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIGetReservations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIGetReservations indicates an expected call of InventoryAPIGetReservations.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIGetReservations(ctx, organizationId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIGetReservations", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIGetReservations), varargs...)
}

// InventoryAPIGetReservationsBalance mocks base method.
func (m *MockClientInterface) InventoryAPIGetReservationsBalance(ctx context.Context, organizationId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIGetReservationsBalance", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIGetReservationsBalance indicates an expected call of InventoryAPIGetReservationsBalance.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIGetReservationsBalance(ctx, organizationId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIGetReservationsBalance", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIGetReservationsBalance), varargs...)
}

// InventoryAPIOverwriteReservations mocks base method.
func (m *MockClientInterface) InventoryAPIOverwriteReservations(ctx context.Context, organizationId string, body sdk.InventoryAPIOverwriteReservationsJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIOverwriteReservations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIOverwriteReservations indicates an expected call of InventoryAPIOverwriteReservations.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIOverwriteReservations(ctx, organizationId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIOverwriteReservations", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIOverwriteReservations), varargs...)
}

// InventoryAPIOverwriteReservationsWithBody mocks base method.
func (m *MockClientInterface) InventoryAPIOverwriteReservationsWithBody(ctx context.Context, organizationId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIOverwriteReservationsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIOverwriteReservationsWithBody indicates an expected call of InventoryAPIOverwriteReservationsWithBody.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIOverwriteReservationsWithBody(ctx, organizationId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIOverwriteReservationsWithBody", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIOverwriteReservationsWithBody), varargs...)
}

// InventoryAPISyncClusterResources mocks base method.
func (m *MockClientInterface) InventoryAPISyncClusterResources(ctx context.Context, organizationId, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPISyncClusterResources", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPISyncClusterResources indicates an expected call of InventoryAPISyncClusterResources.
func (mr *MockClientInterfaceMockRecorder) InventoryAPISyncClusterResources(ctx, organizationId, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPISyncClusterResources", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPISyncClusterResources), varargs...)
}

// NodeConfigurationAPICreateConfiguration mocks base method.
func (m *MockClientInterface) NodeConfigurationAPICreateConfiguration(ctx context.Context, clusterId string, body sdk.NodeConfigurationAPICreateConfigurationJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPICreateConfiguration", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPICreateConfiguration indicates an expected call of NodeConfigurationAPICreateConfiguration.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPICreateConfiguration(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPICreateConfiguration", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPICreateConfiguration), varargs...)
}

// NodeConfigurationAPICreateConfigurationWithBody mocks base method.
func (m *MockClientInterface) NodeConfigurationAPICreateConfigurationWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPICreateConfigurationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPICreateConfigurationWithBody indicates an expected call of NodeConfigurationAPICreateConfigurationWithBody.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPICreateConfigurationWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPICreateConfigurationWithBody", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPICreateConfigurationWithBody), varargs...)
}

// NodeConfigurationAPIDeleteConfiguration mocks base method.
func (m *MockClientInterface) NodeConfigurationAPIDeleteConfiguration(ctx context.Context, clusterId, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPIDeleteConfiguration", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIDeleteConfiguration indicates an expected call of NodeConfigurationAPIDeleteConfiguration.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPIDeleteConfiguration(ctx, clusterId, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIDeleteConfiguration", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPIDeleteConfiguration), varargs...)
}

// NodeConfigurationAPIGetConfiguration mocks base method.
func (m *MockClientInterface) NodeConfigurationAPIGetConfiguration(ctx context.Context, clusterId, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPIGetConfiguration", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIGetConfiguration indicates an expected call of NodeConfigurationAPIGetConfiguration.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPIGetConfiguration(ctx, clusterId, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIGetConfiguration", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPIGetConfiguration), varargs...)
}

// NodeConfigurationAPIGetSuggestedConfiguration mocks base method.
func (m *MockClientInterface) NodeConfigurationAPIGetSuggestedConfiguration(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPIGetSuggestedConfiguration", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIGetSuggestedConfiguration indicates an expected call of NodeConfigurationAPIGetSuggestedConfiguration.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPIGetSuggestedConfiguration(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIGetSuggestedConfiguration", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPIGetSuggestedConfiguration), varargs...)
}

// NodeConfigurationAPIListConfigurations mocks base method.
func (m *MockClientInterface) NodeConfigurationAPIListConfigurations(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPIListConfigurations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIListConfigurations indicates an expected call of NodeConfigurationAPIListConfigurations.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPIListConfigurations(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIListConfigurations", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPIListConfigurations), varargs...)
}

// NodeConfigurationAPIListMaxPodsPresets mocks base method.
func (m *MockClientInterface) NodeConfigurationAPIListMaxPodsPresets(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPIListMaxPodsPresets", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIListMaxPodsPresets indicates an expected call of NodeConfigurationAPIListMaxPodsPresets.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPIListMaxPodsPresets(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIListMaxPodsPresets", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPIListMaxPodsPresets), varargs...)
}

// NodeConfigurationAPISetDefault mocks base method.
func (m *MockClientInterface) NodeConfigurationAPISetDefault(ctx context.Context, clusterId, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPISetDefault", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPISetDefault indicates an expected call of NodeConfigurationAPISetDefault.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPISetDefault(ctx, clusterId, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPISetDefault", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPISetDefault), varargs...)
}

// NodeConfigurationAPIUpdateConfiguration mocks base method.
func (m *MockClientInterface) NodeConfigurationAPIUpdateConfiguration(ctx context.Context, clusterId, id string, body sdk.NodeConfigurationAPIUpdateConfigurationJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPIUpdateConfiguration", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIUpdateConfiguration indicates an expected call of NodeConfigurationAPIUpdateConfiguration.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPIUpdateConfiguration(ctx, clusterId, id, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIUpdateConfiguration", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPIUpdateConfiguration), varargs...)
}

// NodeConfigurationAPIUpdateConfigurationWithBody mocks base method.
func (m *MockClientInterface) NodeConfigurationAPIUpdateConfigurationWithBody(ctx context.Context, clusterId, id, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPIUpdateConfigurationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIUpdateConfigurationWithBody indicates an expected call of NodeConfigurationAPIUpdateConfigurationWithBody.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPIUpdateConfigurationWithBody(ctx, clusterId, id, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIUpdateConfigurationWithBody", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPIUpdateConfigurationWithBody), varargs...)
}

// NodeTemplatesAPICreateNodeTemplate mocks base method.
func (m *MockClientInterface) NodeTemplatesAPICreateNodeTemplate(ctx context.Context, clusterId string, body sdk.NodeTemplatesAPICreateNodeTemplateJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPICreateNodeTemplate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPICreateNodeTemplate indicates an expected call of NodeTemplatesAPICreateNodeTemplate.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPICreateNodeTemplate(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPICreateNodeTemplate", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPICreateNodeTemplate), varargs...)
}

// NodeTemplatesAPICreateNodeTemplateWithBody mocks base method.
func (m *MockClientInterface) NodeTemplatesAPICreateNodeTemplateWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPICreateNodeTemplateWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPICreateNodeTemplateWithBody indicates an expected call of NodeTemplatesAPICreateNodeTemplateWithBody.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPICreateNodeTemplateWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPICreateNodeTemplateWithBody", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPICreateNodeTemplateWithBody), varargs...)
}

// NodeTemplatesAPIDeleteNodeTemplate mocks base method.
func (m *MockClientInterface) NodeTemplatesAPIDeleteNodeTemplate(ctx context.Context, clusterId, nodeTemplateName string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, nodeTemplateName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPIDeleteNodeTemplate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIDeleteNodeTemplate indicates an expected call of NodeTemplatesAPIDeleteNodeTemplate.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPIDeleteNodeTemplate(ctx, clusterId, nodeTemplateName interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, nodeTemplateName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIDeleteNodeTemplate", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPIDeleteNodeTemplate), varargs...)
}

// NodeTemplatesAPIFilterInstanceTypes mocks base method.
func (m *MockClientInterface) NodeTemplatesAPIFilterInstanceTypes(ctx context.Context, clusterId string, body sdk.NodeTemplatesAPIFilterInstanceTypesJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPIFilterInstanceTypes", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIFilterInstanceTypes indicates an expected call of NodeTemplatesAPIFilterInstanceTypes.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPIFilterInstanceTypes(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIFilterInstanceTypes", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPIFilterInstanceTypes), varargs...)
}

// NodeTemplatesAPIFilterInstanceTypesWithBody mocks base method.
func (m *MockClientInterface) NodeTemplatesAPIFilterInstanceTypesWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPIFilterInstanceTypesWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIFilterInstanceTypesWithBody indicates an expected call of NodeTemplatesAPIFilterInstanceTypesWithBody.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPIFilterInstanceTypesWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIFilterInstanceTypesWithBody", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPIFilterInstanceTypesWithBody), varargs...)
}

// NodeTemplatesAPIGenerateNodeTemplates mocks base method.
func (m *MockClientInterface) NodeTemplatesAPIGenerateNodeTemplates(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPIGenerateNodeTemplates", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIGenerateNodeTemplates indicates an expected call of NodeTemplatesAPIGenerateNodeTemplates.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPIGenerateNodeTemplates(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIGenerateNodeTemplates", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPIGenerateNodeTemplates), varargs...)
}

// NodeTemplatesAPIListNodeTemplates mocks base method.
func (m *MockClientInterface) NodeTemplatesAPIListNodeTemplates(ctx context.Context, clusterId string, params *sdk.NodeTemplatesAPIListNodeTemplatesParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPIListNodeTemplates", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIListNodeTemplates indicates an expected call of NodeTemplatesAPIListNodeTemplates.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPIListNodeTemplates(ctx, clusterId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIListNodeTemplates", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPIListNodeTemplates), varargs...)
}

// NodeTemplatesAPIUpdateNodeTemplate mocks base method.
func (m *MockClientInterface) NodeTemplatesAPIUpdateNodeTemplate(ctx context.Context, clusterId, nodeTemplateName string, body sdk.NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, nodeTemplateName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPIUpdateNodeTemplate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIUpdateNodeTemplate indicates an expected call of NodeTemplatesAPIUpdateNodeTemplate.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPIUpdateNodeTemplate(ctx, clusterId, nodeTemplateName, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, nodeTemplateName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIUpdateNodeTemplate", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPIUpdateNodeTemplate), varargs...)
}

// NodeTemplatesAPIUpdateNodeTemplateWithBody mocks base method.
func (m *MockClientInterface) NodeTemplatesAPIUpdateNodeTemplateWithBody(ctx context.Context, clusterId, nodeTemplateName, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, nodeTemplateName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPIUpdateNodeTemplateWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIUpdateNodeTemplateWithBody indicates an expected call of NodeTemplatesAPIUpdateNodeTemplateWithBody.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPIUpdateNodeTemplateWithBody(ctx, clusterId, nodeTemplateName, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, nodeTemplateName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIUpdateNodeTemplateWithBody", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPIUpdateNodeTemplateWithBody), varargs...)
}

// OperationsAPIGetOperation mocks base method.
func (m *MockClientInterface) OperationsAPIGetOperation(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperationsAPIGetOperation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationsAPIGetOperation indicates an expected call of OperationsAPIGetOperation.
func (mr *MockClientInterfaceMockRecorder) OperationsAPIGetOperation(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationsAPIGetOperation", reflect.TypeOf((*MockClientInterface)(nil).OperationsAPIGetOperation), varargs...)
}

// PoliciesAPIGetClusterNodeConstraints mocks base method.
func (m *MockClientInterface) PoliciesAPIGetClusterNodeConstraints(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PoliciesAPIGetClusterNodeConstraints", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIGetClusterNodeConstraints indicates an expected call of PoliciesAPIGetClusterNodeConstraints.
func (mr *MockClientInterfaceMockRecorder) PoliciesAPIGetClusterNodeConstraints(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIGetClusterNodeConstraints", reflect.TypeOf((*MockClientInterface)(nil).PoliciesAPIGetClusterNodeConstraints), varargs...)
}

// PoliciesAPIGetClusterPolicies mocks base method.
func (m *MockClientInterface) PoliciesAPIGetClusterPolicies(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PoliciesAPIGetClusterPolicies", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIGetClusterPolicies indicates an expected call of PoliciesAPIGetClusterPolicies.
func (mr *MockClientInterfaceMockRecorder) PoliciesAPIGetClusterPolicies(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIGetClusterPolicies", reflect.TypeOf((*MockClientInterface)(nil).PoliciesAPIGetClusterPolicies), varargs...)
}

// PoliciesAPIUpsertClusterPolicies mocks base method.
func (m *MockClientInterface) PoliciesAPIUpsertClusterPolicies(ctx context.Context, clusterId string, body sdk.PoliciesAPIUpsertClusterPoliciesJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PoliciesAPIUpsertClusterPolicies", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIUpsertClusterPolicies indicates an expected call of PoliciesAPIUpsertClusterPolicies.
func (mr *MockClientInterfaceMockRecorder) PoliciesAPIUpsertClusterPolicies(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIUpsertClusterPolicies", reflect.TypeOf((*MockClientInterface)(nil).PoliciesAPIUpsertClusterPolicies), varargs...)
}

// PoliciesAPIUpsertClusterPoliciesWithBody mocks base method.
func (m *MockClientInterface) PoliciesAPIUpsertClusterPoliciesWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PoliciesAPIUpsertClusterPoliciesWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIUpsertClusterPoliciesWithBody indicates an expected call of PoliciesAPIUpsertClusterPoliciesWithBody.
func (mr *MockClientInterfaceMockRecorder) PoliciesAPIUpsertClusterPoliciesWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIUpsertClusterPoliciesWithBody", reflect.TypeOf((*MockClientInterface)(nil).PoliciesAPIUpsertClusterPoliciesWithBody), varargs...)
}

// SSOAPICreateSSOConnection mocks base method.
func (m *MockClientInterface) SSOAPICreateSSOConnection(ctx context.Context, body sdk.SSOAPICreateSSOConnectionJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSOAPICreateSSOConnection", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPICreateSSOConnection indicates an expected call of SSOAPICreateSSOConnection.
func (mr *MockClientInterfaceMockRecorder) SSOAPICreateSSOConnection(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPICreateSSOConnection", reflect.TypeOf((*MockClientInterface)(nil).SSOAPICreateSSOConnection), varargs...)
}

// SSOAPICreateSSOConnectionWithBody mocks base method.
func (m *MockClientInterface) SSOAPICreateSSOConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSOAPICreateSSOConnectionWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPICreateSSOConnectionWithBody indicates an expected call of SSOAPICreateSSOConnectionWithBody.
func (mr *MockClientInterfaceMockRecorder) SSOAPICreateSSOConnectionWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPICreateSSOConnectionWithBody", reflect.TypeOf((*MockClientInterface)(nil).SSOAPICreateSSOConnectionWithBody), varargs...)
}

// SSOAPIDeleteSSOConnection mocks base method.
func (m *MockClientInterface) SSOAPIDeleteSSOConnection(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSOAPIDeleteSSOConnection", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIDeleteSSOConnection indicates an expected call of SSOAPIDeleteSSOConnection.
func (mr *MockClientInterfaceMockRecorder) SSOAPIDeleteSSOConnection(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIDeleteSSOConnection", reflect.TypeOf((*MockClientInterface)(nil).SSOAPIDeleteSSOConnection), varargs...)
}

// SSOAPIGetSSOConnection mocks base method.
func (m *MockClientInterface) SSOAPIGetSSOConnection(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSOAPIGetSSOConnection", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIGetSSOConnection indicates an expected call of SSOAPIGetSSOConnection.
func (mr *MockClientInterfaceMockRecorder) SSOAPIGetSSOConnection(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIGetSSOConnection", reflect.TypeOf((*MockClientInterface)(nil).SSOAPIGetSSOConnection), varargs...)
}

// SSOAPIListSSOConnections mocks base method.
func (m *MockClientInterface) SSOAPIListSSOConnections(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSOAPIListSSOConnections", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIListSSOConnections indicates an expected call of SSOAPIListSSOConnections.
func (mr *MockClientInterfaceMockRecorder) SSOAPIListSSOConnections(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIListSSOConnections", reflect.TypeOf((*MockClientInterface)(nil).SSOAPIListSSOConnections), varargs...)
}

// SSOAPIUpdateSSOConnection mocks base method.
func (m *MockClientInterface) SSOAPIUpdateSSOConnection(ctx context.Context, id string, body sdk.SSOAPIUpdateSSOConnectionJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSOAPIUpdateSSOConnection", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIUpdateSSOConnection indicates an expected call of SSOAPIUpdateSSOConnection.
func (mr *MockClientInterfaceMockRecorder) SSOAPIUpdateSSOConnection(ctx, id, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIUpdateSSOConnection", reflect.TypeOf((*MockClientInterface)(nil).SSOAPIUpdateSSOConnection), varargs...)
}

// SSOAPIUpdateSSOConnectionWithBody mocks base method.
func (m *MockClientInterface) SSOAPIUpdateSSOConnectionWithBody(ctx context.Context, id, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSOAPIUpdateSSOConnectionWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIUpdateSSOConnectionWithBody indicates an expected call of SSOAPIUpdateSSOConnectionWithBody.
func (mr *MockClientInterfaceMockRecorder) SSOAPIUpdateSSOConnectionWithBody(ctx, id, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIUpdateSSOConnectionWithBody", reflect.TypeOf((*MockClientInterface)(nil).SSOAPIUpdateSSOConnectionWithBody), varargs...)
}

// ScheduledRebalancingAPICreateRebalancingJob mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPICreateRebalancingJob(ctx context.Context, clusterId string, body sdk.ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingJob", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingJob indicates an expected call of ScheduledRebalancingAPICreateRebalancingJob.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingJob(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingJob", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPICreateRebalancingJob), varargs...)
}

// ScheduledRebalancingAPICreateRebalancingJobWithBody mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPICreateRebalancingJobWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingJobWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingJobWithBody indicates an expected call of ScheduledRebalancingAPICreateRebalancingJobWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingJobWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingJobWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPICreateRebalancingJobWithBody), varargs...)
}

// ScheduledRebalancingAPICreateRebalancingSchedule mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPICreateRebalancingSchedule(ctx context.Context, body sdk.ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingSchedule indicates an expected call of ScheduledRebalancingAPICreateRebalancingSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingSchedule(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPICreateRebalancingSchedule), varargs...)
}

// ScheduledRebalancingAPICreateRebalancingScheduleWithBody mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPICreateRebalancingScheduleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingScheduleWithBody indicates an expected call of ScheduledRebalancingAPICreateRebalancingScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingScheduleWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPICreateRebalancingScheduleWithBody), varargs...)
}

// ScheduledRebalancingAPIDeleteRebalancingJob mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIDeleteRebalancingJob(ctx context.Context, clusterId, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIDeleteRebalancingJob", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIDeleteRebalancingJob indicates an expected call of ScheduledRebalancingAPIDeleteRebalancingJob.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIDeleteRebalancingJob(ctx, clusterId, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIDeleteRebalancingJob", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIDeleteRebalancingJob), varargs...)
}

// ScheduledRebalancingAPIDeleteRebalancingSchedule mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIDeleteRebalancingSchedule(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIDeleteRebalancingSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIDeleteRebalancingSchedule indicates an expected call of ScheduledRebalancingAPIDeleteRebalancingSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIDeleteRebalancingSchedule(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIDeleteRebalancingSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIDeleteRebalancingSchedule), varargs...)
}

// ScheduledRebalancingAPIGetRebalancingJob mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIGetRebalancingJob(ctx context.Context, clusterId, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIGetRebalancingJob", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIGetRebalancingJob indicates an expected call of ScheduledRebalancingAPIGetRebalancingJob.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIGetRebalancingJob(ctx, clusterId, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIGetRebalancingJob", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIGetRebalancingJob), varargs...)
}

// ScheduledRebalancingAPIGetRebalancingSchedule mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIGetRebalancingSchedule(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIGetRebalancingSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIGetRebalancingSchedule indicates an expected call of ScheduledRebalancingAPIGetRebalancingSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIGetRebalancingSchedule(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIGetRebalancingSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIGetRebalancingSchedule), varargs...)
}

// ScheduledRebalancingAPIListAvailableRebalancingTZ mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIListAvailableRebalancingTZ(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIListAvailableRebalancingTZ", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIListAvailableRebalancingTZ indicates an expected call of ScheduledRebalancingAPIListAvailableRebalancingTZ.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIListAvailableRebalancingTZ(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIListAvailableRebalancingTZ", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIListAvailableRebalancingTZ), varargs...)
}

// ScheduledRebalancingAPIListRebalancingJobs mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIListRebalancingJobs(ctx context.Context, clusterId string, params *sdk.ScheduledRebalancingAPIListRebalancingJobsParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIListRebalancingJobs", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIListRebalancingJobs indicates an expected call of ScheduledRebalancingAPIListRebalancingJobs.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIListRebalancingJobs(ctx, clusterId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIListRebalancingJobs", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIListRebalancingJobs), varargs...)
}

// ScheduledRebalancingAPIListRebalancingSchedules mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIListRebalancingSchedules(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIListRebalancingSchedules", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIListRebalancingSchedules indicates an expected call of ScheduledRebalancingAPIListRebalancingSchedules.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIListRebalancingSchedules(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIListRebalancingSchedules", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIListRebalancingSchedules), varargs...)
}

// ScheduledRebalancingAPIPreviewRebalancingSchedule mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIPreviewRebalancingSchedule(ctx context.Context, clusterId string, body sdk.ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIPreviewRebalancingSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIPreviewRebalancingSchedule indicates an expected call of ScheduledRebalancingAPIPreviewRebalancingSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIPreviewRebalancingSchedule(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIPreviewRebalancingSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIPreviewRebalancingSchedule), varargs...)
}

// ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody indicates an expected call of ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody), varargs...)
}

// ScheduledRebalancingAPIUpdateRebalancingJob mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIUpdateRebalancingJob(ctx context.Context, clusterId, id string, body sdk.ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingJob", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingJob indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingJob.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingJob(ctx, clusterId, id, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingJob", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingJob), varargs...)
}

// ScheduledRebalancingAPIUpdateRebalancingJobWithBody mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIUpdateRebalancingJobWithBody(ctx context.Context, clusterId, id, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingJobWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingJobWithBody indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingJobWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingJobWithBody(ctx, clusterId, id, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingJobWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingJobWithBody), varargs...)
}

// ScheduledRebalancingAPIUpdateRebalancingSchedule mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIUpdateRebalancingSchedule(ctx context.Context, params *sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleParams, body sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingSchedule indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingSchedule(ctx, params, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingSchedule), varargs...)
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody(ctx context.Context, params *sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleParams, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody(ctx, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody), varargs...)
}

// UsersAPIAddUserToOrganization mocks base method.
func (m *MockClientInterface) UsersAPIAddUserToOrganization(ctx context.Context, organizationId string, body sdk.UsersAPIAddUserToOrganizationJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIAddUserToOrganization", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIAddUserToOrganization indicates an expected call of UsersAPIAddUserToOrganization.
func (mr *MockClientInterfaceMockRecorder) UsersAPIAddUserToOrganization(ctx, organizationId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIAddUserToOrganization", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIAddUserToOrganization), varargs...)
}

// UsersAPIAddUserToOrganizationWithBody mocks base method.
func (m *MockClientInterface) UsersAPIAddUserToOrganizationWithBody(ctx context.Context, organizationId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIAddUserToOrganizationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIAddUserToOrganizationWithBody indicates an expected call of UsersAPIAddUserToOrganizationWithBody.
func (mr *MockClientInterfaceMockRecorder) UsersAPIAddUserToOrganizationWithBody(ctx, organizationId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIAddUserToOrganizationWithBody", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIAddUserToOrganizationWithBody), varargs...)
}

// UsersAPIClaimInvitation mocks base method.
func (m *MockClientInterface) UsersAPIClaimInvitation(ctx context.Context, invitationId string, body sdk.UsersAPIClaimInvitationJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, invitationId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIClaimInvitation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIClaimInvitation indicates an expected call of UsersAPIClaimInvitation.
func (mr *MockClientInterfaceMockRecorder) UsersAPIClaimInvitation(ctx, invitationId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, invitationId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIClaimInvitation", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIClaimInvitation), varargs...)
}

// UsersAPIClaimInvitationWithBody mocks base method.
func (m *MockClientInterface) UsersAPIClaimInvitationWithBody(ctx context.Context, invitationId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, invitationId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIClaimInvitationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIClaimInvitationWithBody indicates an expected call of UsersAPIClaimInvitationWithBody.
func (mr *MockClientInterfaceMockRecorder) UsersAPIClaimInvitationWithBody(ctx, invitationId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, invitationId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIClaimInvitationWithBody", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIClaimInvitationWithBody), varargs...)
}

// UsersAPICreateInvitations mocks base method.
func (m *MockClientInterface) UsersAPICreateInvitations(ctx context.Context, body sdk.UsersAPICreateInvitationsJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPICreateInvitations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPICreateInvitations indicates an expected call of UsersAPICreateInvitations.
func (mr *MockClientInterfaceMockRecorder) UsersAPICreateInvitations(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPICreateInvitations", reflect.TypeOf((*MockClientInterface)(nil).UsersAPICreateInvitations), varargs...)
}

// UsersAPICreateInvitationsWithBody mocks base method.
func (m *MockClientInterface) UsersAPICreateInvitationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPICreateInvitationsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPICreateInvitationsWithBody indicates an expected call of UsersAPICreateInvitationsWithBody.
func (mr *MockClientInterfaceMockRecorder) UsersAPICreateInvitationsWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPICreateInvitationsWithBody", reflect.TypeOf((*MockClientInterface)(nil).UsersAPICreateInvitationsWithBody), varargs...)
}

// UsersAPICreateOrganization mocks base method.
func (m *MockClientInterface) UsersAPICreateOrganization(ctx context.Context, body sdk.UsersAPICreateOrganizationJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPICreateOrganization", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPICreateOrganization indicates an expected call of UsersAPICreateOrganization.
func (mr *MockClientInterfaceMockRecorder) UsersAPICreateOrganization(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPICreateOrganization", reflect.TypeOf((*MockClientInterface)(nil).UsersAPICreateOrganization), varargs...)
}

// UsersAPICreateOrganizationWithBody mocks base method.
func (m *MockClientInterface) UsersAPICreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPICreateOrganizationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPICreateOrganizationWithBody indicates an expected call of UsersAPICreateOrganizationWithBody.
func (mr *MockClientInterfaceMockRecorder) UsersAPICreateOrganizationWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPICreateOrganizationWithBody", reflect.TypeOf((*MockClientInterface)(nil).UsersAPICreateOrganizationWithBody), varargs...)
}

// UsersAPICurrentUserProfile mocks base method.
func (m *MockClientInterface) UsersAPICurrentUserProfile(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPICurrentUserProfile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPICurrentUserProfile indicates an expected call of UsersAPICurrentUserProfile.
func (mr *MockClientInterfaceMockRecorder) UsersAPICurrentUserProfile(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPICurrentUserProfile", reflect.TypeOf((*MockClientInterface)(nil).UsersAPICurrentUserProfile), varargs...)
}

// UsersAPIDeleteInvitation mocks base method.
func (m *MockClientInterface) UsersAPIDeleteInvitation(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIDeleteInvitation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIDeleteInvitation indicates an expected call of UsersAPIDeleteInvitation.
func (mr *MockClientInterfaceMockRecorder) UsersAPIDeleteInvitation(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIDeleteInvitation", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIDeleteInvitation), varargs...)
}

// UsersAPIDeleteOrganization mocks base method.
func (m *MockClientInterface) UsersAPIDeleteOrganization(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIDeleteOrganization", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIDeleteOrganization indicates an expected call of UsersAPIDeleteOrganization.
func (mr *MockClientInterfaceMockRecorder) UsersAPIDeleteOrganization(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIDeleteOrganization", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIDeleteOrganization), varargs...)
}

// UsersAPIEditOrganization mocks base method.
func (m *MockClientInterface) UsersAPIEditOrganization(ctx context.Context, id string, body sdk.UsersAPIEditOrganizationJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIEditOrganization", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIEditOrganization indicates an expected call of UsersAPIEditOrganization.
func (mr *MockClientInterfaceMockRecorder) UsersAPIEditOrganization(ctx, id, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIEditOrganization", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIEditOrganization), varargs...)
}

// UsersAPIEditOrganizationWithBody mocks base method.
func (m *MockClientInterface) UsersAPIEditOrganizationWithBody(ctx context.Context, id, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIEditOrganizationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIEditOrganizationWithBody indicates an expected call of UsersAPIEditOrganizationWithBody.
func (mr *MockClientInterfaceMockRecorder) UsersAPIEditOrganizationWithBody(ctx, id, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIEditOrganizationWithBody", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIEditOrganizationWithBody), varargs...)
}

// UsersAPIGetOrganization mocks base method.
func (m *MockClientInterface) UsersAPIGetOrganization(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIGetOrganization", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIGetOrganization indicates an expected call of UsersAPIGetOrganization.
func (mr *MockClientInterfaceMockRecorder) UsersAPIGetOrganization(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIGetOrganization", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIGetOrganization), varargs...)
}

// UsersAPIListInvitations mocks base method.
func (m *MockClientInterface) UsersAPIListInvitations(ctx context.Context, params *sdk.UsersAPIListInvitationsParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIListInvitations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIListInvitations indicates an expected call of UsersAPIListInvitations.
func (mr *MockClientInterfaceMockRecorder) UsersAPIListInvitations(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIListInvitations", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIListInvitations), varargs...)
}

// UsersAPIListOrganizationUsers mocks base method.
func (m *MockClientInterface) UsersAPIListOrganizationUsers(ctx context.Context, organizationId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIListOrganizationUsers", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIListOrganizationUsers indicates an expected call of UsersAPIListOrganizationUsers.
func (mr *MockClientInterfaceMockRecorder) UsersAPIListOrganizationUsers(ctx, organizationId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIListOrganizationUsers", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIListOrganizationUsers), varargs...)
}

// UsersAPIListOrganizations mocks base method.
func (m *MockClientInterface) UsersAPIListOrganizations(ctx context.Context, params *sdk.UsersAPIListOrganizationsParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIListOrganizations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIListOrganizations indicates an expected call of UsersAPIListOrganizations.
func (mr *MockClientInterfaceMockRecorder) UsersAPIListOrganizations(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIListOrganizations", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIListOrganizations), varargs...)
}

// UsersAPIRemoveOrganizationUsers mocks base method.
func (m *MockClientInterface) UsersAPIRemoveOrganizationUsers(ctx context.Context, organizationId string, params *sdk.UsersAPIRemoveOrganizationUsersParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIRemoveOrganizationUsers", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIRemoveOrganizationUsers indicates an expected call of UsersAPIRemoveOrganizationUsers.
func (mr *MockClientInterfaceMockRecorder) UsersAPIRemoveOrganizationUsers(ctx, organizationId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIRemoveOrganizationUsers", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIRemoveOrganizationUsers), varargs...)
}

// UsersAPIRemoveUserFromOrganization mocks base method.
func (m *MockClientInterface) UsersAPIRemoveUserFromOrganization(ctx context.Context, organizationId, userId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, userId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIRemoveUserFromOrganization", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIRemoveUserFromOrganization indicates an expected call of UsersAPIRemoveUserFromOrganization.
func (mr *MockClientInterfaceMockRecorder) UsersAPIRemoveUserFromOrganization(ctx, organizationId, userId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, userId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIRemoveUserFromOrganization", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIRemoveUserFromOrganization), varargs...)
}

// UsersAPIUpdateCurrentUserProfile mocks base method.
func (m *MockClientInterface) UsersAPIUpdateCurrentUserProfile(ctx context.Context, body sdk.UsersAPIUpdateCurrentUserProfileJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIUpdateCurrentUserProfile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIUpdateCurrentUserProfile indicates an expected call of UsersAPIUpdateCurrentUserProfile.
func (mr *MockClientInterfaceMockRecorder) UsersAPIUpdateCurrentUserProfile(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIUpdateCurrentUserProfile", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIUpdateCurrentUserProfile), varargs...)
}

// UsersAPIUpdateCurrentUserProfileWithBody mocks base method.
func (m *MockClientInterface) UsersAPIUpdateCurrentUserProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIUpdateCurrentUserProfileWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIUpdateCurrentUserProfileWithBody indicates an expected call of UsersAPIUpdateCurrentUserProfileWithBody.
func (mr *MockClientInterfaceMockRecorder) UsersAPIUpdateCurrentUserProfileWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIUpdateCurrentUserProfileWithBody", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIUpdateCurrentUserProfileWithBody), varargs...)
}

// UsersAPIUpdateOrganizationUser mocks base method.
func (m *MockClientInterface) UsersAPIUpdateOrganizationUser(ctx context.Context, organizationId, userId string, body sdk.UsersAPIUpdateOrganizationUserJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, userId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIUpdateOrganizationUser", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIUpdateOrganizationUser indicates an expected call of UsersAPIUpdateOrganizationUser.
func (mr *MockClientInterfaceMockRecorder) UsersAPIUpdateOrganizationUser(ctx, organizationId, userId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, userId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIUpdateOrganizationUser", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIUpdateOrganizationUser), varargs...)
}

// UsersAPIUpdateOrganizationUserWithBody mocks base method.
func (m *MockClientInterface) UsersAPIUpdateOrganizationUserWithBody(ctx context.Context, organizationId, userId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, userId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UsersAPIUpdateOrganizationUserWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIUpdateOrganizationUserWithBody indicates an expected call of UsersAPIUpdateOrganizationUserWithBody.
func (mr *MockClientInterfaceMockRecorder) UsersAPIUpdateOrganizationUserWithBody(ctx, organizationId, userId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, userId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIUpdateOrganizationUserWithBody", reflect.TypeOf((*MockClientInterface)(nil).UsersAPIUpdateOrganizationUserWithBody), varargs...)
}

// WorkloadOptimizationAPIAssignScalingPolicyWorkloads mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIAssignScalingPolicyWorkloads(ctx context.Context, clusterId, policyId string, body sdk.WorkloadOptimizationAPIAssignScalingPolicyWorkloadsJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, policyId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIAssignScalingPolicyWorkloads", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIAssignScalingPolicyWorkloads indicates an expected call of WorkloadOptimizationAPIAssignScalingPolicyWorkloads.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIAssignScalingPolicyWorkloads(ctx, clusterId, policyId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, policyId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIAssignScalingPolicyWorkloads", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIAssignScalingPolicyWorkloads), varargs...)
}

// WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody(ctx context.Context, clusterId, policyId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, policyId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody indicates an expected call of WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody(ctx, clusterId, policyId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, policyId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody), varargs...)
}

// WorkloadOptimizationAPICreateWorkloadScalingPolicy mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPICreateWorkloadScalingPolicy(ctx context.Context, clusterId string, body sdk.WorkloadOptimizationAPICreateWorkloadScalingPolicyJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPICreateWorkloadScalingPolicy", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPICreateWorkloadScalingPolicy indicates an expected call of WorkloadOptimizationAPICreateWorkloadScalingPolicy.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPICreateWorkloadScalingPolicy(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPICreateWorkloadScalingPolicy", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPICreateWorkloadScalingPolicy), varargs...)
}

// WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody indicates an expected call of WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody), varargs...)
}

// WorkloadOptimizationAPIDeleteWorkloadScalingPolicy mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIDeleteWorkloadScalingPolicy(ctx context.Context, clusterId, policyId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, policyId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIDeleteWorkloadScalingPolicy", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIDeleteWorkloadScalingPolicy indicates an expected call of WorkloadOptimizationAPIDeleteWorkloadScalingPolicy.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIDeleteWorkloadScalingPolicy(ctx, clusterId, policyId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, policyId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIDeleteWorkloadScalingPolicy", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIDeleteWorkloadScalingPolicy), varargs...)
}

// WorkloadOptimizationAPIGetAgentStatus mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIGetAgentStatus(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIGetAgentStatus", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIGetAgentStatus indicates an expected call of WorkloadOptimizationAPIGetAgentStatus.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIGetAgentStatus(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIGetAgentStatus", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIGetAgentStatus), varargs...)
}

// WorkloadOptimizationAPIGetInstallCmd mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIGetInstallCmd(ctx context.Context, params *sdk.WorkloadOptimizationAPIGetInstallCmdParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIGetInstallCmd", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIGetInstallCmd indicates an expected call of WorkloadOptimizationAPIGetInstallCmd.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIGetInstallCmd(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIGetInstallCmd", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIGetInstallCmd), varargs...)
}

// WorkloadOptimizationAPIGetInstallScript mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIGetInstallScript(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIGetInstallScript", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIGetInstallScript indicates an expected call of WorkloadOptimizationAPIGetInstallScript.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIGetInstallScript(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIGetInstallScript", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIGetInstallScript), varargs...)
}

// WorkloadOptimizationAPIGetWorkload mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIGetWorkload(ctx context.Context, clusterId, workloadId string, params *sdk.WorkloadOptimizationAPIGetWorkloadParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, workloadId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIGetWorkload", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIGetWorkload indicates an expected call of WorkloadOptimizationAPIGetWorkload.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIGetWorkload(ctx, clusterId, workloadId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, workloadId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIGetWorkload", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIGetWorkload), varargs...)
}

// WorkloadOptimizationAPIGetWorkloadScalingPolicy mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIGetWorkloadScalingPolicy(ctx context.Context, clusterId, policyId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, policyId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIGetWorkloadScalingPolicy", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIGetWorkloadScalingPolicy indicates an expected call of WorkloadOptimizationAPIGetWorkloadScalingPolicy.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIGetWorkloadScalingPolicy(ctx, clusterId, policyId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, policyId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIGetWorkloadScalingPolicy", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIGetWorkloadScalingPolicy), varargs...)
}

// WorkloadOptimizationAPIGetWorkloadsSummary mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIGetWorkloadsSummary(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIGetWorkloadsSummary", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIGetWorkloadsSummary indicates an expected call of WorkloadOptimizationAPIGetWorkloadsSummary.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIGetWorkloadsSummary(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIGetWorkloadsSummary", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIGetWorkloadsSummary), varargs...)
}

// WorkloadOptimizationAPIListWorkloadEvents mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIListWorkloadEvents(ctx context.Context, clusterId string, params *sdk.WorkloadOptimizationAPIListWorkloadEventsParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIListWorkloadEvents", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIListWorkloadEvents indicates an expected call of WorkloadOptimizationAPIListWorkloadEvents.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIListWorkloadEvents(ctx, clusterId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIListWorkloadEvents", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIListWorkloadEvents), varargs...)
}

// WorkloadOptimizationAPIListWorkloadScalingPolicies mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIListWorkloadScalingPolicies(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIListWorkloadScalingPolicies", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIListWorkloadScalingPolicies indicates an expected call of WorkloadOptimizationAPIListWorkloadScalingPolicies.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIListWorkloadScalingPolicies(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIListWorkloadScalingPolicies", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIListWorkloadScalingPolicies), varargs...)
}

// WorkloadOptimizationAPIListWorkloads mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIListWorkloads(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIListWorkloads", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIListWorkloads indicates an expected call of WorkloadOptimizationAPIListWorkloads.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIListWorkloads(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIListWorkloads", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIListWorkloads), varargs...)
}

// WorkloadOptimizationAPIUpdateWorkload mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIUpdateWorkload(ctx context.Context, clusterId, workloadId string, body sdk.WorkloadOptimizationAPIUpdateWorkloadJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, workloadId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIUpdateWorkload", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIUpdateWorkload indicates an expected call of WorkloadOptimizationAPIUpdateWorkload.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIUpdateWorkload(ctx, clusterId, workloadId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, workloadId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIUpdateWorkload", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIUpdateWorkload), varargs...)
}

// WorkloadOptimizationAPIUpdateWorkloadScalingPolicy mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIUpdateWorkloadScalingPolicy(ctx context.Context, clusterId, policyId string, body sdk.WorkloadOptimizationAPIUpdateWorkloadScalingPolicyJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, policyId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIUpdateWorkloadScalingPolicy", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIUpdateWorkloadScalingPolicy indicates an expected call of WorkloadOptimizationAPIUpdateWorkloadScalingPolicy.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIUpdateWorkloadScalingPolicy(ctx, clusterId, policyId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, policyId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIUpdateWorkloadScalingPolicy", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIUpdateWorkloadScalingPolicy), varargs...)
}

// WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody(ctx context.Context, clusterId, policyId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, policyId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody indicates an expected call of WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody(ctx, clusterId, policyId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, policyId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody), varargs...)
}

// WorkloadOptimizationAPIUpdateWorkloadV2 mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIUpdateWorkloadV2(ctx context.Context, clusterId, workloadId string, body sdk.WorkloadOptimizationAPIUpdateWorkloadV2JSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, workloadId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIUpdateWorkloadV2", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIUpdateWorkloadV2 indicates an expected call of WorkloadOptimizationAPIUpdateWorkloadV2.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIUpdateWorkloadV2(ctx, clusterId, workloadId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, workloadId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIUpdateWorkloadV2", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIUpdateWorkloadV2), varargs...)
}

// WorkloadOptimizationAPIUpdateWorkloadV2WithBody mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIUpdateWorkloadV2WithBody(ctx context.Context, clusterId, workloadId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, workloadId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIUpdateWorkloadV2WithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIUpdateWorkloadV2WithBody indicates an expected call of WorkloadOptimizationAPIUpdateWorkloadV2WithBody.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIUpdateWorkloadV2WithBody(ctx, clusterId, workloadId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, workloadId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIUpdateWorkloadV2WithBody", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIUpdateWorkloadV2WithBody), varargs...)
}

// WorkloadOptimizationAPIUpdateWorkloadWithBody mocks base method.
func (m *MockClientInterface) WorkloadOptimizationAPIUpdateWorkloadWithBody(ctx context.Context, clusterId, workloadId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, workloadId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIUpdateWorkloadWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIUpdateWorkloadWithBody indicates an expected call of WorkloadOptimizationAPIUpdateWorkloadWithBody.
func (mr *MockClientInterfaceMockRecorder) WorkloadOptimizationAPIUpdateWorkloadWithBody(ctx, clusterId, workloadId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, workloadId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIUpdateWorkloadWithBody", reflect.TypeOf((*MockClientInterface)(nil).WorkloadOptimizationAPIUpdateWorkloadWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// AuthTokenAPICreateAuthTokenWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AuthTokenAPICreateAuthTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*sdk.AuthTokenAPICreateAuthTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenAPICreateAuthTokenWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*sdk.AuthTokenAPICreateAuthTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPICreateAuthTokenWithBodyWithResponse indicates an expected call of AuthTokenAPICreateAuthTokenWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AuthTokenAPICreateAuthTokenWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPICreateAuthTokenWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AuthTokenAPICreateAuthTokenWithBodyWithResponse), ctx, contentType, body)
}

// AuthTokenAPICreateAuthTokenWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AuthTokenAPICreateAuthTokenWithResponse(ctx context.Context, body sdk.AuthTokenAPICreateAuthTokenJSONRequestBody) (*sdk.AuthTokenAPICreateAuthTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenAPICreateAuthTokenWithResponse", ctx, body)
	ret0, _ := ret[0].(*sdk.AuthTokenAPICreateAuthTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPICreateAuthTokenWithResponse indicates an expected call of AuthTokenAPICreateAuthTokenWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AuthTokenAPICreateAuthTokenWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPICreateAuthTokenWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AuthTokenAPICreateAuthTokenWithResponse), ctx, body)
}

// AuthTokenAPIDeleteAuthTokenWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AuthTokenAPIDeleteAuthTokenWithResponse(ctx context.Context, id string) (*sdk.AuthTokenAPIDeleteAuthTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenAPIDeleteAuthTokenWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.AuthTokenAPIDeleteAuthTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIDeleteAuthTokenWithResponse indicates an expected call of AuthTokenAPIDeleteAuthTokenWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AuthTokenAPIDeleteAuthTokenWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIDeleteAuthTokenWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AuthTokenAPIDeleteAuthTokenWithResponse), ctx, id)
}

// AuthTokenAPIGetAuthTokenWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AuthTokenAPIGetAuthTokenWithResponse(ctx context.Context, id string) (*sdk.AuthTokenAPIGetAuthTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenAPIGetAuthTokenWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.AuthTokenAPIGetAuthTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIGetAuthTokenWithResponse indicates an expected call of AuthTokenAPIGetAuthTokenWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AuthTokenAPIGetAuthTokenWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIGetAuthTokenWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AuthTokenAPIGetAuthTokenWithResponse), ctx, id)
}

// AuthTokenAPIListAuthTokensWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AuthTokenAPIListAuthTokensWithResponse(ctx context.Context, params *sdk.AuthTokenAPIListAuthTokensParams) (*sdk.AuthTokenAPIListAuthTokensResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenAPIListAuthTokensWithResponse", ctx, params)
	ret0, _ := ret[0].(*sdk.AuthTokenAPIListAuthTokensResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIListAuthTokensWithResponse indicates an expected call of AuthTokenAPIListAuthTokensWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AuthTokenAPIListAuthTokensWithResponse(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIListAuthTokensWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AuthTokenAPIListAuthTokensWithResponse), ctx, params)
}

// AuthTokenAPIUpdateAuthTokenWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AuthTokenAPIUpdateAuthTokenWithBodyWithResponse(ctx context.Context, id, contentType string, body io.Reader) (*sdk.AuthTokenAPIUpdateAuthTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenAPIUpdateAuthTokenWithBodyWithResponse", ctx, id, contentType, body)
	ret0, _ := ret[0].(*sdk.AuthTokenAPIUpdateAuthTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIUpdateAuthTokenWithBodyWithResponse indicates an expected call of AuthTokenAPIUpdateAuthTokenWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AuthTokenAPIUpdateAuthTokenWithBodyWithResponse(ctx, id, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIUpdateAuthTokenWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AuthTokenAPIUpdateAuthTokenWithBodyWithResponse), ctx, id, contentType, body)
}

// AuthTokenAPIUpdateAuthTokenWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AuthTokenAPIUpdateAuthTokenWithResponse(ctx context.Context, id string, body sdk.AuthTokenAPIUpdateAuthTokenJSONRequestBody) (*sdk.AuthTokenAPIUpdateAuthTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenAPIUpdateAuthTokenWithResponse", ctx, id, body)
	ret0, _ := ret[0].(*sdk.AuthTokenAPIUpdateAuthTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIUpdateAuthTokenWithResponse indicates an expected call of AuthTokenAPIUpdateAuthTokenWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AuthTokenAPIUpdateAuthTokenWithResponse(ctx, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIUpdateAuthTokenWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AuthTokenAPIUpdateAuthTokenWithResponse), ctx, id, body)
}

// CommitmentsAPICreateCommitmentAssignmentWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPICreateCommitmentAssignmentWithResponse(ctx context.Context, params *sdk.CommitmentsAPICreateCommitmentAssignmentParams) (*sdk.CommitmentsAPICreateCommitmentAssignmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPICreateCommitmentAssignmentWithResponse", ctx, params)
	ret0, _ := ret[0].(*sdk.CommitmentsAPICreateCommitmentAssignmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPICreateCommitmentAssignmentWithResponse indicates an expected call of CommitmentsAPICreateCommitmentAssignmentWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPICreateCommitmentAssignmentWithResponse(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPICreateCommitmentAssignmentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPICreateCommitmentAssignmentWithResponse), ctx, params)
}

// CommitmentsAPIDeleteCommitmentAssignmentWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIDeleteCommitmentAssignmentWithResponse(ctx context.Context, assignmentId string) (*sdk.CommitmentsAPIDeleteCommitmentAssignmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIDeleteCommitmentAssignmentWithResponse", ctx, assignmentId)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIDeleteCommitmentAssignmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIDeleteCommitmentAssignmentWithResponse indicates an expected call of CommitmentsAPIDeleteCommitmentAssignmentWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIDeleteCommitmentAssignmentWithResponse(ctx, assignmentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIDeleteCommitmentAssignmentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIDeleteCommitmentAssignmentWithResponse), ctx, assignmentId)
}

// CommitmentsAPIDeleteCommitmentWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIDeleteCommitmentWithResponse(ctx context.Context, commitmentId string) (*sdk.CommitmentsAPIDeleteCommitmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIDeleteCommitmentWithResponse", ctx, commitmentId)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIDeleteCommitmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIDeleteCommitmentWithResponse indicates an expected call of CommitmentsAPIDeleteCommitmentWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIDeleteCommitmentWithResponse(ctx, commitmentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIDeleteCommitmentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIDeleteCommitmentWithResponse), ctx, commitmentId)
}

// CommitmentsAPIGetCommitmentAssignmentsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIGetCommitmentAssignmentsWithResponse(ctx context.Context, commitmentId string) (*sdk.CommitmentsAPIGetCommitmentAssignmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIGetCommitmentAssignmentsWithResponse", ctx, commitmentId)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIGetCommitmentAssignmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIGetCommitmentAssignmentsWithResponse indicates an expected call of CommitmentsAPIGetCommitmentAssignmentsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIGetCommitmentAssignmentsWithResponse(ctx, commitmentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIGetCommitmentAssignmentsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIGetCommitmentAssignmentsWithResponse), ctx, commitmentId)
}

// CommitmentsAPIGetCommitmentWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIGetCommitmentWithResponse(ctx context.Context, commitmentId string, params *sdk.CommitmentsAPIGetCommitmentParams) (*sdk.CommitmentsAPIGetCommitmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIGetCommitmentWithResponse", ctx, commitmentId, params)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIGetCommitmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIGetCommitmentWithResponse indicates an expected call of CommitmentsAPIGetCommitmentWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIGetCommitmentWithResponse(ctx, commitmentId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIGetCommitmentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIGetCommitmentWithResponse), ctx, commitmentId, params)
}

// CommitmentsAPIGetCommitmentsAssignmentsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIGetCommitmentsAssignmentsWithResponse(ctx context.Context) (*sdk.CommitmentsAPIGetCommitmentsAssignmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIGetCommitmentsAssignmentsWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIGetCommitmentsAssignmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIGetCommitmentsAssignmentsWithResponse indicates an expected call of CommitmentsAPIGetCommitmentsAssignmentsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIGetCommitmentsAssignmentsWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIGetCommitmentsAssignmentsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIGetCommitmentsAssignmentsWithResponse), ctx)
}

// CommitmentsAPIGetCommitmentsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIGetCommitmentsWithResponse(ctx context.Context, params *sdk.CommitmentsAPIGetCommitmentsParams) (*sdk.CommitmentsAPIGetCommitmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIGetCommitmentsWithResponse", ctx, params)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIGetCommitmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIGetCommitmentsWithResponse indicates an expected call of CommitmentsAPIGetCommitmentsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIGetCommitmentsWithResponse(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIGetCommitmentsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIGetCommitmentsWithResponse), ctx, params)
}

// CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse(ctx context.Context, params *sdk.CommitmentsAPIGetGCPCommitmentsImportScriptParams) (*sdk.CommitmentsAPIGetGCPCommitmentsImportScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse", ctx, params)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIGetGCPCommitmentsImportScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse indicates an expected call of CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse), ctx, params)
}

// CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse(ctx context.Context) (*sdk.CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse indicates an expected call of CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse), ctx)
}

// CommitmentsAPIImportAzureReservationsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIImportAzureReservationsWithBodyWithResponse(ctx context.Context, params *sdk.CommitmentsAPIImportAzureReservationsParams, contentType string, body io.Reader) (*sdk.CommitmentsAPIImportAzureReservationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIImportAzureReservationsWithBodyWithResponse", ctx, params, contentType, body)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIImportAzureReservationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIImportAzureReservationsWithBodyWithResponse indicates an expected call of CommitmentsAPIImportAzureReservationsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIImportAzureReservationsWithBodyWithResponse(ctx, params, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIImportAzureReservationsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIImportAzureReservationsWithBodyWithResponse), ctx, params, contentType, body)
}

// CommitmentsAPIImportAzureReservationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIImportAzureReservationsWithResponse(ctx context.Context, params *sdk.CommitmentsAPIImportAzureReservationsParams, body sdk.CommitmentsAPIImportAzureReservationsJSONRequestBody) (*sdk.CommitmentsAPIImportAzureReservationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIImportAzureReservationsWithResponse", ctx, params, body)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIImportAzureReservationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIImportAzureReservationsWithResponse indicates an expected call of CommitmentsAPIImportAzureReservationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIImportAzureReservationsWithResponse(ctx, params, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIImportAzureReservationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIImportAzureReservationsWithResponse), ctx, params, body)
}

// CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse(ctx context.Context, params *sdk.CommitmentsAPIImportGCPCommitmentsParams, contentType string, body io.Reader) (*sdk.CommitmentsAPIImportGCPCommitmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse", ctx, params, contentType, body)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIImportGCPCommitmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse indicates an expected call of CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse(ctx, params, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse), ctx, params, contentType, body)
}

// CommitmentsAPIImportGCPCommitmentsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIImportGCPCommitmentsWithResponse(ctx context.Context, params *sdk.CommitmentsAPIImportGCPCommitmentsParams, body sdk.CommitmentsAPIImportGCPCommitmentsJSONRequestBody) (*sdk.CommitmentsAPIImportGCPCommitmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIImportGCPCommitmentsWithResponse", ctx, params, body)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIImportGCPCommitmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIImportGCPCommitmentsWithResponse indicates an expected call of CommitmentsAPIImportGCPCommitmentsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIImportGCPCommitmentsWithResponse(ctx, params, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIImportGCPCommitmentsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIImportGCPCommitmentsWithResponse), ctx, params, body)
}

// CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse(ctx context.Context, commitmentId, contentType string, body io.Reader) (*sdk.CommitmentsAPIReplaceCommitmentAssignmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse", ctx, commitmentId, contentType, body)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIReplaceCommitmentAssignmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse indicates an expected call of CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse(ctx, commitmentId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse), ctx, commitmentId, contentType, body)
}

// CommitmentsAPIReplaceCommitmentAssignmentsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIReplaceCommitmentAssignmentsWithResponse(ctx context.Context, commitmentId string, body sdk.CommitmentsAPIReplaceCommitmentAssignmentsJSONRequestBody) (*sdk.CommitmentsAPIReplaceCommitmentAssignmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIReplaceCommitmentAssignmentsWithResponse", ctx, commitmentId, body)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIReplaceCommitmentAssignmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIReplaceCommitmentAssignmentsWithResponse indicates an expected call of CommitmentsAPIReplaceCommitmentAssignmentsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIReplaceCommitmentAssignmentsWithResponse(ctx, commitmentId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIReplaceCommitmentAssignmentsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIReplaceCommitmentAssignmentsWithResponse), ctx, commitmentId, body)
}

// CommitmentsAPIUpdateCommitmentWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIUpdateCommitmentWithBodyWithResponse(ctx context.Context, commitmentId, contentType string, body io.Reader) (*sdk.CommitmentsAPIUpdateCommitmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIUpdateCommitmentWithBodyWithResponse", ctx, commitmentId, contentType, body)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIUpdateCommitmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIUpdateCommitmentWithBodyWithResponse indicates an expected call of CommitmentsAPIUpdateCommitmentWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIUpdateCommitmentWithBodyWithResponse(ctx, commitmentId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIUpdateCommitmentWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIUpdateCommitmentWithBodyWithResponse), ctx, commitmentId, contentType, body)
}

// CommitmentsAPIUpdateCommitmentWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CommitmentsAPIUpdateCommitmentWithResponse(ctx context.Context, commitmentId string, body sdk.CommitmentsAPIUpdateCommitmentJSONRequestBody) (*sdk.CommitmentsAPIUpdateCommitmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitmentsAPIUpdateCommitmentWithResponse", ctx, commitmentId, body)
	ret0, _ := ret[0].(*sdk.CommitmentsAPIUpdateCommitmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitmentsAPIUpdateCommitmentWithResponse indicates an expected call of CommitmentsAPIUpdateCommitmentWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CommitmentsAPIUpdateCommitmentWithResponse(ctx, commitmentId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitmentsAPIUpdateCommitmentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CommitmentsAPIUpdateCommitmentWithResponse), ctx, commitmentId, body)
}

// EvictorAPIGetAdvancedConfigWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) EvictorAPIGetAdvancedConfigWithResponse(ctx context.Context, clusterId string) (*sdk.EvictorAPIGetAdvancedConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictorAPIGetAdvancedConfigWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.EvictorAPIGetAdvancedConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictorAPIGetAdvancedConfigWithResponse indicates an expected call of EvictorAPIGetAdvancedConfigWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) EvictorAPIGetAdvancedConfigWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictorAPIGetAdvancedConfigWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).EvictorAPIGetAdvancedConfigWithResponse), ctx, clusterId)
}

// EvictorAPIUpsertAdvancedConfigWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) EvictorAPIUpsertAdvancedConfigWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.EvictorAPIUpsertAdvancedConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictorAPIUpsertAdvancedConfigWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.EvictorAPIUpsertAdvancedConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictorAPIUpsertAdvancedConfigWithBodyWithResponse indicates an expected call of EvictorAPIUpsertAdvancedConfigWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) EvictorAPIUpsertAdvancedConfigWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictorAPIUpsertAdvancedConfigWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).EvictorAPIUpsertAdvancedConfigWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// EvictorAPIUpsertAdvancedConfigWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) EvictorAPIUpsertAdvancedConfigWithResponse(ctx context.Context, clusterId string, body sdk.EvictorAPIUpsertAdvancedConfigJSONRequestBody) (*sdk.EvictorAPIUpsertAdvancedConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictorAPIUpsertAdvancedConfigWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.EvictorAPIUpsertAdvancedConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictorAPIUpsertAdvancedConfigWithResponse indicates an expected call of EvictorAPIUpsertAdvancedConfigWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) EvictorAPIUpsertAdvancedConfigWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictorAPIUpsertAdvancedConfigWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).EvictorAPIUpsertAdvancedConfigWithResponse), ctx, clusterId, body)
}

// ExternalClusterAPIAddNodeWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIAddNodeWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.ExternalClusterAPIAddNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIAddNodeWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIAddNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIAddNodeWithBodyWithResponse indicates an expected call of ExternalClusterAPIAddNodeWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIAddNodeWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIAddNodeWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIAddNodeWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// ExternalClusterAPIAddNodeWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIAddNodeWithResponse(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIAddNodeJSONRequestBody) (*sdk.ExternalClusterAPIAddNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIAddNodeWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIAddNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIAddNodeWithResponse indicates an expected call of ExternalClusterAPIAddNodeWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIAddNodeWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIAddNodeWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIAddNodeWithResponse), ctx, clusterId, body)
}

// ExternalClusterAPICreateAssumeRolePrincipalWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPICreateAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPICreateAssumeRolePrincipalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPICreateAssumeRolePrincipalWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPICreateAssumeRolePrincipalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPICreateAssumeRolePrincipalWithResponse indicates an expected call of ExternalClusterAPICreateAssumeRolePrincipalWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPICreateAssumeRolePrincipalWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPICreateAssumeRolePrincipalWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPICreateAssumeRolePrincipalWithResponse), ctx, clusterId)
}

// ExternalClusterAPICreateClusterTokenWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPICreateClusterTokenWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPICreateClusterTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPICreateClusterTokenWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPICreateClusterTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPICreateClusterTokenWithResponse indicates an expected call of ExternalClusterAPICreateClusterTokenWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPICreateClusterTokenWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPICreateClusterTokenWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPICreateClusterTokenWithResponse), ctx, clusterId)
}

// ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPIDeleteAssumeRolePrincipalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIDeleteAssumeRolePrincipalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse indicates an expected call of ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse), ctx, clusterId)
}

// ExternalClusterAPIDeleteClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIDeleteClusterWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPIDeleteClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIDeleteClusterWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIDeleteClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDeleteClusterWithResponse indicates an expected call of ExternalClusterAPIDeleteClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIDeleteClusterWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDeleteClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIDeleteClusterWithResponse), ctx, clusterId)
}

// ExternalClusterAPIDeleteNodeWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIDeleteNodeWithResponse(ctx context.Context, clusterId, nodeId string, params *sdk.ExternalClusterAPIDeleteNodeParams) (*sdk.ExternalClusterAPIDeleteNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIDeleteNodeWithResponse", ctx, clusterId, nodeId, params)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIDeleteNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDeleteNodeWithResponse indicates an expected call of ExternalClusterAPIDeleteNodeWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIDeleteNodeWithResponse(ctx, clusterId, nodeId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDeleteNodeWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIDeleteNodeWithResponse), ctx, clusterId, nodeId, params)
}

// ExternalClusterAPIDisconnectClusterWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIDisconnectClusterWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.ExternalClusterAPIDisconnectClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIDisconnectClusterWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIDisconnectClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDisconnectClusterWithBodyWithResponse indicates an expected call of ExternalClusterAPIDisconnectClusterWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIDisconnectClusterWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDisconnectClusterWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIDisconnectClusterWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// ExternalClusterAPIDisconnectClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIDisconnectClusterWithResponse(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIDisconnectClusterJSONRequestBody) (*sdk.ExternalClusterAPIDisconnectClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIDisconnectClusterWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIDisconnectClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDisconnectClusterWithResponse indicates an expected call of ExternalClusterAPIDisconnectClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIDisconnectClusterWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDisconnectClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIDisconnectClusterWithResponse), ctx, clusterId, body)
}

// ExternalClusterAPIDrainNodeWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIDrainNodeWithBodyWithResponse(ctx context.Context, clusterId, nodeId, contentType string, body io.Reader) (*sdk.ExternalClusterAPIDrainNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIDrainNodeWithBodyWithResponse", ctx, clusterId, nodeId, contentType, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIDrainNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDrainNodeWithBodyWithResponse indicates an expected call of ExternalClusterAPIDrainNodeWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIDrainNodeWithBodyWithResponse(ctx, clusterId, nodeId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDrainNodeWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIDrainNodeWithBodyWithResponse), ctx, clusterId, nodeId, contentType, body)
}

// ExternalClusterAPIDrainNodeWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIDrainNodeWithResponse(ctx context.Context, clusterId, nodeId string, body sdk.ExternalClusterAPIDrainNodeJSONRequestBody) (*sdk.ExternalClusterAPIDrainNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIDrainNodeWithResponse", ctx, clusterId, nodeId, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIDrainNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDrainNodeWithResponse indicates an expected call of ExternalClusterAPIDrainNodeWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIDrainNodeWithResponse(ctx, clusterId, nodeId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDrainNodeWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIDrainNodeWithResponse), ctx, clusterId, nodeId, body)
}

// ExternalClusterAPIGetAssumeRolePrincipalWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPIGetAssumeRolePrincipalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetAssumeRolePrincipalWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetAssumeRolePrincipalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetAssumeRolePrincipalWithResponse indicates an expected call of ExternalClusterAPIGetAssumeRolePrincipalWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetAssumeRolePrincipalWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetAssumeRolePrincipalWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetAssumeRolePrincipalWithResponse), ctx, clusterId)
}

// ExternalClusterAPIGetAssumeRoleUserWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetAssumeRoleUserWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPIGetAssumeRoleUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetAssumeRoleUserWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetAssumeRoleUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetAssumeRoleUserWithResponse indicates an expected call of ExternalClusterAPIGetAssumeRoleUserWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetAssumeRoleUserWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetAssumeRoleUserWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetAssumeRoleUserWithResponse), ctx, clusterId)
}

// ExternalClusterAPIGetCleanupScriptTemplateWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetCleanupScriptTemplateWithResponse(ctx context.Context, provider string) (*sdk.ExternalClusterAPIGetCleanupScriptTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCleanupScriptTemplateWithResponse", ctx, provider)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetCleanupScriptTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCleanupScriptTemplateWithResponse indicates an expected call of ExternalClusterAPIGetCleanupScriptTemplateWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetCleanupScriptTemplateWithResponse(ctx, provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCleanupScriptTemplateWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetCleanupScriptTemplateWithResponse), ctx, provider)
}

// ExternalClusterAPIGetCleanupScriptWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetCleanupScriptWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPIGetCleanupScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCleanupScriptWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetCleanupScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCleanupScriptWithResponse indicates an expected call of ExternalClusterAPIGetCleanupScriptWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetCleanupScriptWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCleanupScriptWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetCleanupScriptWithResponse), ctx, clusterId)
}

// ExternalClusterAPIGetClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetClusterWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPIGetClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetClusterWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetClusterWithResponse indicates an expected call of ExternalClusterAPIGetClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetClusterWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetClusterWithResponse), ctx, clusterId)
}

// ExternalClusterAPIGetCredentialsScriptTemplateWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetCredentialsScriptTemplateWithResponse(ctx context.Context, provider string, params *sdk.ExternalClusterAPIGetCredentialsScriptTemplateParams) (*sdk.ExternalClusterAPIGetCredentialsScriptTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCredentialsScriptTemplateWithResponse", ctx, provider, params)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetCredentialsScriptTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCredentialsScriptTemplateWithResponse indicates an expected call of ExternalClusterAPIGetCredentialsScriptTemplateWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetCredentialsScriptTemplateWithResponse(ctx, provider, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCredentialsScriptTemplateWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetCredentialsScriptTemplateWithResponse), ctx, provider, params)
}

// ExternalClusterAPIGetCredentialsScriptWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetCredentialsScriptWithResponse(ctx context.Context, clusterId string, params *sdk.ExternalClusterAPIGetCredentialsScriptParams) (*sdk.ExternalClusterAPIGetCredentialsScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCredentialsScriptWithResponse", ctx, clusterId, params)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetCredentialsScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCredentialsScriptWithResponse indicates an expected call of ExternalClusterAPIGetCredentialsScriptWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetCredentialsScriptWithResponse(ctx, clusterId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCredentialsScriptWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetCredentialsScriptWithResponse), ctx, clusterId, params)
}

// ExternalClusterAPIGetListNodesFiltersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetListNodesFiltersWithResponse(ctx context.Context) (*sdk.ExternalClusterAPIGetListNodesFiltersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetListNodesFiltersWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetListNodesFiltersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetListNodesFiltersWithResponse indicates an expected call of ExternalClusterAPIGetListNodesFiltersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetListNodesFiltersWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetListNodesFiltersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetListNodesFiltersWithResponse), ctx)
}

// ExternalClusterAPIGetNodeWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetNodeWithResponse(ctx context.Context, clusterId, nodeId string) (*sdk.ExternalClusterAPIGetNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetNodeWithResponse", ctx, clusterId, nodeId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetNodeWithResponse indicates an expected call of ExternalClusterAPIGetNodeWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetNodeWithResponse(ctx, clusterId, nodeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetNodeWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetNodeWithResponse), ctx, clusterId, nodeId)
}

// ExternalClusterAPIHandleCloudEventWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIHandleCloudEventWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.ExternalClusterAPIHandleCloudEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIHandleCloudEventWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIHandleCloudEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIHandleCloudEventWithBodyWithResponse indicates an expected call of ExternalClusterAPIHandleCloudEventWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIHandleCloudEventWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIHandleCloudEventWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIHandleCloudEventWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// ExternalClusterAPIHandleCloudEventWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIHandleCloudEventWithResponse(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIHandleCloudEventJSONRequestBody) (*sdk.ExternalClusterAPIHandleCloudEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIHandleCloudEventWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIHandleCloudEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIHandleCloudEventWithResponse indicates an expected call of ExternalClusterAPIHandleCloudEventWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIHandleCloudEventWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIHandleCloudEventWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIHandleCloudEventWithResponse), ctx, clusterId, body)
}

// ExternalClusterAPIListClustersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIListClustersWithResponse(ctx context.Context) (*sdk.ExternalClusterAPIListClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIListClustersWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIListClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIListClustersWithResponse indicates an expected call of ExternalClusterAPIListClustersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIListClustersWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIListClustersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIListClustersWithResponse), ctx)
}

// ExternalClusterAPIListNodesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIListNodesWithResponse(ctx context.Context, clusterId string, params *sdk.ExternalClusterAPIListNodesParams) (*sdk.ExternalClusterAPIListNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIListNodesWithResponse", ctx, clusterId, params)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIListNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIListNodesWithResponse indicates an expected call of ExternalClusterAPIListNodesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIListNodesWithResponse(ctx, clusterId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIListNodesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIListNodesWithResponse), ctx, clusterId, params)
}

// ExternalClusterAPIReconcileClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIReconcileClusterWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPIReconcileClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIReconcileClusterWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIReconcileClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIReconcileClusterWithResponse indicates an expected call of ExternalClusterAPIReconcileClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIReconcileClusterWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIReconcileClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIReconcileClusterWithResponse), ctx, clusterId)
}

// ExternalClusterAPIRegisterClusterWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIRegisterClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*sdk.ExternalClusterAPIRegisterClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIRegisterClusterWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIRegisterClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIRegisterClusterWithBodyWithResponse indicates an expected call of ExternalClusterAPIRegisterClusterWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIRegisterClusterWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIRegisterClusterWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIRegisterClusterWithBodyWithResponse), ctx, contentType, body)
}

// ExternalClusterAPIRegisterClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIRegisterClusterWithResponse(ctx context.Context, body sdk.ExternalClusterAPIRegisterClusterJSONRequestBody) (*sdk.ExternalClusterAPIRegisterClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIRegisterClusterWithResponse", ctx, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIRegisterClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIRegisterClusterWithResponse indicates an expected call of ExternalClusterAPIRegisterClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIRegisterClusterWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIRegisterClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIRegisterClusterWithResponse), ctx, body)
}

// ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.ExternalClusterAPIUpdateClusterTagsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIUpdateClusterTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse indicates an expected call of ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// ExternalClusterAPIUpdateClusterTagsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIUpdateClusterTagsWithResponse(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIUpdateClusterTagsJSONRequestBody) (*sdk.ExternalClusterAPIUpdateClusterTagsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIUpdateClusterTagsWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIUpdateClusterTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIUpdateClusterTagsWithResponse indicates an expected call of ExternalClusterAPIUpdateClusterTagsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIUpdateClusterTagsWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIUpdateClusterTagsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIUpdateClusterTagsWithResponse), ctx, clusterId, body)
}

// ExternalClusterAPIUpdateClusterWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIUpdateClusterWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.ExternalClusterAPIUpdateClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIUpdateClusterWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIUpdateClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIUpdateClusterWithBodyWithResponse indicates an expected call of ExternalClusterAPIUpdateClusterWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIUpdateClusterWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIUpdateClusterWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIUpdateClusterWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// ExternalClusterAPIUpdateClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIUpdateClusterWithResponse(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIUpdateClusterJSONRequestBody) (*sdk.ExternalClusterAPIUpdateClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIUpdateClusterWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIUpdateClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIUpdateClusterWithResponse indicates an expected call of ExternalClusterAPIUpdateClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIUpdateClusterWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIUpdateClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIUpdateClusterWithResponse), ctx, clusterId, body)
}

// InventoryAPIAddReservationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIAddReservationWithBodyWithResponse(ctx context.Context, organizationId, contentType string, body io.Reader) (*sdk.InventoryAPIAddReservationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIAddReservationWithBodyWithResponse", ctx, organizationId, contentType, body)
	ret0, _ := ret[0].(*sdk.InventoryAPIAddReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIAddReservationWithBodyWithResponse indicates an expected call of InventoryAPIAddReservationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIAddReservationWithBodyWithResponse(ctx, organizationId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIAddReservationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIAddReservationWithBodyWithResponse), ctx, organizationId, contentType, body)
}

// InventoryAPIAddReservationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIAddReservationWithResponse(ctx context.Context, organizationId string, body sdk.InventoryAPIAddReservationJSONRequestBody) (*sdk.InventoryAPIAddReservationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIAddReservationWithResponse", ctx, organizationId, body)
	ret0, _ := ret[0].(*sdk.InventoryAPIAddReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIAddReservationWithResponse indicates an expected call of InventoryAPIAddReservationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIAddReservationWithResponse(ctx, organizationId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIAddReservationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIAddReservationWithResponse), ctx, organizationId, body)
}

// InventoryAPIDeleteReservationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIDeleteReservationWithResponse(ctx context.Context, organizationId, reservationId string) (*sdk.InventoryAPIDeleteReservationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIDeleteReservationWithResponse", ctx, organizationId, reservationId)
	ret0, _ := ret[0].(*sdk.InventoryAPIDeleteReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIDeleteReservationWithResponse indicates an expected call of InventoryAPIDeleteReservationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIDeleteReservationWithResponse(ctx, organizationId, reservationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIDeleteReservationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIDeleteReservationWithResponse), ctx, organizationId, reservationId)
}

// InventoryAPIGetOrganizationReservationsBalanceWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIGetOrganizationReservationsBalanceWithResponse(ctx context.Context) (*sdk.InventoryAPIGetOrganizationReservationsBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIGetOrganizationReservationsBalanceWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.InventoryAPIGetOrganizationReservationsBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIGetOrganizationReservationsBalanceWithResponse indicates an expected call of InventoryAPIGetOrganizationReservationsBalanceWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIGetOrganizationReservationsBalanceWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIGetOrganizationReservationsBalanceWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIGetOrganizationReservationsBalanceWithResponse), ctx)
}

// InventoryAPIGetOrganizationResourceUsageWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIGetOrganizationResourceUsageWithResponse(ctx context.Context) (*sdk.InventoryAPIGetOrganizationResourceUsageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIGetOrganizationResourceUsageWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.InventoryAPIGetOrganizationResourceUsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIGetOrganizationResourceUsageWithResponse indicates an expected call of InventoryAPIGetOrganizationResourceUsageWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIGetOrganizationResourceUsageWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIGetOrganizationResourceUsageWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIGetOrganizationResourceUsageWithResponse), ctx)
}

// InventoryAPIGetReservationsBalanceWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIGetReservationsBalanceWithResponse(ctx context.Context, organizationId string) (*sdk.InventoryAPIGetReservationsBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIGetReservationsBalanceWithResponse", ctx, organizationId)
	ret0, _ := ret[0].(*sdk.InventoryAPIGetReservationsBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIGetReservationsBalanceWithResponse indicates an expected call of InventoryAPIGetReservationsBalanceWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIGetReservationsBalanceWithResponse(ctx, organizationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIGetReservationsBalanceWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIGetReservationsBalanceWithResponse), ctx, organizationId)
}

// InventoryAPIGetReservationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIGetReservationsWithResponse(ctx context.Context, organizationId string) (*sdk.InventoryAPIGetReservationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIGetReservationsWithResponse", ctx, organizationId)
	ret0, _ := ret[0].(*sdk.InventoryAPIGetReservationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIGetReservationsWithResponse indicates an expected call of InventoryAPIGetReservationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIGetReservationsWithResponse(ctx, organizationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIGetReservationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIGetReservationsWithResponse), ctx, organizationId)
}

// InventoryAPIOverwriteReservationsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIOverwriteReservationsWithBodyWithResponse(ctx context.Context, organizationId, contentType string, body io.Reader) (*sdk.InventoryAPIOverwriteReservationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIOverwriteReservationsWithBodyWithResponse", ctx, organizationId, contentType, body)
	ret0, _ := ret[0].(*sdk.InventoryAPIOverwriteReservationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIOverwriteReservationsWithBodyWithResponse indicates an expected call of InventoryAPIOverwriteReservationsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIOverwriteReservationsWithBodyWithResponse(ctx, organizationId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIOverwriteReservationsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIOverwriteReservationsWithBodyWithResponse), ctx, organizationId, contentType, body)
}

// InventoryAPIOverwriteReservationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIOverwriteReservationsWithResponse(ctx context.Context, organizationId string, body sdk.InventoryAPIOverwriteReservationsJSONRequestBody) (*sdk.InventoryAPIOverwriteReservationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIOverwriteReservationsWithResponse", ctx, organizationId, body)
	ret0, _ := ret[0].(*sdk.InventoryAPIOverwriteReservationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIOverwriteReservationsWithResponse indicates an expected call of InventoryAPIOverwriteReservationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIOverwriteReservationsWithResponse(ctx, organizationId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIOverwriteReservationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIOverwriteReservationsWithResponse), ctx, organizationId, body)
}

// InventoryAPISyncClusterResourcesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPISyncClusterResourcesWithResponse(ctx context.Context, organizationId, clusterId string) (*sdk.InventoryAPISyncClusterResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPISyncClusterResourcesWithResponse", ctx, organizationId, clusterId)
	ret0, _ := ret[0].(*sdk.InventoryAPISyncClusterResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPISyncClusterResourcesWithResponse indicates an expected call of InventoryAPISyncClusterResourcesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPISyncClusterResourcesWithResponse(ctx, organizationId, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPISyncClusterResourcesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPISyncClusterResourcesWithResponse), ctx, organizationId, clusterId)
}

// NodeConfigurationAPICreateConfigurationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPICreateConfigurationWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.NodeConfigurationAPICreateConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPICreateConfigurationWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPICreateConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPICreateConfigurationWithBodyWithResponse indicates an expected call of NodeConfigurationAPICreateConfigurationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPICreateConfigurationWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPICreateConfigurationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPICreateConfigurationWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// NodeConfigurationAPICreateConfigurationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPICreateConfigurationWithResponse(ctx context.Context, clusterId string, body sdk.NodeConfigurationAPICreateConfigurationJSONRequestBody) (*sdk.NodeConfigurationAPICreateConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPICreateConfigurationWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPICreateConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPICreateConfigurationWithResponse indicates an expected call of NodeConfigurationAPICreateConfigurationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPICreateConfigurationWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPICreateConfigurationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPICreateConfigurationWithResponse), ctx, clusterId, body)
}

// NodeConfigurationAPIDeleteConfigurationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPIDeleteConfigurationWithResponse(ctx context.Context, clusterId, id string) (*sdk.NodeConfigurationAPIDeleteConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPIDeleteConfigurationWithResponse", ctx, clusterId, id)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPIDeleteConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIDeleteConfigurationWithResponse indicates an expected call of NodeConfigurationAPIDeleteConfigurationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPIDeleteConfigurationWithResponse(ctx, clusterId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIDeleteConfigurationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPIDeleteConfigurationWithResponse), ctx, clusterId, id)
}

// NodeConfigurationAPIGetConfigurationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPIGetConfigurationWithResponse(ctx context.Context, clusterId, id string) (*sdk.NodeConfigurationAPIGetConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPIGetConfigurationWithResponse", ctx, clusterId, id)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPIGetConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIGetConfigurationWithResponse indicates an expected call of NodeConfigurationAPIGetConfigurationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPIGetConfigurationWithResponse(ctx, clusterId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIGetConfigurationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPIGetConfigurationWithResponse), ctx, clusterId, id)
}

// NodeConfigurationAPIGetSuggestedConfigurationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPIGetSuggestedConfigurationWithResponse(ctx context.Context, clusterId string) (*sdk.NodeConfigurationAPIGetSuggestedConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPIGetSuggestedConfigurationWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPIGetSuggestedConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIGetSuggestedConfigurationWithResponse indicates an expected call of NodeConfigurationAPIGetSuggestedConfigurationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPIGetSuggestedConfigurationWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIGetSuggestedConfigurationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPIGetSuggestedConfigurationWithResponse), ctx, clusterId)
}

// NodeConfigurationAPIListConfigurationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPIListConfigurationsWithResponse(ctx context.Context, clusterId string) (*sdk.NodeConfigurationAPIListConfigurationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPIListConfigurationsWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPIListConfigurationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIListConfigurationsWithResponse indicates an expected call of NodeConfigurationAPIListConfigurationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPIListConfigurationsWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIListConfigurationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPIListConfigurationsWithResponse), ctx, clusterId)
}

// NodeConfigurationAPIListMaxPodsPresetsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPIListMaxPodsPresetsWithResponse(ctx context.Context) (*sdk.NodeConfigurationAPIListMaxPodsPresetsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPIListMaxPodsPresetsWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPIListMaxPodsPresetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIListMaxPodsPresetsWithResponse indicates an expected call of NodeConfigurationAPIListMaxPodsPresetsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPIListMaxPodsPresetsWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIListMaxPodsPresetsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPIListMaxPodsPresetsWithResponse), ctx)
}

// NodeConfigurationAPISetDefaultWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPISetDefaultWithResponse(ctx context.Context, clusterId, id string) (*sdk.NodeConfigurationAPISetDefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPISetDefaultWithResponse", ctx, clusterId, id)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPISetDefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPISetDefaultWithResponse indicates an expected call of NodeConfigurationAPISetDefaultWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPISetDefaultWithResponse(ctx, clusterId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPISetDefaultWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPISetDefaultWithResponse), ctx, clusterId, id)
}

// NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse(ctx context.Context, clusterId, id, contentType string, body io.Reader) (*sdk.NodeConfigurationAPIUpdateConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse", ctx, clusterId, id, contentType, body)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPIUpdateConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse indicates an expected call of NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse(ctx, clusterId, id, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse), ctx, clusterId, id, contentType, body)
}

// NodeConfigurationAPIUpdateConfigurationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPIUpdateConfigurationWithResponse(ctx context.Context, clusterId, id string, body sdk.NodeConfigurationAPIUpdateConfigurationJSONRequestBody) (*sdk.NodeConfigurationAPIUpdateConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPIUpdateConfigurationWithResponse", ctx, clusterId, id, body)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPIUpdateConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIUpdateConfigurationWithResponse indicates an expected call of NodeConfigurationAPIUpdateConfigurationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPIUpdateConfigurationWithResponse(ctx, clusterId, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIUpdateConfigurationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPIUpdateConfigurationWithResponse), ctx, clusterId, id, body)
}

// NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.NodeTemplatesAPICreateNodeTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPICreateNodeTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse indicates an expected call of NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// NodeTemplatesAPICreateNodeTemplateWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPICreateNodeTemplateWithResponse(ctx context.Context, clusterId string, body sdk.NodeTemplatesAPICreateNodeTemplateJSONRequestBody) (*sdk.NodeTemplatesAPICreateNodeTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPICreateNodeTemplateWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPICreateNodeTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPICreateNodeTemplateWithResponse indicates an expected call of NodeTemplatesAPICreateNodeTemplateWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPICreateNodeTemplateWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPICreateNodeTemplateWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPICreateNodeTemplateWithResponse), ctx, clusterId, body)
}

// NodeTemplatesAPIDeleteNodeTemplateWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPIDeleteNodeTemplateWithResponse(ctx context.Context, clusterId, nodeTemplateName string) (*sdk.NodeTemplatesAPIDeleteNodeTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPIDeleteNodeTemplateWithResponse", ctx, clusterId, nodeTemplateName)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPIDeleteNodeTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIDeleteNodeTemplateWithResponse indicates an expected call of NodeTemplatesAPIDeleteNodeTemplateWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPIDeleteNodeTemplateWithResponse(ctx, clusterId, nodeTemplateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIDeleteNodeTemplateWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPIDeleteNodeTemplateWithResponse), ctx, clusterId, nodeTemplateName)
}

// NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.NodeTemplatesAPIFilterInstanceTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPIFilterInstanceTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse indicates an expected call of NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// NodeTemplatesAPIFilterInstanceTypesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPIFilterInstanceTypesWithResponse(ctx context.Context, clusterId string, body sdk.NodeTemplatesAPIFilterInstanceTypesJSONRequestBody) (*sdk.NodeTemplatesAPIFilterInstanceTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPIFilterInstanceTypesWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPIFilterInstanceTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIFilterInstanceTypesWithResponse indicates an expected call of NodeTemplatesAPIFilterInstanceTypesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPIFilterInstanceTypesWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIFilterInstanceTypesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPIFilterInstanceTypesWithResponse), ctx, clusterId, body)
}

// NodeTemplatesAPIGenerateNodeTemplatesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPIGenerateNodeTemplatesWithResponse(ctx context.Context, clusterId string) (*sdk.NodeTemplatesAPIGenerateNodeTemplatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPIGenerateNodeTemplatesWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPIGenerateNodeTemplatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIGenerateNodeTemplatesWithResponse indicates an expected call of NodeTemplatesAPIGenerateNodeTemplatesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPIGenerateNodeTemplatesWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIGenerateNodeTemplatesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPIGenerateNodeTemplatesWithResponse), ctx, clusterId)
}

// NodeTemplatesAPIListNodeTemplatesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPIListNodeTemplatesWithResponse(ctx context.Context, clusterId string, params *sdk.NodeTemplatesAPIListNodeTemplatesParams) (*sdk.NodeTemplatesAPIListNodeTemplatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPIListNodeTemplatesWithResponse", ctx, clusterId, params)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPIListNodeTemplatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIListNodeTemplatesWithResponse indicates an expected call of NodeTemplatesAPIListNodeTemplatesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPIListNodeTemplatesWithResponse(ctx, clusterId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIListNodeTemplatesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPIListNodeTemplatesWithResponse), ctx, clusterId, params)
}

// NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId, nodeTemplateName, contentType string, body io.Reader) (*sdk.NodeTemplatesAPIUpdateNodeTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse", ctx, clusterId, nodeTemplateName, contentType, body)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPIUpdateNodeTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse indicates an expected call of NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse(ctx, clusterId, nodeTemplateName, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse), ctx, clusterId, nodeTemplateName, contentType, body)
}

// NodeTemplatesAPIUpdateNodeTemplateWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPIUpdateNodeTemplateWithResponse(ctx context.Context, clusterId, nodeTemplateName string, body sdk.NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody) (*sdk.NodeTemplatesAPIUpdateNodeTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPIUpdateNodeTemplateWithResponse", ctx, clusterId, nodeTemplateName, body)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPIUpdateNodeTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIUpdateNodeTemplateWithResponse indicates an expected call of NodeTemplatesAPIUpdateNodeTemplateWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPIUpdateNodeTemplateWithResponse(ctx, clusterId, nodeTemplateName, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIUpdateNodeTemplateWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPIUpdateNodeTemplateWithResponse), ctx, clusterId, nodeTemplateName, body)
}

// OperationsAPIGetOperationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OperationsAPIGetOperationWithResponse(ctx context.Context, id string) (*sdk.OperationsAPIGetOperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationsAPIGetOperationWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.OperationsAPIGetOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationsAPIGetOperationWithResponse indicates an expected call of OperationsAPIGetOperationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OperationsAPIGetOperationWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationsAPIGetOperationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OperationsAPIGetOperationWithResponse), ctx, id)
}

// PoliciesAPIGetClusterNodeConstraintsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PoliciesAPIGetClusterNodeConstraintsWithResponse(ctx context.Context, clusterId string) (*sdk.PoliciesAPIGetClusterNodeConstraintsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoliciesAPIGetClusterNodeConstraintsWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.PoliciesAPIGetClusterNodeConstraintsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIGetClusterNodeConstraintsWithResponse indicates an expected call of PoliciesAPIGetClusterNodeConstraintsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PoliciesAPIGetClusterNodeConstraintsWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIGetClusterNodeConstraintsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PoliciesAPIGetClusterNodeConstraintsWithResponse), ctx, clusterId)
}

// PoliciesAPIGetClusterPoliciesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PoliciesAPIGetClusterPoliciesWithResponse(ctx context.Context, clusterId string) (*sdk.PoliciesAPIGetClusterPoliciesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoliciesAPIGetClusterPoliciesWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.PoliciesAPIGetClusterPoliciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIGetClusterPoliciesWithResponse indicates an expected call of PoliciesAPIGetClusterPoliciesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PoliciesAPIGetClusterPoliciesWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIGetClusterPoliciesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PoliciesAPIGetClusterPoliciesWithResponse), ctx, clusterId)
}

// PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.PoliciesAPIUpsertClusterPoliciesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.PoliciesAPIUpsertClusterPoliciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse indicates an expected call of PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// PoliciesAPIUpsertClusterPoliciesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PoliciesAPIUpsertClusterPoliciesWithResponse(ctx context.Context, clusterId string, body sdk.PoliciesAPIUpsertClusterPoliciesJSONRequestBody) (*sdk.PoliciesAPIUpsertClusterPoliciesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoliciesAPIUpsertClusterPoliciesWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.PoliciesAPIUpsertClusterPoliciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIUpsertClusterPoliciesWithResponse indicates an expected call of PoliciesAPIUpsertClusterPoliciesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PoliciesAPIUpsertClusterPoliciesWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIUpsertClusterPoliciesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PoliciesAPIUpsertClusterPoliciesWithResponse), ctx, clusterId, body)
}

// SSOAPICreateSSOConnectionWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SSOAPICreateSSOConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*sdk.SSOAPICreateSSOConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOAPICreateSSOConnectionWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*sdk.SSOAPICreateSSOConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPICreateSSOConnectionWithBodyWithResponse indicates an expected call of SSOAPICreateSSOConnectionWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SSOAPICreateSSOConnectionWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPICreateSSOConnectionWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SSOAPICreateSSOConnectionWithBodyWithResponse), ctx, contentType, body)
}

// SSOAPICreateSSOConnectionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SSOAPICreateSSOConnectionWithResponse(ctx context.Context, body sdk.SSOAPICreateSSOConnectionJSONRequestBody) (*sdk.SSOAPICreateSSOConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOAPICreateSSOConnectionWithResponse", ctx, body)
	ret0, _ := ret[0].(*sdk.SSOAPICreateSSOConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPICreateSSOConnectionWithResponse indicates an expected call of SSOAPICreateSSOConnectionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SSOAPICreateSSOConnectionWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPICreateSSOConnectionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SSOAPICreateSSOConnectionWithResponse), ctx, body)
}

// SSOAPIDeleteSSOConnectionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SSOAPIDeleteSSOConnectionWithResponse(ctx context.Context, id string) (*sdk.SSOAPIDeleteSSOConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOAPIDeleteSSOConnectionWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.SSOAPIDeleteSSOConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIDeleteSSOConnectionWithResponse indicates an expected call of SSOAPIDeleteSSOConnectionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SSOAPIDeleteSSOConnectionWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIDeleteSSOConnectionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SSOAPIDeleteSSOConnectionWithResponse), ctx, id)
}

// SSOAPIGetSSOConnectionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SSOAPIGetSSOConnectionWithResponse(ctx context.Context, id string) (*sdk.SSOAPIGetSSOConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOAPIGetSSOConnectionWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.SSOAPIGetSSOConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIGetSSOConnectionWithResponse indicates an expected call of SSOAPIGetSSOConnectionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SSOAPIGetSSOConnectionWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIGetSSOConnectionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SSOAPIGetSSOConnectionWithResponse), ctx, id)
}

// SSOAPIListSSOConnectionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SSOAPIListSSOConnectionsWithResponse(ctx context.Context) (*sdk.SSOAPIListSSOConnectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOAPIListSSOConnectionsWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.SSOAPIListSSOConnectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIListSSOConnectionsWithResponse indicates an expected call of SSOAPIListSSOConnectionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SSOAPIListSSOConnectionsWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIListSSOConnectionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SSOAPIListSSOConnectionsWithResponse), ctx)
}

// SSOAPIUpdateSSOConnectionWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SSOAPIUpdateSSOConnectionWithBodyWithResponse(ctx context.Context, id, contentType string, body io.Reader) (*sdk.SSOAPIUpdateSSOConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOAPIUpdateSSOConnectionWithBodyWithResponse", ctx, id, contentType, body)
	ret0, _ := ret[0].(*sdk.SSOAPIUpdateSSOConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIUpdateSSOConnectionWithBodyWithResponse indicates an expected call of SSOAPIUpdateSSOConnectionWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SSOAPIUpdateSSOConnectionWithBodyWithResponse(ctx, id, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIUpdateSSOConnectionWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SSOAPIUpdateSSOConnectionWithBodyWithResponse), ctx, id, contentType, body)
}

// SSOAPIUpdateSSOConnectionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SSOAPIUpdateSSOConnectionWithResponse(ctx context.Context, id string, body sdk.SSOAPIUpdateSSOConnectionJSONRequestBody) (*sdk.SSOAPIUpdateSSOConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOAPIUpdateSSOConnectionWithResponse", ctx, id, body)
	ret0, _ := ret[0].(*sdk.SSOAPIUpdateSSOConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIUpdateSSOConnectionWithResponse indicates an expected call of SSOAPIUpdateSSOConnectionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SSOAPIUpdateSSOConnectionWithResponse(ctx, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIUpdateSSOConnectionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SSOAPIUpdateSSOConnectionWithResponse), ctx, id, body)
}

// ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.ScheduledRebalancingAPICreateRebalancingJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPICreateRebalancingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse indicates an expected call of ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// ScheduledRebalancingAPICreateRebalancingJobWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPICreateRebalancingJobWithResponse(ctx context.Context, clusterId string, body sdk.ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody) (*sdk.ScheduledRebalancingAPICreateRebalancingJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingJobWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPICreateRebalancingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingJobWithResponse indicates an expected call of ScheduledRebalancingAPICreateRebalancingJobWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingJobWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingJobWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPICreateRebalancingJobWithResponse), ctx, clusterId, body)
}

// ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*sdk.ScheduledRebalancingAPICreateRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPICreateRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse indicates an expected call of ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse), ctx, contentType, body)
}

// ScheduledRebalancingAPICreateRebalancingScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPICreateRebalancingScheduleWithResponse(ctx context.Context, body sdk.ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody) (*sdk.ScheduledRebalancingAPICreateRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingScheduleWithResponse", ctx, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPICreateRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingScheduleWithResponse indicates an expected call of ScheduledRebalancingAPICreateRebalancingScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingScheduleWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPICreateRebalancingScheduleWithResponse), ctx, body)
}

// ScheduledRebalancingAPIDeleteRebalancingJobWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIDeleteRebalancingJobWithResponse(ctx context.Context, clusterId, id string) (*sdk.ScheduledRebalancingAPIDeleteRebalancingJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIDeleteRebalancingJobWithResponse", ctx, clusterId, id)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIDeleteRebalancingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIDeleteRebalancingJobWithResponse indicates an expected call of ScheduledRebalancingAPIDeleteRebalancingJobWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIDeleteRebalancingJobWithResponse(ctx, clusterId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIDeleteRebalancingJobWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIDeleteRebalancingJobWithResponse), ctx, clusterId, id)
}

// ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse(ctx context.Context, id string) (*sdk.ScheduledRebalancingAPIDeleteRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIDeleteRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse indicates an expected call of ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse), ctx, id)
}

// ScheduledRebalancingAPIGetRebalancingJobWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIGetRebalancingJobWithResponse(ctx context.Context, clusterId, id string) (*sdk.ScheduledRebalancingAPIGetRebalancingJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIGetRebalancingJobWithResponse", ctx, clusterId, id)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIGetRebalancingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIGetRebalancingJobWithResponse indicates an expected call of ScheduledRebalancingAPIGetRebalancingJobWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIGetRebalancingJobWithResponse(ctx, clusterId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIGetRebalancingJobWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIGetRebalancingJobWithResponse), ctx, clusterId, id)
}

// ScheduledRebalancingAPIGetRebalancingScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIGetRebalancingScheduleWithResponse(ctx context.Context, id string) (*sdk.ScheduledRebalancingAPIGetRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIGetRebalancingScheduleWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIGetRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIGetRebalancingScheduleWithResponse indicates an expected call of ScheduledRebalancingAPIGetRebalancingScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIGetRebalancingScheduleWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIGetRebalancingScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIGetRebalancingScheduleWithResponse), ctx, id)
}

// ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse(ctx context.Context) (*sdk.ScheduledRebalancingAPIListAvailableRebalancingTZResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIListAvailableRebalancingTZResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse indicates an expected call of ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse), ctx)
}

// ScheduledRebalancingAPIListRebalancingJobsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIListRebalancingJobsWithResponse(ctx context.Context, clusterId string, params *sdk.ScheduledRebalancingAPIListRebalancingJobsParams) (*sdk.ScheduledRebalancingAPIListRebalancingJobsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIListRebalancingJobsWithResponse", ctx, clusterId, params)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIListRebalancingJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIListRebalancingJobsWithResponse indicates an expected call of ScheduledRebalancingAPIListRebalancingJobsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIListRebalancingJobsWithResponse(ctx, clusterId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIListRebalancingJobsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIListRebalancingJobsWithResponse), ctx, clusterId, params)
}

// ScheduledRebalancingAPIListRebalancingSchedulesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIListRebalancingSchedulesWithResponse(ctx context.Context) (*sdk.ScheduledRebalancingAPIListRebalancingSchedulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIListRebalancingSchedulesWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIListRebalancingSchedulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIListRebalancingSchedulesWithResponse indicates an expected call of ScheduledRebalancingAPIListRebalancingSchedulesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIListRebalancingSchedulesWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIListRebalancingSchedulesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIListRebalancingSchedulesWithResponse), ctx)
}

// ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.ScheduledRebalancingAPIPreviewRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIPreviewRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse indicates an expected call of ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse(ctx context.Context, clusterId string, body sdk.ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody) (*sdk.ScheduledRebalancingAPIPreviewRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIPreviewRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse indicates an expected call of ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse), ctx, clusterId, body)
}

// ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse(ctx context.Context, clusterId, id, contentType string, body io.Reader) (*sdk.ScheduledRebalancingAPIUpdateRebalancingJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse", ctx, clusterId, id, contentType, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIUpdateRebalancingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse(ctx, clusterId, id, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse), ctx, clusterId, id, contentType, body)
}

// ScheduledRebalancingAPIUpdateRebalancingJobWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIUpdateRebalancingJobWithResponse(ctx context.Context, clusterId, id string, body sdk.ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody) (*sdk.ScheduledRebalancingAPIUpdateRebalancingJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingJobWithResponse", ctx, clusterId, id, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIUpdateRebalancingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingJobWithResponse indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingJobWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingJobWithResponse(ctx, clusterId, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingJobWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingJobWithResponse), ctx, clusterId, id, body)
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse(ctx context.Context, params *sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleParams, contentType string, body io.Reader) (*sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse", ctx, params, contentType, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse(ctx, params, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse), ctx, params, contentType, body)
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse(ctx context.Context, params *sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleParams, body sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody) (*sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse", ctx, params, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse(ctx, params, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse), ctx, params, body)
}

// UsersAPIAddUserToOrganizationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIAddUserToOrganizationWithBodyWithResponse(ctx context.Context, organizationId, contentType string, body io.Reader) (*sdk.UsersAPIAddUserToOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIAddUserToOrganizationWithBodyWithResponse", ctx, organizationId, contentType, body)
	ret0, _ := ret[0].(*sdk.UsersAPIAddUserToOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIAddUserToOrganizationWithBodyWithResponse indicates an expected call of UsersAPIAddUserToOrganizationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIAddUserToOrganizationWithBodyWithResponse(ctx, organizationId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIAddUserToOrganizationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIAddUserToOrganizationWithBodyWithResponse), ctx, organizationId, contentType, body)
}

// UsersAPIAddUserToOrganizationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIAddUserToOrganizationWithResponse(ctx context.Context, organizationId string, body sdk.UsersAPIAddUserToOrganizationJSONRequestBody) (*sdk.UsersAPIAddUserToOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIAddUserToOrganizationWithResponse", ctx, organizationId, body)
	ret0, _ := ret[0].(*sdk.UsersAPIAddUserToOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIAddUserToOrganizationWithResponse indicates an expected call of UsersAPIAddUserToOrganizationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIAddUserToOrganizationWithResponse(ctx, organizationId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIAddUserToOrganizationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIAddUserToOrganizationWithResponse), ctx, organizationId, body)
}

// UsersAPIClaimInvitationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIClaimInvitationWithBodyWithResponse(ctx context.Context, invitationId, contentType string, body io.Reader) (*sdk.UsersAPIClaimInvitationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIClaimInvitationWithBodyWithResponse", ctx, invitationId, contentType, body)
	ret0, _ := ret[0].(*sdk.UsersAPIClaimInvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIClaimInvitationWithBodyWithResponse indicates an expected call of UsersAPIClaimInvitationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIClaimInvitationWithBodyWithResponse(ctx, invitationId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIClaimInvitationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIClaimInvitationWithBodyWithResponse), ctx, invitationId, contentType, body)
}

// UsersAPIClaimInvitationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIClaimInvitationWithResponse(ctx context.Context, invitationId string, body sdk.UsersAPIClaimInvitationJSONRequestBody) (*sdk.UsersAPIClaimInvitationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIClaimInvitationWithResponse", ctx, invitationId, body)
	ret0, _ := ret[0].(*sdk.UsersAPIClaimInvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIClaimInvitationWithResponse indicates an expected call of UsersAPIClaimInvitationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIClaimInvitationWithResponse(ctx, invitationId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIClaimInvitationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIClaimInvitationWithResponse), ctx, invitationId, body)
}

// UsersAPICreateInvitationsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPICreateInvitationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*sdk.UsersAPICreateInvitationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPICreateInvitationsWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*sdk.UsersAPICreateInvitationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPICreateInvitationsWithBodyWithResponse indicates an expected call of UsersAPICreateInvitationsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPICreateInvitationsWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPICreateInvitationsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPICreateInvitationsWithBodyWithResponse), ctx, contentType, body)
}

// UsersAPICreateInvitationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPICreateInvitationsWithResponse(ctx context.Context, body sdk.UsersAPICreateInvitationsJSONRequestBody) (*sdk.UsersAPICreateInvitationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPICreateInvitationsWithResponse", ctx, body)
	ret0, _ := ret[0].(*sdk.UsersAPICreateInvitationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPICreateInvitationsWithResponse indicates an expected call of UsersAPICreateInvitationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPICreateInvitationsWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPICreateInvitationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPICreateInvitationsWithResponse), ctx, body)
}

// UsersAPICreateOrganizationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPICreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*sdk.UsersAPICreateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPICreateOrganizationWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*sdk.UsersAPICreateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPICreateOrganizationWithBodyWithResponse indicates an expected call of UsersAPICreateOrganizationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPICreateOrganizationWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPICreateOrganizationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPICreateOrganizationWithBodyWithResponse), ctx, contentType, body)
}

// UsersAPICreateOrganizationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPICreateOrganizationWithResponse(ctx context.Context, body sdk.UsersAPICreateOrganizationJSONRequestBody) (*sdk.UsersAPICreateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPICreateOrganizationWithResponse", ctx, body)
	ret0, _ := ret[0].(*sdk.UsersAPICreateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPICreateOrganizationWithResponse indicates an expected call of UsersAPICreateOrganizationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPICreateOrganizationWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPICreateOrganizationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPICreateOrganizationWithResponse), ctx, body)
}

// UsersAPICurrentUserProfileWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPICurrentUserProfileWithResponse(ctx context.Context) (*sdk.UsersAPICurrentUserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPICurrentUserProfileWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.UsersAPICurrentUserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPICurrentUserProfileWithResponse indicates an expected call of UsersAPICurrentUserProfileWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPICurrentUserProfileWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPICurrentUserProfileWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPICurrentUserProfileWithResponse), ctx)
}

// UsersAPIDeleteInvitationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIDeleteInvitationWithResponse(ctx context.Context, id string) (*sdk.UsersAPIDeleteInvitationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIDeleteInvitationWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.UsersAPIDeleteInvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIDeleteInvitationWithResponse indicates an expected call of UsersAPIDeleteInvitationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIDeleteInvitationWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIDeleteInvitationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIDeleteInvitationWithResponse), ctx, id)
}

// UsersAPIDeleteOrganizationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIDeleteOrganizationWithResponse(ctx context.Context, id string) (*sdk.UsersAPIDeleteOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIDeleteOrganizationWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.UsersAPIDeleteOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIDeleteOrganizationWithResponse indicates an expected call of UsersAPIDeleteOrganizationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIDeleteOrganizationWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIDeleteOrganizationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIDeleteOrganizationWithResponse), ctx, id)
}

// UsersAPIEditOrganizationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIEditOrganizationWithBodyWithResponse(ctx context.Context, id, contentType string, body io.Reader) (*sdk.UsersAPIEditOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIEditOrganizationWithBodyWithResponse", ctx, id, contentType, body)
	ret0, _ := ret[0].(*sdk.UsersAPIEditOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIEditOrganizationWithBodyWithResponse indicates an expected call of UsersAPIEditOrganizationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIEditOrganizationWithBodyWithResponse(ctx, id, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIEditOrganizationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIEditOrganizationWithBodyWithResponse), ctx, id, contentType, body)
}

// UsersAPIEditOrganizationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIEditOrganizationWithResponse(ctx context.Context, id string, body sdk.UsersAPIEditOrganizationJSONRequestBody) (*sdk.UsersAPIEditOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIEditOrganizationWithResponse", ctx, id, body)
	ret0, _ := ret[0].(*sdk.UsersAPIEditOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIEditOrganizationWithResponse indicates an expected call of UsersAPIEditOrganizationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIEditOrganizationWithResponse(ctx, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIEditOrganizationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIEditOrganizationWithResponse), ctx, id, body)
}

// UsersAPIGetOrganizationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIGetOrganizationWithResponse(ctx context.Context, id string) (*sdk.UsersAPIGetOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIGetOrganizationWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.UsersAPIGetOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIGetOrganizationWithResponse indicates an expected call of UsersAPIGetOrganizationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIGetOrganizationWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIGetOrganizationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIGetOrganizationWithResponse), ctx, id)
}

// UsersAPIListInvitationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIListInvitationsWithResponse(ctx context.Context, params *sdk.UsersAPIListInvitationsParams) (*sdk.UsersAPIListInvitationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIListInvitationsWithResponse", ctx, params)
	ret0, _ := ret[0].(*sdk.UsersAPIListInvitationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIListInvitationsWithResponse indicates an expected call of UsersAPIListInvitationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIListInvitationsWithResponse(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIListInvitationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIListInvitationsWithResponse), ctx, params)
}

// UsersAPIListOrganizationUsersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIListOrganizationUsersWithResponse(ctx context.Context, organizationId string) (*sdk.UsersAPIListOrganizationUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIListOrganizationUsersWithResponse", ctx, organizationId)
	ret0, _ := ret[0].(*sdk.UsersAPIListOrganizationUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIListOrganizationUsersWithResponse indicates an expected call of UsersAPIListOrganizationUsersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIListOrganizationUsersWithResponse(ctx, organizationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIListOrganizationUsersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIListOrganizationUsersWithResponse), ctx, organizationId)
}

// UsersAPIListOrganizationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIListOrganizationsWithResponse(ctx context.Context, params *sdk.UsersAPIListOrganizationsParams) (*sdk.UsersAPIListOrganizationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIListOrganizationsWithResponse", ctx, params)
	ret0, _ := ret[0].(*sdk.UsersAPIListOrganizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIListOrganizationsWithResponse indicates an expected call of UsersAPIListOrganizationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIListOrganizationsWithResponse(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIListOrganizationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIListOrganizationsWithResponse), ctx, params)
}

// UsersAPIRemoveOrganizationUsersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIRemoveOrganizationUsersWithResponse(ctx context.Context, organizationId string, params *sdk.UsersAPIRemoveOrganizationUsersParams) (*sdk.UsersAPIRemoveOrganizationUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIRemoveOrganizationUsersWithResponse", ctx, organizationId, params)
	ret0, _ := ret[0].(*sdk.UsersAPIRemoveOrganizationUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIRemoveOrganizationUsersWithResponse indicates an expected call of UsersAPIRemoveOrganizationUsersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIRemoveOrganizationUsersWithResponse(ctx, organizationId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIRemoveOrganizationUsersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIRemoveOrganizationUsersWithResponse), ctx, organizationId, params)
}

// UsersAPIRemoveUserFromOrganizationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIRemoveUserFromOrganizationWithResponse(ctx context.Context, organizationId, userId string) (*sdk.UsersAPIRemoveUserFromOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIRemoveUserFromOrganizationWithResponse", ctx, organizationId, userId)
	ret0, _ := ret[0].(*sdk.UsersAPIRemoveUserFromOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIRemoveUserFromOrganizationWithResponse indicates an expected call of UsersAPIRemoveUserFromOrganizationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIRemoveUserFromOrganizationWithResponse(ctx, organizationId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIRemoveUserFromOrganizationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIRemoveUserFromOrganizationWithResponse), ctx, organizationId, userId)
}

// UsersAPIUpdateCurrentUserProfileWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIUpdateCurrentUserProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*sdk.UsersAPIUpdateCurrentUserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIUpdateCurrentUserProfileWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*sdk.UsersAPIUpdateCurrentUserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIUpdateCurrentUserProfileWithBodyWithResponse indicates an expected call of UsersAPIUpdateCurrentUserProfileWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIUpdateCurrentUserProfileWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIUpdateCurrentUserProfileWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIUpdateCurrentUserProfileWithBodyWithResponse), ctx, contentType, body)
}

// UsersAPIUpdateCurrentUserProfileWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIUpdateCurrentUserProfileWithResponse(ctx context.Context, body sdk.UsersAPIUpdateCurrentUserProfileJSONRequestBody) (*sdk.UsersAPIUpdateCurrentUserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIUpdateCurrentUserProfileWithResponse", ctx, body)
	ret0, _ := ret[0].(*sdk.UsersAPIUpdateCurrentUserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIUpdateCurrentUserProfileWithResponse indicates an expected call of UsersAPIUpdateCurrentUserProfileWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIUpdateCurrentUserProfileWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIUpdateCurrentUserProfileWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIUpdateCurrentUserProfileWithResponse), ctx, body)
}

// UsersAPIUpdateOrganizationUserWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIUpdateOrganizationUserWithBodyWithResponse(ctx context.Context, organizationId, userId, contentType string, body io.Reader) (*sdk.UsersAPIUpdateOrganizationUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIUpdateOrganizationUserWithBodyWithResponse", ctx, organizationId, userId, contentType, body)
	ret0, _ := ret[0].(*sdk.UsersAPIUpdateOrganizationUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIUpdateOrganizationUserWithBodyWithResponse indicates an expected call of UsersAPIUpdateOrganizationUserWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIUpdateOrganizationUserWithBodyWithResponse(ctx, organizationId, userId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIUpdateOrganizationUserWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIUpdateOrganizationUserWithBodyWithResponse), ctx, organizationId, userId, contentType, body)
}

// UsersAPIUpdateOrganizationUserWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UsersAPIUpdateOrganizationUserWithResponse(ctx context.Context, organizationId, userId string, body sdk.UsersAPIUpdateOrganizationUserJSONRequestBody) (*sdk.UsersAPIUpdateOrganizationUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersAPIUpdateOrganizationUserWithResponse", ctx, organizationId, userId, body)
	ret0, _ := ret[0].(*sdk.UsersAPIUpdateOrganizationUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersAPIUpdateOrganizationUserWithResponse indicates an expected call of UsersAPIUpdateOrganizationUserWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UsersAPIUpdateOrganizationUserWithResponse(ctx, organizationId, userId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersAPIUpdateOrganizationUserWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UsersAPIUpdateOrganizationUserWithResponse), ctx, organizationId, userId, body)
}

// WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse(ctx context.Context, clusterId, policyId, contentType string, body io.Reader) (*sdk.WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse", ctx, clusterId, policyId, contentType, body)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse indicates an expected call of WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse(ctx, clusterId, policyId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse), ctx, clusterId, policyId, contentType, body)
}

// WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithResponse(ctx context.Context, clusterId, policyId string, body sdk.WorkloadOptimizationAPIAssignScalingPolicyWorkloadsJSONRequestBody) (*sdk.WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithResponse", ctx, clusterId, policyId, body)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithResponse indicates an expected call of WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithResponse(ctx, clusterId, policyId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithResponse), ctx, clusterId, policyId, body)
}

// WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse indicates an expected call of WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// WorkloadOptimizationAPICreateWorkloadScalingPolicyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPICreateWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, body sdk.WorkloadOptimizationAPICreateWorkloadScalingPolicyJSONRequestBody) (*sdk.WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPICreateWorkloadScalingPolicyWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPICreateWorkloadScalingPolicyWithResponse indicates an expected call of WorkloadOptimizationAPICreateWorkloadScalingPolicyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPICreateWorkloadScalingPolicyWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPICreateWorkloadScalingPolicyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPICreateWorkloadScalingPolicyWithResponse), ctx, clusterId, body)
}

// WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId, policyId string) (*sdk.WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse", ctx, clusterId, policyId)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse indicates an expected call of WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse(ctx, clusterId, policyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse), ctx, clusterId, policyId)
}

// WorkloadOptimizationAPIGetAgentStatusWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIGetAgentStatusWithResponse(ctx context.Context, clusterId string) (*sdk.WorkloadOptimizationAPIGetAgentStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIGetAgentStatusWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIGetAgentStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIGetAgentStatusWithResponse indicates an expected call of WorkloadOptimizationAPIGetAgentStatusWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIGetAgentStatusWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIGetAgentStatusWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIGetAgentStatusWithResponse), ctx, clusterId)
}

// WorkloadOptimizationAPIGetInstallCmdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIGetInstallCmdWithResponse(ctx context.Context, params *sdk.WorkloadOptimizationAPIGetInstallCmdParams) (*sdk.WorkloadOptimizationAPIGetInstallCmdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIGetInstallCmdWithResponse", ctx, params)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIGetInstallCmdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIGetInstallCmdWithResponse indicates an expected call of WorkloadOptimizationAPIGetInstallCmdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIGetInstallCmdWithResponse(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIGetInstallCmdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIGetInstallCmdWithResponse), ctx, params)
}

// WorkloadOptimizationAPIGetInstallScriptWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIGetInstallScriptWithResponse(ctx context.Context) (*sdk.WorkloadOptimizationAPIGetInstallScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIGetInstallScriptWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIGetInstallScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIGetInstallScriptWithResponse indicates an expected call of WorkloadOptimizationAPIGetInstallScriptWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIGetInstallScriptWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIGetInstallScriptWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIGetInstallScriptWithResponse), ctx)
}

// WorkloadOptimizationAPIGetWorkloadScalingPolicyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIGetWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId, policyId string) (*sdk.WorkloadOptimizationAPIGetWorkloadScalingPolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIGetWorkloadScalingPolicyWithResponse", ctx, clusterId, policyId)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIGetWorkloadScalingPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIGetWorkloadScalingPolicyWithResponse indicates an expected call of WorkloadOptimizationAPIGetWorkloadScalingPolicyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIGetWorkloadScalingPolicyWithResponse(ctx, clusterId, policyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIGetWorkloadScalingPolicyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIGetWorkloadScalingPolicyWithResponse), ctx, clusterId, policyId)
}

// WorkloadOptimizationAPIGetWorkloadWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIGetWorkloadWithResponse(ctx context.Context, clusterId, workloadId string, params *sdk.WorkloadOptimizationAPIGetWorkloadParams) (*sdk.WorkloadOptimizationAPIGetWorkloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIGetWorkloadWithResponse", ctx, clusterId, workloadId, params)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIGetWorkloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIGetWorkloadWithResponse indicates an expected call of WorkloadOptimizationAPIGetWorkloadWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIGetWorkloadWithResponse(ctx, clusterId, workloadId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIGetWorkloadWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIGetWorkloadWithResponse), ctx, clusterId, workloadId, params)
}

// WorkloadOptimizationAPIGetWorkloadsSummaryWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIGetWorkloadsSummaryWithResponse(ctx context.Context, clusterId string) (*sdk.WorkloadOptimizationAPIGetWorkloadsSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIGetWorkloadsSummaryWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIGetWorkloadsSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIGetWorkloadsSummaryWithResponse indicates an expected call of WorkloadOptimizationAPIGetWorkloadsSummaryWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIGetWorkloadsSummaryWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIGetWorkloadsSummaryWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIGetWorkloadsSummaryWithResponse), ctx, clusterId)
}

// WorkloadOptimizationAPIListWorkloadEventsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIListWorkloadEventsWithResponse(ctx context.Context, clusterId string, params *sdk.WorkloadOptimizationAPIListWorkloadEventsParams) (*sdk.WorkloadOptimizationAPIListWorkloadEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIListWorkloadEventsWithResponse", ctx, clusterId, params)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIListWorkloadEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIListWorkloadEventsWithResponse indicates an expected call of WorkloadOptimizationAPIListWorkloadEventsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIListWorkloadEventsWithResponse(ctx, clusterId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIListWorkloadEventsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIListWorkloadEventsWithResponse), ctx, clusterId, params)
}

// WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse(ctx context.Context, clusterId string) (*sdk.WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse indicates an expected call of WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse), ctx, clusterId)
}

// WorkloadOptimizationAPIListWorkloadsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIListWorkloadsWithResponse(ctx context.Context, clusterId string) (*sdk.WorkloadOptimizationAPIListWorkloadsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIListWorkloadsWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIListWorkloadsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIListWorkloadsWithResponse indicates an expected call of WorkloadOptimizationAPIListWorkloadsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIListWorkloadsWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIListWorkloadsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIListWorkloadsWithResponse), ctx, clusterId)
}

// WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse(ctx context.Context, clusterId, policyId, contentType string, body io.Reader) (*sdk.WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse", ctx, clusterId, policyId, contentType, body)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse indicates an expected call of WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse(ctx, clusterId, policyId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse), ctx, clusterId, policyId, contentType, body)
}

// WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId, policyId string, body sdk.WorkloadOptimizationAPIUpdateWorkloadScalingPolicyJSONRequestBody) (*sdk.WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithResponse", ctx, clusterId, policyId, body)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithResponse indicates an expected call of WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithResponse(ctx, clusterId, policyId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithResponse), ctx, clusterId, policyId, body)
}

// WorkloadOptimizationAPIUpdateWorkloadV2WithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIUpdateWorkloadV2WithBodyWithResponse(ctx context.Context, clusterId, workloadId, contentType string, body io.Reader) (*sdk.WorkloadOptimizationAPIUpdateWorkloadV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIUpdateWorkloadV2WithBodyWithResponse", ctx, clusterId, workloadId, contentType, body)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIUpdateWorkloadV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIUpdateWorkloadV2WithBodyWithResponse indicates an expected call of WorkloadOptimizationAPIUpdateWorkloadV2WithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIUpdateWorkloadV2WithBodyWithResponse(ctx, clusterId, workloadId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIUpdateWorkloadV2WithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIUpdateWorkloadV2WithBodyWithResponse), ctx, clusterId, workloadId, contentType, body)
}

// WorkloadOptimizationAPIUpdateWorkloadV2WithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIUpdateWorkloadV2WithResponse(ctx context.Context, clusterId, workloadId string, body sdk.WorkloadOptimizationAPIUpdateWorkloadV2JSONRequestBody) (*sdk.WorkloadOptimizationAPIUpdateWorkloadV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIUpdateWorkloadV2WithResponse", ctx, clusterId, workloadId, body)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIUpdateWorkloadV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIUpdateWorkloadV2WithResponse indicates an expected call of WorkloadOptimizationAPIUpdateWorkloadV2WithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIUpdateWorkloadV2WithResponse(ctx, clusterId, workloadId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIUpdateWorkloadV2WithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIUpdateWorkloadV2WithResponse), ctx, clusterId, workloadId, body)
}

// WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse(ctx context.Context, clusterId, workloadId, contentType string, body io.Reader) (*sdk.WorkloadOptimizationAPIUpdateWorkloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse", ctx, clusterId, workloadId, contentType, body)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIUpdateWorkloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse indicates an expected call of WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse(ctx, clusterId, workloadId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse), ctx, clusterId, workloadId, contentType, body)
}

// WorkloadOptimizationAPIUpdateWorkloadWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) WorkloadOptimizationAPIUpdateWorkloadWithResponse(ctx context.Context, clusterId, workloadId string, body sdk.WorkloadOptimizationAPIUpdateWorkloadJSONRequestBody) (*sdk.WorkloadOptimizationAPIUpdateWorkloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadOptimizationAPIUpdateWorkloadWithResponse", ctx, clusterId, workloadId, body)
	ret0, _ := ret[0].(*sdk.WorkloadOptimizationAPIUpdateWorkloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkloadOptimizationAPIUpdateWorkloadWithResponse indicates an expected call of WorkloadOptimizationAPIUpdateWorkloadWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) WorkloadOptimizationAPIUpdateWorkloadWithResponse(ctx, clusterId, workloadId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadOptimizationAPIUpdateWorkloadWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).WorkloadOptimizationAPIUpdateWorkloadWithResponse), ctx, clusterId, workloadId, body)
}

// MockResponse is a mock of Response interface.
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
}

// MockResponseMockRecorder is the mock recorder for MockResponse.
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance.
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return m.recorder
}

// GetBody mocks base method.
func (m *MockResponse) GetBody() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockResponseMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockResponse)(nil).GetBody))
}

// Status mocks base method.
func (m *MockResponse) Status() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(string)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockResponseMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockResponse)(nil).Status))
}

// StatusCode mocks base method.
func (m *MockResponse) StatusCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// StatusCode indicates an expected call of StatusCode.
func (mr *MockResponseMockRecorder) StatusCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCode", reflect.TypeOf((*MockResponse)(nil).StatusCode))
}
