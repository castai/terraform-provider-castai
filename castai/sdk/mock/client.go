// Code generated by MockGen. DO NOT EDIT.
// Source: client.gen.go

// Package mock_sdk is a generated GoMock package.
package mock_sdk

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	sdk "github.com/castai/terraform-provider-castai/castai/sdk"
	gomock "github.com/golang/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// AuthTokenAPICreateAuthToken mocks base method.
func (m *MockClientInterface) AuthTokenAPICreateAuthToken(ctx context.Context, body sdk.AuthTokenAPICreateAuthTokenJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthTokenAPICreateAuthToken", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPICreateAuthToken indicates an expected call of AuthTokenAPICreateAuthToken.
func (mr *MockClientInterfaceMockRecorder) AuthTokenAPICreateAuthToken(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPICreateAuthToken", reflect.TypeOf((*MockClientInterface)(nil).AuthTokenAPICreateAuthToken), varargs...)
}

// AuthTokenAPICreateAuthTokenWithBody mocks base method.
func (m *MockClientInterface) AuthTokenAPICreateAuthTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthTokenAPICreateAuthTokenWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPICreateAuthTokenWithBody indicates an expected call of AuthTokenAPICreateAuthTokenWithBody.
func (mr *MockClientInterfaceMockRecorder) AuthTokenAPICreateAuthTokenWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPICreateAuthTokenWithBody", reflect.TypeOf((*MockClientInterface)(nil).AuthTokenAPICreateAuthTokenWithBody), varargs...)
}

// AuthTokenAPIDeleteAuthToken mocks base method.
func (m *MockClientInterface) AuthTokenAPIDeleteAuthToken(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthTokenAPIDeleteAuthToken", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIDeleteAuthToken indicates an expected call of AuthTokenAPIDeleteAuthToken.
func (mr *MockClientInterfaceMockRecorder) AuthTokenAPIDeleteAuthToken(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIDeleteAuthToken", reflect.TypeOf((*MockClientInterface)(nil).AuthTokenAPIDeleteAuthToken), varargs...)
}

// AuthTokenAPIGetAuthToken mocks base method.
func (m *MockClientInterface) AuthTokenAPIGetAuthToken(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthTokenAPIGetAuthToken", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIGetAuthToken indicates an expected call of AuthTokenAPIGetAuthToken.
func (mr *MockClientInterfaceMockRecorder) AuthTokenAPIGetAuthToken(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIGetAuthToken", reflect.TypeOf((*MockClientInterface)(nil).AuthTokenAPIGetAuthToken), varargs...)
}

// AuthTokenAPIListAuthTokens mocks base method.
func (m *MockClientInterface) AuthTokenAPIListAuthTokens(ctx context.Context, params *sdk.AuthTokenAPIListAuthTokensParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthTokenAPIListAuthTokens", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIListAuthTokens indicates an expected call of AuthTokenAPIListAuthTokens.
func (mr *MockClientInterfaceMockRecorder) AuthTokenAPIListAuthTokens(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIListAuthTokens", reflect.TypeOf((*MockClientInterface)(nil).AuthTokenAPIListAuthTokens), varargs...)
}

// AuthTokenAPIUpdateAuthToken mocks base method.
func (m *MockClientInterface) AuthTokenAPIUpdateAuthToken(ctx context.Context, id string, body sdk.AuthTokenAPIUpdateAuthTokenJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthTokenAPIUpdateAuthToken", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIUpdateAuthToken indicates an expected call of AuthTokenAPIUpdateAuthToken.
func (mr *MockClientInterfaceMockRecorder) AuthTokenAPIUpdateAuthToken(ctx, id, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIUpdateAuthToken", reflect.TypeOf((*MockClientInterface)(nil).AuthTokenAPIUpdateAuthToken), varargs...)
}

// AuthTokenAPIUpdateAuthTokenWithBody mocks base method.
func (m *MockClientInterface) AuthTokenAPIUpdateAuthTokenWithBody(ctx context.Context, id, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthTokenAPIUpdateAuthTokenWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIUpdateAuthTokenWithBody indicates an expected call of AuthTokenAPIUpdateAuthTokenWithBody.
func (mr *MockClientInterfaceMockRecorder) AuthTokenAPIUpdateAuthTokenWithBody(ctx, id, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIUpdateAuthTokenWithBody", reflect.TypeOf((*MockClientInterface)(nil).AuthTokenAPIUpdateAuthTokenWithBody), varargs...)
}

// ClaimInvitation mocks base method.
func (m *MockClientInterface) ClaimInvitation(ctx context.Context, id string, body sdk.ClaimInvitationJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClaimInvitation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimInvitation indicates an expected call of ClaimInvitation.
func (mr *MockClientInterfaceMockRecorder) ClaimInvitation(ctx, id, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimInvitation", reflect.TypeOf((*MockClientInterface)(nil).ClaimInvitation), varargs...)
}

// ClaimInvitationWithBody mocks base method.
func (m *MockClientInterface) ClaimInvitationWithBody(ctx context.Context, id, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClaimInvitationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimInvitationWithBody indicates an expected call of ClaimInvitationWithBody.
func (mr *MockClientInterfaceMockRecorder) ClaimInvitationWithBody(ctx, id, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimInvitationWithBody", reflect.TypeOf((*MockClientInterface)(nil).ClaimInvitationWithBody), varargs...)
}

// CreateInvitation mocks base method.
func (m *MockClientInterface) CreateInvitation(ctx context.Context, body sdk.CreateInvitationJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInvitation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvitation indicates an expected call of CreateInvitation.
func (mr *MockClientInterfaceMockRecorder) CreateInvitation(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitation", reflect.TypeOf((*MockClientInterface)(nil).CreateInvitation), varargs...)
}

// CreateInvitationWithBody mocks base method.
func (m *MockClientInterface) CreateInvitationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInvitationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvitationWithBody indicates an expected call of CreateInvitationWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateInvitationWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitationWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateInvitationWithBody), varargs...)
}

// CreateOrganization mocks base method.
func (m *MockClientInterface) CreateOrganization(ctx context.Context, body sdk.CreateOrganizationJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrganization", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockClientInterfaceMockRecorder) CreateOrganization(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockClientInterface)(nil).CreateOrganization), varargs...)
}

// CreateOrganizationUser mocks base method.
func (m *MockClientInterface) CreateOrganizationUser(ctx context.Context, id string, body sdk.CreateOrganizationUserJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrganizationUser", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationUser indicates an expected call of CreateOrganizationUser.
func (mr *MockClientInterfaceMockRecorder) CreateOrganizationUser(ctx, id, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationUser", reflect.TypeOf((*MockClientInterface)(nil).CreateOrganizationUser), varargs...)
}

// CreateOrganizationUserWithBody mocks base method.
func (m *MockClientInterface) CreateOrganizationUserWithBody(ctx context.Context, id, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrganizationUserWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationUserWithBody indicates an expected call of CreateOrganizationUserWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateOrganizationUserWithBody(ctx, id, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationUserWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateOrganizationUserWithBody), varargs...)
}

// CreateOrganizationWithBody mocks base method.
func (m *MockClientInterface) CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrganizationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationWithBody indicates an expected call of CreateOrganizationWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateOrganizationWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateOrganizationWithBody), varargs...)
}

// CurrentUserProfile mocks base method.
func (m *MockClientInterface) CurrentUserProfile(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CurrentUserProfile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentUserProfile indicates an expected call of CurrentUserProfile.
func (mr *MockClientInterfaceMockRecorder) CurrentUserProfile(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUserProfile", reflect.TypeOf((*MockClientInterface)(nil).CurrentUserProfile), varargs...)
}

// DeleteInvitation mocks base method.
func (m *MockClientInterface) DeleteInvitation(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteInvitation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitation indicates an expected call of DeleteInvitation.
func (mr *MockClientInterfaceMockRecorder) DeleteInvitation(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitation", reflect.TypeOf((*MockClientInterface)(nil).DeleteInvitation), varargs...)
}

// DeleteOrganization mocks base method.
func (m *MockClientInterface) DeleteOrganization(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOrganization", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockClientInterfaceMockRecorder) DeleteOrganization(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockClientInterface)(nil).DeleteOrganization), varargs...)
}

// DeleteOrganizationUser mocks base method.
func (m *MockClientInterface) DeleteOrganizationUser(ctx context.Context, id, userId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, userId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOrganizationUser", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganizationUser indicates an expected call of DeleteOrganizationUser.
func (mr *MockClientInterfaceMockRecorder) DeleteOrganizationUser(ctx, id, userId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, userId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationUser", reflect.TypeOf((*MockClientInterface)(nil).DeleteOrganizationUser), varargs...)
}

// EvictorAPIGetAdvancedConfig mocks base method.
func (m *MockClientInterface) EvictorAPIGetAdvancedConfig(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvictorAPIGetAdvancedConfig", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictorAPIGetAdvancedConfig indicates an expected call of EvictorAPIGetAdvancedConfig.
func (mr *MockClientInterfaceMockRecorder) EvictorAPIGetAdvancedConfig(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictorAPIGetAdvancedConfig", reflect.TypeOf((*MockClientInterface)(nil).EvictorAPIGetAdvancedConfig), varargs...)
}

// EvictorAPIUpsertAdvancedConfig mocks base method.
func (m *MockClientInterface) EvictorAPIUpsertAdvancedConfig(ctx context.Context, clusterId string, body sdk.EvictorAPIUpsertAdvancedConfigJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvictorAPIUpsertAdvancedConfig", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictorAPIUpsertAdvancedConfig indicates an expected call of EvictorAPIUpsertAdvancedConfig.
func (mr *MockClientInterfaceMockRecorder) EvictorAPIUpsertAdvancedConfig(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictorAPIUpsertAdvancedConfig", reflect.TypeOf((*MockClientInterface)(nil).EvictorAPIUpsertAdvancedConfig), varargs...)
}

// EvictorAPIUpsertAdvancedConfigWithBody mocks base method.
func (m *MockClientInterface) EvictorAPIUpsertAdvancedConfigWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvictorAPIUpsertAdvancedConfigWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictorAPIUpsertAdvancedConfigWithBody indicates an expected call of EvictorAPIUpsertAdvancedConfigWithBody.
func (mr *MockClientInterfaceMockRecorder) EvictorAPIUpsertAdvancedConfigWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictorAPIUpsertAdvancedConfigWithBody", reflect.TypeOf((*MockClientInterface)(nil).EvictorAPIUpsertAdvancedConfigWithBody), varargs...)
}

// ExternalClusterAPIAddNode mocks base method.
func (m *MockClientInterface) ExternalClusterAPIAddNode(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIAddNodeJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIAddNode", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIAddNode indicates an expected call of ExternalClusterAPIAddNode.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIAddNode(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIAddNode", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIAddNode), varargs...)
}

// ExternalClusterAPIAddNodeWithBody mocks base method.
func (m *MockClientInterface) ExternalClusterAPIAddNodeWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIAddNodeWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIAddNodeWithBody indicates an expected call of ExternalClusterAPIAddNodeWithBody.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIAddNodeWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIAddNodeWithBody", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIAddNodeWithBody), varargs...)
}

// ExternalClusterAPICreateAssumeRolePrincipal mocks base method.
func (m *MockClientInterface) ExternalClusterAPICreateAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPICreateAssumeRolePrincipal", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPICreateAssumeRolePrincipal indicates an expected call of ExternalClusterAPICreateAssumeRolePrincipal.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPICreateAssumeRolePrincipal(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPICreateAssumeRolePrincipal", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPICreateAssumeRolePrincipal), varargs...)
}

// ExternalClusterAPICreateClusterToken mocks base method.
func (m *MockClientInterface) ExternalClusterAPICreateClusterToken(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPICreateClusterToken", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPICreateClusterToken indicates an expected call of ExternalClusterAPICreateClusterToken.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPICreateClusterToken(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPICreateClusterToken", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPICreateClusterToken), varargs...)
}

// ExternalClusterAPIDeleteAssumeRolePrincipal mocks base method.
func (m *MockClientInterface) ExternalClusterAPIDeleteAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIDeleteAssumeRolePrincipal", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDeleteAssumeRolePrincipal indicates an expected call of ExternalClusterAPIDeleteAssumeRolePrincipal.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIDeleteAssumeRolePrincipal(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDeleteAssumeRolePrincipal", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIDeleteAssumeRolePrincipal), varargs...)
}

// ExternalClusterAPIDeleteCluster mocks base method.
func (m *MockClientInterface) ExternalClusterAPIDeleteCluster(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIDeleteCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDeleteCluster indicates an expected call of ExternalClusterAPIDeleteCluster.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIDeleteCluster(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDeleteCluster", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIDeleteCluster), varargs...)
}

// ExternalClusterAPIDeleteNode mocks base method.
func (m *MockClientInterface) ExternalClusterAPIDeleteNode(ctx context.Context, clusterId, nodeId string, params *sdk.ExternalClusterAPIDeleteNodeParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, nodeId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIDeleteNode", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDeleteNode indicates an expected call of ExternalClusterAPIDeleteNode.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIDeleteNode(ctx, clusterId, nodeId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, nodeId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDeleteNode", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIDeleteNode), varargs...)
}

// ExternalClusterAPIDisconnectCluster mocks base method.
func (m *MockClientInterface) ExternalClusterAPIDisconnectCluster(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIDisconnectClusterJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIDisconnectCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDisconnectCluster indicates an expected call of ExternalClusterAPIDisconnectCluster.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIDisconnectCluster(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDisconnectCluster", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIDisconnectCluster), varargs...)
}

// ExternalClusterAPIDisconnectClusterWithBody mocks base method.
func (m *MockClientInterface) ExternalClusterAPIDisconnectClusterWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIDisconnectClusterWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDisconnectClusterWithBody indicates an expected call of ExternalClusterAPIDisconnectClusterWithBody.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIDisconnectClusterWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDisconnectClusterWithBody", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIDisconnectClusterWithBody), varargs...)
}

// ExternalClusterAPIDrainNode mocks base method.
func (m *MockClientInterface) ExternalClusterAPIDrainNode(ctx context.Context, clusterId, nodeId string, body sdk.ExternalClusterAPIDrainNodeJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, nodeId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIDrainNode", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDrainNode indicates an expected call of ExternalClusterAPIDrainNode.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIDrainNode(ctx, clusterId, nodeId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, nodeId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDrainNode", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIDrainNode), varargs...)
}

// ExternalClusterAPIDrainNodeWithBody mocks base method.
func (m *MockClientInterface) ExternalClusterAPIDrainNodeWithBody(ctx context.Context, clusterId, nodeId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, nodeId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIDrainNodeWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDrainNodeWithBody indicates an expected call of ExternalClusterAPIDrainNodeWithBody.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIDrainNodeWithBody(ctx, clusterId, nodeId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, nodeId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDrainNodeWithBody", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIDrainNodeWithBody), varargs...)
}

// ExternalClusterAPIGetAssumeRolePrincipal mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetAssumeRolePrincipal", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetAssumeRolePrincipal indicates an expected call of ExternalClusterAPIGetAssumeRolePrincipal.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetAssumeRolePrincipal(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetAssumeRolePrincipal", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetAssumeRolePrincipal), varargs...)
}

// ExternalClusterAPIGetAssumeRoleUser mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetAssumeRoleUser(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetAssumeRoleUser", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetAssumeRoleUser indicates an expected call of ExternalClusterAPIGetAssumeRoleUser.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetAssumeRoleUser(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetAssumeRoleUser", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetAssumeRoleUser), varargs...)
}

// ExternalClusterAPIGetCleanupScript mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetCleanupScript(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCleanupScript", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCleanupScript indicates an expected call of ExternalClusterAPIGetCleanupScript.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetCleanupScript(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCleanupScript", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetCleanupScript), varargs...)
}

// ExternalClusterAPIGetCleanupScriptTemplate mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetCleanupScriptTemplate(ctx context.Context, provider string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, provider}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCleanupScriptTemplate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCleanupScriptTemplate indicates an expected call of ExternalClusterAPIGetCleanupScriptTemplate.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetCleanupScriptTemplate(ctx, provider interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, provider}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCleanupScriptTemplate", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetCleanupScriptTemplate), varargs...)
}

// ExternalClusterAPIGetCluster mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetCluster(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCluster indicates an expected call of ExternalClusterAPIGetCluster.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetCluster(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCluster", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetCluster), varargs...)
}

// ExternalClusterAPIGetCredentialsScript mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetCredentialsScript(ctx context.Context, clusterId string, params *sdk.ExternalClusterAPIGetCredentialsScriptParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCredentialsScript", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCredentialsScript indicates an expected call of ExternalClusterAPIGetCredentialsScript.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetCredentialsScript(ctx, clusterId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCredentialsScript", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetCredentialsScript), varargs...)
}

// ExternalClusterAPIGetCredentialsScriptTemplate mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetCredentialsScriptTemplate(ctx context.Context, provider string, params *sdk.ExternalClusterAPIGetCredentialsScriptTemplateParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, provider, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCredentialsScriptTemplate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCredentialsScriptTemplate indicates an expected call of ExternalClusterAPIGetCredentialsScriptTemplate.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetCredentialsScriptTemplate(ctx, provider, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, provider, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCredentialsScriptTemplate", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetCredentialsScriptTemplate), varargs...)
}

// ExternalClusterAPIGetNode mocks base method.
func (m *MockClientInterface) ExternalClusterAPIGetNode(ctx context.Context, clusterId, nodeId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, nodeId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetNode", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetNode indicates an expected call of ExternalClusterAPIGetNode.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIGetNode(ctx, clusterId, nodeId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, nodeId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetNode", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIGetNode), varargs...)
}

// ExternalClusterAPIHandleCloudEvent mocks base method.
func (m *MockClientInterface) ExternalClusterAPIHandleCloudEvent(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIHandleCloudEventJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIHandleCloudEvent", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIHandleCloudEvent indicates an expected call of ExternalClusterAPIHandleCloudEvent.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIHandleCloudEvent(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIHandleCloudEvent", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIHandleCloudEvent), varargs...)
}

// ExternalClusterAPIHandleCloudEventWithBody mocks base method.
func (m *MockClientInterface) ExternalClusterAPIHandleCloudEventWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIHandleCloudEventWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIHandleCloudEventWithBody indicates an expected call of ExternalClusterAPIHandleCloudEventWithBody.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIHandleCloudEventWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIHandleCloudEventWithBody", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIHandleCloudEventWithBody), varargs...)
}

// ExternalClusterAPIListClusters mocks base method.
func (m *MockClientInterface) ExternalClusterAPIListClusters(ctx context.Context, params *sdk.ExternalClusterAPIListClustersParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIListClusters", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIListClusters indicates an expected call of ExternalClusterAPIListClusters.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIListClusters(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIListClusters", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIListClusters), varargs...)
}

// ExternalClusterAPIListNodes mocks base method.
func (m *MockClientInterface) ExternalClusterAPIListNodes(ctx context.Context, clusterId string, params *sdk.ExternalClusterAPIListNodesParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIListNodes", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIListNodes indicates an expected call of ExternalClusterAPIListNodes.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIListNodes(ctx, clusterId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIListNodes", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIListNodes), varargs...)
}

// ExternalClusterAPIReconcileCluster mocks base method.
func (m *MockClientInterface) ExternalClusterAPIReconcileCluster(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIReconcileCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIReconcileCluster indicates an expected call of ExternalClusterAPIReconcileCluster.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIReconcileCluster(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIReconcileCluster", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIReconcileCluster), varargs...)
}

// ExternalClusterAPIRegisterCluster mocks base method.
func (m *MockClientInterface) ExternalClusterAPIRegisterCluster(ctx context.Context, body sdk.ExternalClusterAPIRegisterClusterJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIRegisterCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIRegisterCluster indicates an expected call of ExternalClusterAPIRegisterCluster.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIRegisterCluster(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIRegisterCluster", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIRegisterCluster), varargs...)
}

// ExternalClusterAPIRegisterClusterWithBody mocks base method.
func (m *MockClientInterface) ExternalClusterAPIRegisterClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIRegisterClusterWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIRegisterClusterWithBody indicates an expected call of ExternalClusterAPIRegisterClusterWithBody.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIRegisterClusterWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIRegisterClusterWithBody", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIRegisterClusterWithBody), varargs...)
}

// ExternalClusterAPIUpdateCluster mocks base method.
func (m *MockClientInterface) ExternalClusterAPIUpdateCluster(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIUpdateClusterJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIUpdateCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIUpdateCluster indicates an expected call of ExternalClusterAPIUpdateCluster.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIUpdateCluster(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIUpdateCluster", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIUpdateCluster), varargs...)
}

// ExternalClusterAPIUpdateClusterWithBody mocks base method.
func (m *MockClientInterface) ExternalClusterAPIUpdateClusterWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalClusterAPIUpdateClusterWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIUpdateClusterWithBody indicates an expected call of ExternalClusterAPIUpdateClusterWithBody.
func (mr *MockClientInterfaceMockRecorder) ExternalClusterAPIUpdateClusterWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIUpdateClusterWithBody", reflect.TypeOf((*MockClientInterface)(nil).ExternalClusterAPIUpdateClusterWithBody), varargs...)
}

// GetOrganization mocks base method.
func (m *MockClientInterface) GetOrganization(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganization", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockClientInterfaceMockRecorder) GetOrganization(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockClientInterface)(nil).GetOrganization), varargs...)
}

// GetOrganizationUsers mocks base method.
func (m *MockClientInterface) GetOrganizationUsers(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrganizationUsers", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationUsers indicates an expected call of GetOrganizationUsers.
func (mr *MockClientInterfaceMockRecorder) GetOrganizationUsers(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationUsers", reflect.TypeOf((*MockClientInterface)(nil).GetOrganizationUsers), varargs...)
}

// InventoryAPIAddReservation mocks base method.
func (m *MockClientInterface) InventoryAPIAddReservation(ctx context.Context, organizationId string, body sdk.InventoryAPIAddReservationJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIAddReservation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIAddReservation indicates an expected call of InventoryAPIAddReservation.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIAddReservation(ctx, organizationId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIAddReservation", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIAddReservation), varargs...)
}

// InventoryAPIAddReservationWithBody mocks base method.
func (m *MockClientInterface) InventoryAPIAddReservationWithBody(ctx context.Context, organizationId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIAddReservationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIAddReservationWithBody indicates an expected call of InventoryAPIAddReservationWithBody.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIAddReservationWithBody(ctx, organizationId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIAddReservationWithBody", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIAddReservationWithBody), varargs...)
}

// InventoryAPIDeleteReservation mocks base method.
func (m *MockClientInterface) InventoryAPIDeleteReservation(ctx context.Context, organizationId, reservationId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, reservationId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIDeleteReservation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIDeleteReservation indicates an expected call of InventoryAPIDeleteReservation.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIDeleteReservation(ctx, organizationId, reservationId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, reservationId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIDeleteReservation", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIDeleteReservation), varargs...)
}

// InventoryAPIGetReservations mocks base method.
func (m *MockClientInterface) InventoryAPIGetReservations(ctx context.Context, organizationId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIGetReservations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIGetReservations indicates an expected call of InventoryAPIGetReservations.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIGetReservations(ctx, organizationId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIGetReservations", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIGetReservations), varargs...)
}

// InventoryAPIGetReservationsBalance mocks base method.
func (m *MockClientInterface) InventoryAPIGetReservationsBalance(ctx context.Context, organizationId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIGetReservationsBalance", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIGetReservationsBalance indicates an expected call of InventoryAPIGetReservationsBalance.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIGetReservationsBalance(ctx, organizationId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIGetReservationsBalance", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIGetReservationsBalance), varargs...)
}

// InventoryAPIGetResourceUsage mocks base method.
func (m *MockClientInterface) InventoryAPIGetResourceUsage(ctx context.Context, organizationId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIGetResourceUsage", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIGetResourceUsage indicates an expected call of InventoryAPIGetResourceUsage.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIGetResourceUsage(ctx, organizationId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIGetResourceUsage", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIGetResourceUsage), varargs...)
}

// InventoryAPIOverwriteReservations mocks base method.
func (m *MockClientInterface) InventoryAPIOverwriteReservations(ctx context.Context, organizationId string, body sdk.InventoryAPIOverwriteReservationsJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIOverwriteReservations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIOverwriteReservations indicates an expected call of InventoryAPIOverwriteReservations.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIOverwriteReservations(ctx, organizationId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIOverwriteReservations", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIOverwriteReservations), varargs...)
}

// InventoryAPIOverwriteReservationsWithBody mocks base method.
func (m *MockClientInterface) InventoryAPIOverwriteReservationsWithBody(ctx context.Context, organizationId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPIOverwriteReservationsWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIOverwriteReservationsWithBody indicates an expected call of InventoryAPIOverwriteReservationsWithBody.
func (mr *MockClientInterfaceMockRecorder) InventoryAPIOverwriteReservationsWithBody(ctx, organizationId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIOverwriteReservationsWithBody", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPIOverwriteReservationsWithBody), varargs...)
}

// InventoryAPISyncClusterResources mocks base method.
func (m *MockClientInterface) InventoryAPISyncClusterResources(ctx context.Context, organizationId, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, organizationId, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InventoryAPISyncClusterResources", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPISyncClusterResources indicates an expected call of InventoryAPISyncClusterResources.
func (mr *MockClientInterfaceMockRecorder) InventoryAPISyncClusterResources(ctx, organizationId, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, organizationId, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPISyncClusterResources", reflect.TypeOf((*MockClientInterface)(nil).InventoryAPISyncClusterResources), varargs...)
}

// ListInvitations mocks base method.
func (m *MockClientInterface) ListInvitations(ctx context.Context, params *sdk.ListInvitationsParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInvitations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvitations indicates an expected call of ListInvitations.
func (mr *MockClientInterfaceMockRecorder) ListInvitations(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitations", reflect.TypeOf((*MockClientInterface)(nil).ListInvitations), varargs...)
}

// ListOrganizations mocks base method.
func (m *MockClientInterface) ListOrganizations(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrganizations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockClientInterfaceMockRecorder) ListOrganizations(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockClientInterface)(nil).ListOrganizations), varargs...)
}

// NodeConfigurationAPICreateConfiguration mocks base method.
func (m *MockClientInterface) NodeConfigurationAPICreateConfiguration(ctx context.Context, clusterId string, body sdk.NodeConfigurationAPICreateConfigurationJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPICreateConfiguration", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPICreateConfiguration indicates an expected call of NodeConfigurationAPICreateConfiguration.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPICreateConfiguration(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPICreateConfiguration", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPICreateConfiguration), varargs...)
}

// NodeConfigurationAPICreateConfigurationWithBody mocks base method.
func (m *MockClientInterface) NodeConfigurationAPICreateConfigurationWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPICreateConfigurationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPICreateConfigurationWithBody indicates an expected call of NodeConfigurationAPICreateConfigurationWithBody.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPICreateConfigurationWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPICreateConfigurationWithBody", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPICreateConfigurationWithBody), varargs...)
}

// NodeConfigurationAPIDeleteConfiguration mocks base method.
func (m *MockClientInterface) NodeConfigurationAPIDeleteConfiguration(ctx context.Context, clusterId, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPIDeleteConfiguration", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIDeleteConfiguration indicates an expected call of NodeConfigurationAPIDeleteConfiguration.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPIDeleteConfiguration(ctx, clusterId, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIDeleteConfiguration", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPIDeleteConfiguration), varargs...)
}

// NodeConfigurationAPIGetConfiguration mocks base method.
func (m *MockClientInterface) NodeConfigurationAPIGetConfiguration(ctx context.Context, clusterId, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPIGetConfiguration", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIGetConfiguration indicates an expected call of NodeConfigurationAPIGetConfiguration.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPIGetConfiguration(ctx, clusterId, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIGetConfiguration", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPIGetConfiguration), varargs...)
}

// NodeConfigurationAPIGetSuggestedConfiguration mocks base method.
func (m *MockClientInterface) NodeConfigurationAPIGetSuggestedConfiguration(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPIGetSuggestedConfiguration", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIGetSuggestedConfiguration indicates an expected call of NodeConfigurationAPIGetSuggestedConfiguration.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPIGetSuggestedConfiguration(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIGetSuggestedConfiguration", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPIGetSuggestedConfiguration), varargs...)
}

// NodeConfigurationAPIListConfigurations mocks base method.
func (m *MockClientInterface) NodeConfigurationAPIListConfigurations(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPIListConfigurations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIListConfigurations indicates an expected call of NodeConfigurationAPIListConfigurations.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPIListConfigurations(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIListConfigurations", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPIListConfigurations), varargs...)
}

// NodeConfigurationAPISetDefault mocks base method.
func (m *MockClientInterface) NodeConfigurationAPISetDefault(ctx context.Context, clusterId, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPISetDefault", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPISetDefault indicates an expected call of NodeConfigurationAPISetDefault.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPISetDefault(ctx, clusterId, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPISetDefault", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPISetDefault), varargs...)
}

// NodeConfigurationAPIUpdateConfiguration mocks base method.
func (m *MockClientInterface) NodeConfigurationAPIUpdateConfiguration(ctx context.Context, clusterId, id string, body sdk.NodeConfigurationAPIUpdateConfigurationJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPIUpdateConfiguration", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIUpdateConfiguration indicates an expected call of NodeConfigurationAPIUpdateConfiguration.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPIUpdateConfiguration(ctx, clusterId, id, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIUpdateConfiguration", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPIUpdateConfiguration), varargs...)
}

// NodeConfigurationAPIUpdateConfigurationWithBody mocks base method.
func (m *MockClientInterface) NodeConfigurationAPIUpdateConfigurationWithBody(ctx context.Context, clusterId, id, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeConfigurationAPIUpdateConfigurationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIUpdateConfigurationWithBody indicates an expected call of NodeConfigurationAPIUpdateConfigurationWithBody.
func (mr *MockClientInterfaceMockRecorder) NodeConfigurationAPIUpdateConfigurationWithBody(ctx, clusterId, id, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIUpdateConfigurationWithBody", reflect.TypeOf((*MockClientInterface)(nil).NodeConfigurationAPIUpdateConfigurationWithBody), varargs...)
}

// NodeTemplatesAPICreateNodeTemplate mocks base method.
func (m *MockClientInterface) NodeTemplatesAPICreateNodeTemplate(ctx context.Context, clusterId string, body sdk.NodeTemplatesAPICreateNodeTemplateJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPICreateNodeTemplate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPICreateNodeTemplate indicates an expected call of NodeTemplatesAPICreateNodeTemplate.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPICreateNodeTemplate(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPICreateNodeTemplate", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPICreateNodeTemplate), varargs...)
}

// NodeTemplatesAPICreateNodeTemplateWithBody mocks base method.
func (m *MockClientInterface) NodeTemplatesAPICreateNodeTemplateWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPICreateNodeTemplateWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPICreateNodeTemplateWithBody indicates an expected call of NodeTemplatesAPICreateNodeTemplateWithBody.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPICreateNodeTemplateWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPICreateNodeTemplateWithBody", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPICreateNodeTemplateWithBody), varargs...)
}

// NodeTemplatesAPIDeleteNodeTemplate mocks base method.
func (m *MockClientInterface) NodeTemplatesAPIDeleteNodeTemplate(ctx context.Context, clusterId, nodeTemplateName string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, nodeTemplateName}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPIDeleteNodeTemplate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIDeleteNodeTemplate indicates an expected call of NodeTemplatesAPIDeleteNodeTemplate.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPIDeleteNodeTemplate(ctx, clusterId, nodeTemplateName interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, nodeTemplateName}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIDeleteNodeTemplate", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPIDeleteNodeTemplate), varargs...)
}

// NodeTemplatesAPIFilterInstanceTypes mocks base method.
func (m *MockClientInterface) NodeTemplatesAPIFilterInstanceTypes(ctx context.Context, clusterId string, body sdk.NodeTemplatesAPIFilterInstanceTypesJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPIFilterInstanceTypes", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIFilterInstanceTypes indicates an expected call of NodeTemplatesAPIFilterInstanceTypes.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPIFilterInstanceTypes(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIFilterInstanceTypes", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPIFilterInstanceTypes), varargs...)
}

// NodeTemplatesAPIFilterInstanceTypesWithBody mocks base method.
func (m *MockClientInterface) NodeTemplatesAPIFilterInstanceTypesWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPIFilterInstanceTypesWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIFilterInstanceTypesWithBody indicates an expected call of NodeTemplatesAPIFilterInstanceTypesWithBody.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPIFilterInstanceTypesWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIFilterInstanceTypesWithBody", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPIFilterInstanceTypesWithBody), varargs...)
}

// NodeTemplatesAPIListNodeTemplates mocks base method.
func (m *MockClientInterface) NodeTemplatesAPIListNodeTemplates(ctx context.Context, clusterId string, params *sdk.NodeTemplatesAPIListNodeTemplatesParams, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPIListNodeTemplates", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIListNodeTemplates indicates an expected call of NodeTemplatesAPIListNodeTemplates.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPIListNodeTemplates(ctx, clusterId, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIListNodeTemplates", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPIListNodeTemplates), varargs...)
}

// NodeTemplatesAPIUpdateNodeTemplate mocks base method.
func (m *MockClientInterface) NodeTemplatesAPIUpdateNodeTemplate(ctx context.Context, clusterId, nodeTemplateName string, body sdk.NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, nodeTemplateName, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPIUpdateNodeTemplate", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIUpdateNodeTemplate indicates an expected call of NodeTemplatesAPIUpdateNodeTemplate.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPIUpdateNodeTemplate(ctx, clusterId, nodeTemplateName, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, nodeTemplateName, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIUpdateNodeTemplate", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPIUpdateNodeTemplate), varargs...)
}

// NodeTemplatesAPIUpdateNodeTemplateWithBody mocks base method.
func (m *MockClientInterface) NodeTemplatesAPIUpdateNodeTemplateWithBody(ctx context.Context, clusterId, nodeTemplateName, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, nodeTemplateName, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeTemplatesAPIUpdateNodeTemplateWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIUpdateNodeTemplateWithBody indicates an expected call of NodeTemplatesAPIUpdateNodeTemplateWithBody.
func (mr *MockClientInterfaceMockRecorder) NodeTemplatesAPIUpdateNodeTemplateWithBody(ctx, clusterId, nodeTemplateName, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, nodeTemplateName, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIUpdateNodeTemplateWithBody", reflect.TypeOf((*MockClientInterface)(nil).NodeTemplatesAPIUpdateNodeTemplateWithBody), varargs...)
}

// OperationsAPIGetOperation mocks base method.
func (m *MockClientInterface) OperationsAPIGetOperation(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OperationsAPIGetOperation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationsAPIGetOperation indicates an expected call of OperationsAPIGetOperation.
func (mr *MockClientInterfaceMockRecorder) OperationsAPIGetOperation(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationsAPIGetOperation", reflect.TypeOf((*MockClientInterface)(nil).OperationsAPIGetOperation), varargs...)
}

// PoliciesAPIGetClusterNodeConstraints mocks base method.
func (m *MockClientInterface) PoliciesAPIGetClusterNodeConstraints(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PoliciesAPIGetClusterNodeConstraints", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIGetClusterNodeConstraints indicates an expected call of PoliciesAPIGetClusterNodeConstraints.
func (mr *MockClientInterfaceMockRecorder) PoliciesAPIGetClusterNodeConstraints(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIGetClusterNodeConstraints", reflect.TypeOf((*MockClientInterface)(nil).PoliciesAPIGetClusterNodeConstraints), varargs...)
}

// PoliciesAPIGetClusterPolicies mocks base method.
func (m *MockClientInterface) PoliciesAPIGetClusterPolicies(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PoliciesAPIGetClusterPolicies", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIGetClusterPolicies indicates an expected call of PoliciesAPIGetClusterPolicies.
func (mr *MockClientInterfaceMockRecorder) PoliciesAPIGetClusterPolicies(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIGetClusterPolicies", reflect.TypeOf((*MockClientInterface)(nil).PoliciesAPIGetClusterPolicies), varargs...)
}

// PoliciesAPIUpsertClusterPolicies mocks base method.
func (m *MockClientInterface) PoliciesAPIUpsertClusterPolicies(ctx context.Context, clusterId string, body sdk.PoliciesAPIUpsertClusterPoliciesJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PoliciesAPIUpsertClusterPolicies", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIUpsertClusterPolicies indicates an expected call of PoliciesAPIUpsertClusterPolicies.
func (mr *MockClientInterfaceMockRecorder) PoliciesAPIUpsertClusterPolicies(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIUpsertClusterPolicies", reflect.TypeOf((*MockClientInterface)(nil).PoliciesAPIUpsertClusterPolicies), varargs...)
}

// PoliciesAPIUpsertClusterPoliciesWithBody mocks base method.
func (m *MockClientInterface) PoliciesAPIUpsertClusterPoliciesWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PoliciesAPIUpsertClusterPoliciesWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIUpsertClusterPoliciesWithBody indicates an expected call of PoliciesAPIUpsertClusterPoliciesWithBody.
func (mr *MockClientInterfaceMockRecorder) PoliciesAPIUpsertClusterPoliciesWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIUpsertClusterPoliciesWithBody", reflect.TypeOf((*MockClientInterface)(nil).PoliciesAPIUpsertClusterPoliciesWithBody), varargs...)
}

// SSOAPICreateSSOConnection mocks base method.
func (m *MockClientInterface) SSOAPICreateSSOConnection(ctx context.Context, body sdk.SSOAPICreateSSOConnectionJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSOAPICreateSSOConnection", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPICreateSSOConnection indicates an expected call of SSOAPICreateSSOConnection.
func (mr *MockClientInterfaceMockRecorder) SSOAPICreateSSOConnection(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPICreateSSOConnection", reflect.TypeOf((*MockClientInterface)(nil).SSOAPICreateSSOConnection), varargs...)
}

// SSOAPICreateSSOConnectionWithBody mocks base method.
func (m *MockClientInterface) SSOAPICreateSSOConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSOAPICreateSSOConnectionWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPICreateSSOConnectionWithBody indicates an expected call of SSOAPICreateSSOConnectionWithBody.
func (mr *MockClientInterfaceMockRecorder) SSOAPICreateSSOConnectionWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPICreateSSOConnectionWithBody", reflect.TypeOf((*MockClientInterface)(nil).SSOAPICreateSSOConnectionWithBody), varargs...)
}

// SSOAPIDeleteSSOConnection mocks base method.
func (m *MockClientInterface) SSOAPIDeleteSSOConnection(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSOAPIDeleteSSOConnection", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIDeleteSSOConnection indicates an expected call of SSOAPIDeleteSSOConnection.
func (mr *MockClientInterfaceMockRecorder) SSOAPIDeleteSSOConnection(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIDeleteSSOConnection", reflect.TypeOf((*MockClientInterface)(nil).SSOAPIDeleteSSOConnection), varargs...)
}

// SSOAPIGetSSOConnection mocks base method.
func (m *MockClientInterface) SSOAPIGetSSOConnection(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSOAPIGetSSOConnection", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIGetSSOConnection indicates an expected call of SSOAPIGetSSOConnection.
func (mr *MockClientInterfaceMockRecorder) SSOAPIGetSSOConnection(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIGetSSOConnection", reflect.TypeOf((*MockClientInterface)(nil).SSOAPIGetSSOConnection), varargs...)
}

// SSOAPIListSSOConnections mocks base method.
func (m *MockClientInterface) SSOAPIListSSOConnections(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSOAPIListSSOConnections", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIListSSOConnections indicates an expected call of SSOAPIListSSOConnections.
func (mr *MockClientInterfaceMockRecorder) SSOAPIListSSOConnections(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIListSSOConnections", reflect.TypeOf((*MockClientInterface)(nil).SSOAPIListSSOConnections), varargs...)
}

// SSOAPIUpdateSSOConnection mocks base method.
func (m *MockClientInterface) SSOAPIUpdateSSOConnection(ctx context.Context, id string, body sdk.SSOAPIUpdateSSOConnectionJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSOAPIUpdateSSOConnection", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIUpdateSSOConnection indicates an expected call of SSOAPIUpdateSSOConnection.
func (mr *MockClientInterfaceMockRecorder) SSOAPIUpdateSSOConnection(ctx, id, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIUpdateSSOConnection", reflect.TypeOf((*MockClientInterface)(nil).SSOAPIUpdateSSOConnection), varargs...)
}

// SSOAPIUpdateSSOConnectionWithBody mocks base method.
func (m *MockClientInterface) SSOAPIUpdateSSOConnectionWithBody(ctx context.Context, id, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SSOAPIUpdateSSOConnectionWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIUpdateSSOConnectionWithBody indicates an expected call of SSOAPIUpdateSSOConnectionWithBody.
func (mr *MockClientInterfaceMockRecorder) SSOAPIUpdateSSOConnectionWithBody(ctx, id, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIUpdateSSOConnectionWithBody", reflect.TypeOf((*MockClientInterface)(nil).SSOAPIUpdateSSOConnectionWithBody), varargs...)
}

// ScheduledRebalancingAPICreateRebalancingJob mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPICreateRebalancingJob(ctx context.Context, clusterId string, body sdk.ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingJob", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingJob indicates an expected call of ScheduledRebalancingAPICreateRebalancingJob.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingJob(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingJob", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPICreateRebalancingJob), varargs...)
}

// ScheduledRebalancingAPICreateRebalancingJobWithBody mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPICreateRebalancingJobWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingJobWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingJobWithBody indicates an expected call of ScheduledRebalancingAPICreateRebalancingJobWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingJobWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingJobWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPICreateRebalancingJobWithBody), varargs...)
}

// ScheduledRebalancingAPICreateRebalancingSchedule mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPICreateRebalancingSchedule(ctx context.Context, body sdk.ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingSchedule indicates an expected call of ScheduledRebalancingAPICreateRebalancingSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingSchedule(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPICreateRebalancingSchedule), varargs...)
}

// ScheduledRebalancingAPICreateRebalancingScheduleWithBody mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPICreateRebalancingScheduleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingScheduleWithBody indicates an expected call of ScheduledRebalancingAPICreateRebalancingScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingScheduleWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPICreateRebalancingScheduleWithBody), varargs...)
}

// ScheduledRebalancingAPIDeleteRebalancingJob mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIDeleteRebalancingJob(ctx context.Context, clusterId, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIDeleteRebalancingJob", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIDeleteRebalancingJob indicates an expected call of ScheduledRebalancingAPIDeleteRebalancingJob.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIDeleteRebalancingJob(ctx, clusterId, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIDeleteRebalancingJob", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIDeleteRebalancingJob), varargs...)
}

// ScheduledRebalancingAPIDeleteRebalancingSchedule mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIDeleteRebalancingSchedule(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIDeleteRebalancingSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIDeleteRebalancingSchedule indicates an expected call of ScheduledRebalancingAPIDeleteRebalancingSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIDeleteRebalancingSchedule(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIDeleteRebalancingSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIDeleteRebalancingSchedule), varargs...)
}

// ScheduledRebalancingAPIGetRebalancingJob mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIGetRebalancingJob(ctx context.Context, clusterId, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIGetRebalancingJob", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIGetRebalancingJob indicates an expected call of ScheduledRebalancingAPIGetRebalancingJob.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIGetRebalancingJob(ctx, clusterId, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIGetRebalancingJob", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIGetRebalancingJob), varargs...)
}

// ScheduledRebalancingAPIGetRebalancingSchedule mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIGetRebalancingSchedule(ctx context.Context, id string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIGetRebalancingSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIGetRebalancingSchedule indicates an expected call of ScheduledRebalancingAPIGetRebalancingSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIGetRebalancingSchedule(ctx, id interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIGetRebalancingSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIGetRebalancingSchedule), varargs...)
}

// ScheduledRebalancingAPIListAvailableRebalancingTZ mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIListAvailableRebalancingTZ(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIListAvailableRebalancingTZ", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIListAvailableRebalancingTZ indicates an expected call of ScheduledRebalancingAPIListAvailableRebalancingTZ.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIListAvailableRebalancingTZ(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIListAvailableRebalancingTZ", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIListAvailableRebalancingTZ), varargs...)
}

// ScheduledRebalancingAPIListRebalancingJobs mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIListRebalancingJobs(ctx context.Context, clusterId string, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIListRebalancingJobs", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIListRebalancingJobs indicates an expected call of ScheduledRebalancingAPIListRebalancingJobs.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIListRebalancingJobs(ctx, clusterId interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIListRebalancingJobs", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIListRebalancingJobs), varargs...)
}

// ScheduledRebalancingAPIListRebalancingSchedules mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIListRebalancingSchedules(ctx context.Context, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIListRebalancingSchedules", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIListRebalancingSchedules indicates an expected call of ScheduledRebalancingAPIListRebalancingSchedules.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIListRebalancingSchedules(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIListRebalancingSchedules", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIListRebalancingSchedules), varargs...)
}

// ScheduledRebalancingAPIPreviewRebalancingSchedule mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIPreviewRebalancingSchedule(ctx context.Context, clusterId string, body sdk.ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIPreviewRebalancingSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIPreviewRebalancingSchedule indicates an expected call of ScheduledRebalancingAPIPreviewRebalancingSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIPreviewRebalancingSchedule(ctx, clusterId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIPreviewRebalancingSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIPreviewRebalancingSchedule), varargs...)
}

// ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody indicates an expected call of ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody(ctx, clusterId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody), varargs...)
}

// ScheduledRebalancingAPIUpdateRebalancingJob mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIUpdateRebalancingJob(ctx context.Context, clusterId, id string, body sdk.ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingJob", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingJob indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingJob.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingJob(ctx, clusterId, id, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingJob", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingJob), varargs...)
}

// ScheduledRebalancingAPIUpdateRebalancingJobWithBody mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIUpdateRebalancingJobWithBody(ctx context.Context, clusterId, id, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, clusterId, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingJobWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingJobWithBody indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingJobWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingJobWithBody(ctx, clusterId, id, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, clusterId, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingJobWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingJobWithBody), varargs...)
}

// ScheduledRebalancingAPIUpdateRebalancingSchedule mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIUpdateRebalancingSchedule(ctx context.Context, params *sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleParams, body sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingSchedule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingSchedule indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingSchedule.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingSchedule(ctx, params, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingSchedule", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingSchedule), varargs...)
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody mocks base method.
func (m *MockClientInterface) ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody(ctx context.Context, params *sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleParams, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody.
func (mr *MockClientInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody(ctx, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody", reflect.TypeOf((*MockClientInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody), varargs...)
}

// UpdateCurrentUserProfile mocks base method.
func (m *MockClientInterface) UpdateCurrentUserProfile(ctx context.Context, body sdk.UpdateCurrentUserProfileJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCurrentUserProfile", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCurrentUserProfile indicates an expected call of UpdateCurrentUserProfile.
func (mr *MockClientInterfaceMockRecorder) UpdateCurrentUserProfile(ctx, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrentUserProfile", reflect.TypeOf((*MockClientInterface)(nil).UpdateCurrentUserProfile), varargs...)
}

// UpdateCurrentUserProfileWithBody mocks base method.
func (m *MockClientInterface) UpdateCurrentUserProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCurrentUserProfileWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCurrentUserProfileWithBody indicates an expected call of UpdateCurrentUserProfileWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateCurrentUserProfileWithBody(ctx, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrentUserProfileWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateCurrentUserProfileWithBody), varargs...)
}

// UpdateOrganization mocks base method.
func (m *MockClientInterface) UpdateOrganization(ctx context.Context, id string, body sdk.UpdateOrganizationJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrganization", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockClientInterfaceMockRecorder) UpdateOrganization(ctx, id, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockClientInterface)(nil).UpdateOrganization), varargs...)
}

// UpdateOrganizationUser mocks base method.
func (m *MockClientInterface) UpdateOrganizationUser(ctx context.Context, id, userId string, body sdk.UpdateOrganizationUserJSONRequestBody, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, userId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrganizationUser", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationUser indicates an expected call of UpdateOrganizationUser.
func (mr *MockClientInterfaceMockRecorder) UpdateOrganizationUser(ctx, id, userId, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, userId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationUser", reflect.TypeOf((*MockClientInterface)(nil).UpdateOrganizationUser), varargs...)
}

// UpdateOrganizationUserWithBody mocks base method.
func (m *MockClientInterface) UpdateOrganizationUserWithBody(ctx context.Context, id, userId, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, userId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrganizationUserWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationUserWithBody indicates an expected call of UpdateOrganizationUserWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateOrganizationUserWithBody(ctx, id, userId, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, userId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationUserWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateOrganizationUserWithBody), varargs...)
}

// UpdateOrganizationWithBody mocks base method.
func (m *MockClientInterface) UpdateOrganizationWithBody(ctx context.Context, id, contentType string, body io.Reader, reqEditors ...sdk.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrganizationWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationWithBody indicates an expected call of UpdateOrganizationWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateOrganizationWithBody(ctx, id, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateOrganizationWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// AuthTokenAPICreateAuthTokenWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AuthTokenAPICreateAuthTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*sdk.AuthTokenAPICreateAuthTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenAPICreateAuthTokenWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*sdk.AuthTokenAPICreateAuthTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPICreateAuthTokenWithBodyWithResponse indicates an expected call of AuthTokenAPICreateAuthTokenWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AuthTokenAPICreateAuthTokenWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPICreateAuthTokenWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AuthTokenAPICreateAuthTokenWithBodyWithResponse), ctx, contentType, body)
}

// AuthTokenAPICreateAuthTokenWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AuthTokenAPICreateAuthTokenWithResponse(ctx context.Context, body sdk.AuthTokenAPICreateAuthTokenJSONRequestBody) (*sdk.AuthTokenAPICreateAuthTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenAPICreateAuthTokenWithResponse", ctx, body)
	ret0, _ := ret[0].(*sdk.AuthTokenAPICreateAuthTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPICreateAuthTokenWithResponse indicates an expected call of AuthTokenAPICreateAuthTokenWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AuthTokenAPICreateAuthTokenWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPICreateAuthTokenWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AuthTokenAPICreateAuthTokenWithResponse), ctx, body)
}

// AuthTokenAPIDeleteAuthTokenWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AuthTokenAPIDeleteAuthTokenWithResponse(ctx context.Context, id string) (*sdk.AuthTokenAPIDeleteAuthTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenAPIDeleteAuthTokenWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.AuthTokenAPIDeleteAuthTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIDeleteAuthTokenWithResponse indicates an expected call of AuthTokenAPIDeleteAuthTokenWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AuthTokenAPIDeleteAuthTokenWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIDeleteAuthTokenWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AuthTokenAPIDeleteAuthTokenWithResponse), ctx, id)
}

// AuthTokenAPIGetAuthTokenWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AuthTokenAPIGetAuthTokenWithResponse(ctx context.Context, id string) (*sdk.AuthTokenAPIGetAuthTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenAPIGetAuthTokenWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.AuthTokenAPIGetAuthTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIGetAuthTokenWithResponse indicates an expected call of AuthTokenAPIGetAuthTokenWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AuthTokenAPIGetAuthTokenWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIGetAuthTokenWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AuthTokenAPIGetAuthTokenWithResponse), ctx, id)
}

// AuthTokenAPIListAuthTokensWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AuthTokenAPIListAuthTokensWithResponse(ctx context.Context, params *sdk.AuthTokenAPIListAuthTokensParams) (*sdk.AuthTokenAPIListAuthTokensResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenAPIListAuthTokensWithResponse", ctx, params)
	ret0, _ := ret[0].(*sdk.AuthTokenAPIListAuthTokensResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIListAuthTokensWithResponse indicates an expected call of AuthTokenAPIListAuthTokensWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AuthTokenAPIListAuthTokensWithResponse(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIListAuthTokensWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AuthTokenAPIListAuthTokensWithResponse), ctx, params)
}

// AuthTokenAPIUpdateAuthTokenWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AuthTokenAPIUpdateAuthTokenWithBodyWithResponse(ctx context.Context, id, contentType string, body io.Reader) (*sdk.AuthTokenAPIUpdateAuthTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenAPIUpdateAuthTokenWithBodyWithResponse", ctx, id, contentType, body)
	ret0, _ := ret[0].(*sdk.AuthTokenAPIUpdateAuthTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIUpdateAuthTokenWithBodyWithResponse indicates an expected call of AuthTokenAPIUpdateAuthTokenWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AuthTokenAPIUpdateAuthTokenWithBodyWithResponse(ctx, id, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIUpdateAuthTokenWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AuthTokenAPIUpdateAuthTokenWithBodyWithResponse), ctx, id, contentType, body)
}

// AuthTokenAPIUpdateAuthTokenWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) AuthTokenAPIUpdateAuthTokenWithResponse(ctx context.Context, id string, body sdk.AuthTokenAPIUpdateAuthTokenJSONRequestBody) (*sdk.AuthTokenAPIUpdateAuthTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTokenAPIUpdateAuthTokenWithResponse", ctx, id, body)
	ret0, _ := ret[0].(*sdk.AuthTokenAPIUpdateAuthTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTokenAPIUpdateAuthTokenWithResponse indicates an expected call of AuthTokenAPIUpdateAuthTokenWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) AuthTokenAPIUpdateAuthTokenWithResponse(ctx, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTokenAPIUpdateAuthTokenWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).AuthTokenAPIUpdateAuthTokenWithResponse), ctx, id, body)
}

// ClaimInvitationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ClaimInvitationWithBodyWithResponse(ctx context.Context, id, contentType string, body io.Reader) (*sdk.ClaimInvitationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimInvitationWithBodyWithResponse", ctx, id, contentType, body)
	ret0, _ := ret[0].(*sdk.ClaimInvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimInvitationWithBodyWithResponse indicates an expected call of ClaimInvitationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ClaimInvitationWithBodyWithResponse(ctx, id, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimInvitationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ClaimInvitationWithBodyWithResponse), ctx, id, contentType, body)
}

// ClaimInvitationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ClaimInvitationWithResponse(ctx context.Context, id string, body sdk.ClaimInvitationJSONRequestBody) (*sdk.ClaimInvitationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimInvitationWithResponse", ctx, id, body)
	ret0, _ := ret[0].(*sdk.ClaimInvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimInvitationWithResponse indicates an expected call of ClaimInvitationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ClaimInvitationWithResponse(ctx, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimInvitationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ClaimInvitationWithResponse), ctx, id, body)
}

// CreateInvitationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateInvitationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*sdk.CreateInvitationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitationWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*sdk.CreateInvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvitationWithBodyWithResponse indicates an expected call of CreateInvitationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateInvitationWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateInvitationWithBodyWithResponse), ctx, contentType, body)
}

// CreateInvitationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateInvitationWithResponse(ctx context.Context, body sdk.CreateInvitationJSONRequestBody) (*sdk.CreateInvitationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitationWithResponse", ctx, body)
	ret0, _ := ret[0].(*sdk.CreateInvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvitationWithResponse indicates an expected call of CreateInvitationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateInvitationWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateInvitationWithResponse), ctx, body)
}

// CreateOrganizationUserWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateOrganizationUserWithBodyWithResponse(ctx context.Context, id, contentType string, body io.Reader) (*sdk.CreateOrganizationUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationUserWithBodyWithResponse", ctx, id, contentType, body)
	ret0, _ := ret[0].(*sdk.CreateOrganizationUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationUserWithBodyWithResponse indicates an expected call of CreateOrganizationUserWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateOrganizationUserWithBodyWithResponse(ctx, id, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationUserWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateOrganizationUserWithBodyWithResponse), ctx, id, contentType, body)
}

// CreateOrganizationUserWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateOrganizationUserWithResponse(ctx context.Context, id string, body sdk.CreateOrganizationUserJSONRequestBody) (*sdk.CreateOrganizationUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationUserWithResponse", ctx, id, body)
	ret0, _ := ret[0].(*sdk.CreateOrganizationUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationUserWithResponse indicates an expected call of CreateOrganizationUserWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateOrganizationUserWithResponse(ctx, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationUserWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateOrganizationUserWithResponse), ctx, id, body)
}

// CreateOrganizationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*sdk.CreateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*sdk.CreateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationWithBodyWithResponse indicates an expected call of CreateOrganizationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateOrganizationWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateOrganizationWithBodyWithResponse), ctx, contentType, body)
}

// CreateOrganizationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateOrganizationWithResponse(ctx context.Context, body sdk.CreateOrganizationJSONRequestBody) (*sdk.CreateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationWithResponse", ctx, body)
	ret0, _ := ret[0].(*sdk.CreateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganizationWithResponse indicates an expected call of CreateOrganizationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateOrganizationWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateOrganizationWithResponse), ctx, body)
}

// CurrentUserProfileWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CurrentUserProfileWithResponse(ctx context.Context) (*sdk.CurrentUserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentUserProfileWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.CurrentUserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentUserProfileWithResponse indicates an expected call of CurrentUserProfileWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CurrentUserProfileWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUserProfileWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CurrentUserProfileWithResponse), ctx)
}

// DeleteInvitationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteInvitationWithResponse(ctx context.Context, id string) (*sdk.DeleteInvitationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvitationWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.DeleteInvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInvitationWithResponse indicates an expected call of DeleteInvitationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteInvitationWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvitationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteInvitationWithResponse), ctx, id)
}

// DeleteOrganizationUserWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteOrganizationUserWithResponse(ctx context.Context, id, userId string) (*sdk.DeleteOrganizationUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationUserWithResponse", ctx, id, userId)
	ret0, _ := ret[0].(*sdk.DeleteOrganizationUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganizationUserWithResponse indicates an expected call of DeleteOrganizationUserWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteOrganizationUserWithResponse(ctx, id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationUserWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteOrganizationUserWithResponse), ctx, id, userId)
}

// DeleteOrganizationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteOrganizationWithResponse(ctx context.Context, id string) (*sdk.DeleteOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganizationWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.DeleteOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganizationWithResponse indicates an expected call of DeleteOrganizationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteOrganizationWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganizationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteOrganizationWithResponse), ctx, id)
}

// EvictorAPIGetAdvancedConfigWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) EvictorAPIGetAdvancedConfigWithResponse(ctx context.Context, clusterId string) (*sdk.EvictorAPIGetAdvancedConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictorAPIGetAdvancedConfigWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.EvictorAPIGetAdvancedConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictorAPIGetAdvancedConfigWithResponse indicates an expected call of EvictorAPIGetAdvancedConfigWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) EvictorAPIGetAdvancedConfigWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictorAPIGetAdvancedConfigWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).EvictorAPIGetAdvancedConfigWithResponse), ctx, clusterId)
}

// EvictorAPIUpsertAdvancedConfigWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) EvictorAPIUpsertAdvancedConfigWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.EvictorAPIUpsertAdvancedConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictorAPIUpsertAdvancedConfigWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.EvictorAPIUpsertAdvancedConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictorAPIUpsertAdvancedConfigWithBodyWithResponse indicates an expected call of EvictorAPIUpsertAdvancedConfigWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) EvictorAPIUpsertAdvancedConfigWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictorAPIUpsertAdvancedConfigWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).EvictorAPIUpsertAdvancedConfigWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// EvictorAPIUpsertAdvancedConfigWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) EvictorAPIUpsertAdvancedConfigWithResponse(ctx context.Context, clusterId string, body sdk.EvictorAPIUpsertAdvancedConfigJSONRequestBody) (*sdk.EvictorAPIUpsertAdvancedConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictorAPIUpsertAdvancedConfigWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.EvictorAPIUpsertAdvancedConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictorAPIUpsertAdvancedConfigWithResponse indicates an expected call of EvictorAPIUpsertAdvancedConfigWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) EvictorAPIUpsertAdvancedConfigWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictorAPIUpsertAdvancedConfigWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).EvictorAPIUpsertAdvancedConfigWithResponse), ctx, clusterId, body)
}

// ExternalClusterAPIAddNodeWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIAddNodeWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.ExternalClusterAPIAddNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIAddNodeWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIAddNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIAddNodeWithBodyWithResponse indicates an expected call of ExternalClusterAPIAddNodeWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIAddNodeWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIAddNodeWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIAddNodeWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// ExternalClusterAPIAddNodeWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIAddNodeWithResponse(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIAddNodeJSONRequestBody) (*sdk.ExternalClusterAPIAddNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIAddNodeWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIAddNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIAddNodeWithResponse indicates an expected call of ExternalClusterAPIAddNodeWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIAddNodeWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIAddNodeWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIAddNodeWithResponse), ctx, clusterId, body)
}

// ExternalClusterAPICreateAssumeRolePrincipalWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPICreateAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPICreateAssumeRolePrincipalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPICreateAssumeRolePrincipalWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPICreateAssumeRolePrincipalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPICreateAssumeRolePrincipalWithResponse indicates an expected call of ExternalClusterAPICreateAssumeRolePrincipalWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPICreateAssumeRolePrincipalWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPICreateAssumeRolePrincipalWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPICreateAssumeRolePrincipalWithResponse), ctx, clusterId)
}

// ExternalClusterAPICreateClusterTokenWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPICreateClusterTokenWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPICreateClusterTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPICreateClusterTokenWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPICreateClusterTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPICreateClusterTokenWithResponse indicates an expected call of ExternalClusterAPICreateClusterTokenWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPICreateClusterTokenWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPICreateClusterTokenWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPICreateClusterTokenWithResponse), ctx, clusterId)
}

// ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPIDeleteAssumeRolePrincipalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIDeleteAssumeRolePrincipalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse indicates an expected call of ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse), ctx, clusterId)
}

// ExternalClusterAPIDeleteClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIDeleteClusterWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPIDeleteClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIDeleteClusterWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIDeleteClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDeleteClusterWithResponse indicates an expected call of ExternalClusterAPIDeleteClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIDeleteClusterWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDeleteClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIDeleteClusterWithResponse), ctx, clusterId)
}

// ExternalClusterAPIDeleteNodeWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIDeleteNodeWithResponse(ctx context.Context, clusterId, nodeId string, params *sdk.ExternalClusterAPIDeleteNodeParams) (*sdk.ExternalClusterAPIDeleteNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIDeleteNodeWithResponse", ctx, clusterId, nodeId, params)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIDeleteNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDeleteNodeWithResponse indicates an expected call of ExternalClusterAPIDeleteNodeWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIDeleteNodeWithResponse(ctx, clusterId, nodeId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDeleteNodeWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIDeleteNodeWithResponse), ctx, clusterId, nodeId, params)
}

// ExternalClusterAPIDisconnectClusterWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIDisconnectClusterWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.ExternalClusterAPIDisconnectClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIDisconnectClusterWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIDisconnectClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDisconnectClusterWithBodyWithResponse indicates an expected call of ExternalClusterAPIDisconnectClusterWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIDisconnectClusterWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDisconnectClusterWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIDisconnectClusterWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// ExternalClusterAPIDisconnectClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIDisconnectClusterWithResponse(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIDisconnectClusterJSONRequestBody) (*sdk.ExternalClusterAPIDisconnectClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIDisconnectClusterWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIDisconnectClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDisconnectClusterWithResponse indicates an expected call of ExternalClusterAPIDisconnectClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIDisconnectClusterWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDisconnectClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIDisconnectClusterWithResponse), ctx, clusterId, body)
}

// ExternalClusterAPIDrainNodeWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIDrainNodeWithBodyWithResponse(ctx context.Context, clusterId, nodeId, contentType string, body io.Reader) (*sdk.ExternalClusterAPIDrainNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIDrainNodeWithBodyWithResponse", ctx, clusterId, nodeId, contentType, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIDrainNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDrainNodeWithBodyWithResponse indicates an expected call of ExternalClusterAPIDrainNodeWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIDrainNodeWithBodyWithResponse(ctx, clusterId, nodeId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDrainNodeWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIDrainNodeWithBodyWithResponse), ctx, clusterId, nodeId, contentType, body)
}

// ExternalClusterAPIDrainNodeWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIDrainNodeWithResponse(ctx context.Context, clusterId, nodeId string, body sdk.ExternalClusterAPIDrainNodeJSONRequestBody) (*sdk.ExternalClusterAPIDrainNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIDrainNodeWithResponse", ctx, clusterId, nodeId, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIDrainNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIDrainNodeWithResponse indicates an expected call of ExternalClusterAPIDrainNodeWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIDrainNodeWithResponse(ctx, clusterId, nodeId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIDrainNodeWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIDrainNodeWithResponse), ctx, clusterId, nodeId, body)
}

// ExternalClusterAPIGetAssumeRolePrincipalWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPIGetAssumeRolePrincipalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetAssumeRolePrincipalWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetAssumeRolePrincipalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetAssumeRolePrincipalWithResponse indicates an expected call of ExternalClusterAPIGetAssumeRolePrincipalWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetAssumeRolePrincipalWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetAssumeRolePrincipalWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetAssumeRolePrincipalWithResponse), ctx, clusterId)
}

// ExternalClusterAPIGetAssumeRoleUserWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetAssumeRoleUserWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPIGetAssumeRoleUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetAssumeRoleUserWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetAssumeRoleUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetAssumeRoleUserWithResponse indicates an expected call of ExternalClusterAPIGetAssumeRoleUserWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetAssumeRoleUserWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetAssumeRoleUserWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetAssumeRoleUserWithResponse), ctx, clusterId)
}

// ExternalClusterAPIGetCleanupScriptTemplateWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetCleanupScriptTemplateWithResponse(ctx context.Context, provider string) (*sdk.ExternalClusterAPIGetCleanupScriptTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCleanupScriptTemplateWithResponse", ctx, provider)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetCleanupScriptTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCleanupScriptTemplateWithResponse indicates an expected call of ExternalClusterAPIGetCleanupScriptTemplateWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetCleanupScriptTemplateWithResponse(ctx, provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCleanupScriptTemplateWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetCleanupScriptTemplateWithResponse), ctx, provider)
}

// ExternalClusterAPIGetCleanupScriptWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetCleanupScriptWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPIGetCleanupScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCleanupScriptWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetCleanupScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCleanupScriptWithResponse indicates an expected call of ExternalClusterAPIGetCleanupScriptWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetCleanupScriptWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCleanupScriptWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetCleanupScriptWithResponse), ctx, clusterId)
}

// ExternalClusterAPIGetClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetClusterWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPIGetClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetClusterWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetClusterWithResponse indicates an expected call of ExternalClusterAPIGetClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetClusterWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetClusterWithResponse), ctx, clusterId)
}

// ExternalClusterAPIGetCredentialsScriptTemplateWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetCredentialsScriptTemplateWithResponse(ctx context.Context, provider string, params *sdk.ExternalClusterAPIGetCredentialsScriptTemplateParams) (*sdk.ExternalClusterAPIGetCredentialsScriptTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCredentialsScriptTemplateWithResponse", ctx, provider, params)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetCredentialsScriptTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCredentialsScriptTemplateWithResponse indicates an expected call of ExternalClusterAPIGetCredentialsScriptTemplateWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetCredentialsScriptTemplateWithResponse(ctx, provider, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCredentialsScriptTemplateWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetCredentialsScriptTemplateWithResponse), ctx, provider, params)
}

// ExternalClusterAPIGetCredentialsScriptWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetCredentialsScriptWithResponse(ctx context.Context, clusterId string, params *sdk.ExternalClusterAPIGetCredentialsScriptParams) (*sdk.ExternalClusterAPIGetCredentialsScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetCredentialsScriptWithResponse", ctx, clusterId, params)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetCredentialsScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetCredentialsScriptWithResponse indicates an expected call of ExternalClusterAPIGetCredentialsScriptWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetCredentialsScriptWithResponse(ctx, clusterId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetCredentialsScriptWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetCredentialsScriptWithResponse), ctx, clusterId, params)
}

// ExternalClusterAPIGetNodeWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIGetNodeWithResponse(ctx context.Context, clusterId, nodeId string) (*sdk.ExternalClusterAPIGetNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIGetNodeWithResponse", ctx, clusterId, nodeId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIGetNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIGetNodeWithResponse indicates an expected call of ExternalClusterAPIGetNodeWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIGetNodeWithResponse(ctx, clusterId, nodeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIGetNodeWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIGetNodeWithResponse), ctx, clusterId, nodeId)
}

// ExternalClusterAPIHandleCloudEventWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIHandleCloudEventWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.ExternalClusterAPIHandleCloudEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIHandleCloudEventWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIHandleCloudEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIHandleCloudEventWithBodyWithResponse indicates an expected call of ExternalClusterAPIHandleCloudEventWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIHandleCloudEventWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIHandleCloudEventWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIHandleCloudEventWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// ExternalClusterAPIHandleCloudEventWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIHandleCloudEventWithResponse(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIHandleCloudEventJSONRequestBody) (*sdk.ExternalClusterAPIHandleCloudEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIHandleCloudEventWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIHandleCloudEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIHandleCloudEventWithResponse indicates an expected call of ExternalClusterAPIHandleCloudEventWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIHandleCloudEventWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIHandleCloudEventWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIHandleCloudEventWithResponse), ctx, clusterId, body)
}

// ExternalClusterAPIListClustersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIListClustersWithResponse(ctx context.Context, params *sdk.ExternalClusterAPIListClustersParams) (*sdk.ExternalClusterAPIListClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIListClustersWithResponse", ctx, params)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIListClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIListClustersWithResponse indicates an expected call of ExternalClusterAPIListClustersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIListClustersWithResponse(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIListClustersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIListClustersWithResponse), ctx, params)
}

// ExternalClusterAPIListNodesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIListNodesWithResponse(ctx context.Context, clusterId string, params *sdk.ExternalClusterAPIListNodesParams) (*sdk.ExternalClusterAPIListNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIListNodesWithResponse", ctx, clusterId, params)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIListNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIListNodesWithResponse indicates an expected call of ExternalClusterAPIListNodesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIListNodesWithResponse(ctx, clusterId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIListNodesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIListNodesWithResponse), ctx, clusterId, params)
}

// ExternalClusterAPIReconcileClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIReconcileClusterWithResponse(ctx context.Context, clusterId string) (*sdk.ExternalClusterAPIReconcileClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIReconcileClusterWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIReconcileClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIReconcileClusterWithResponse indicates an expected call of ExternalClusterAPIReconcileClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIReconcileClusterWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIReconcileClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIReconcileClusterWithResponse), ctx, clusterId)
}

// ExternalClusterAPIRegisterClusterWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIRegisterClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*sdk.ExternalClusterAPIRegisterClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIRegisterClusterWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIRegisterClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIRegisterClusterWithBodyWithResponse indicates an expected call of ExternalClusterAPIRegisterClusterWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIRegisterClusterWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIRegisterClusterWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIRegisterClusterWithBodyWithResponse), ctx, contentType, body)
}

// ExternalClusterAPIRegisterClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIRegisterClusterWithResponse(ctx context.Context, body sdk.ExternalClusterAPIRegisterClusterJSONRequestBody) (*sdk.ExternalClusterAPIRegisterClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIRegisterClusterWithResponse", ctx, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIRegisterClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIRegisterClusterWithResponse indicates an expected call of ExternalClusterAPIRegisterClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIRegisterClusterWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIRegisterClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIRegisterClusterWithResponse), ctx, body)
}

// ExternalClusterAPIUpdateClusterWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIUpdateClusterWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.ExternalClusterAPIUpdateClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIUpdateClusterWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIUpdateClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIUpdateClusterWithBodyWithResponse indicates an expected call of ExternalClusterAPIUpdateClusterWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIUpdateClusterWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIUpdateClusterWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIUpdateClusterWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// ExternalClusterAPIUpdateClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ExternalClusterAPIUpdateClusterWithResponse(ctx context.Context, clusterId string, body sdk.ExternalClusterAPIUpdateClusterJSONRequestBody) (*sdk.ExternalClusterAPIUpdateClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalClusterAPIUpdateClusterWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.ExternalClusterAPIUpdateClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalClusterAPIUpdateClusterWithResponse indicates an expected call of ExternalClusterAPIUpdateClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExternalClusterAPIUpdateClusterWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalClusterAPIUpdateClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExternalClusterAPIUpdateClusterWithResponse), ctx, clusterId, body)
}

// GetOrganizationUsersWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetOrganizationUsersWithResponse(ctx context.Context, id string) (*sdk.GetOrganizationUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationUsersWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.GetOrganizationUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationUsersWithResponse indicates an expected call of GetOrganizationUsersWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetOrganizationUsersWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationUsersWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetOrganizationUsersWithResponse), ctx, id)
}

// GetOrganizationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetOrganizationWithResponse(ctx context.Context, id string) (*sdk.GetOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.GetOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationWithResponse indicates an expected call of GetOrganizationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetOrganizationWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetOrganizationWithResponse), ctx, id)
}

// InventoryAPIAddReservationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIAddReservationWithBodyWithResponse(ctx context.Context, organizationId, contentType string, body io.Reader) (*sdk.InventoryAPIAddReservationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIAddReservationWithBodyWithResponse", ctx, organizationId, contentType, body)
	ret0, _ := ret[0].(*sdk.InventoryAPIAddReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIAddReservationWithBodyWithResponse indicates an expected call of InventoryAPIAddReservationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIAddReservationWithBodyWithResponse(ctx, organizationId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIAddReservationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIAddReservationWithBodyWithResponse), ctx, organizationId, contentType, body)
}

// InventoryAPIAddReservationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIAddReservationWithResponse(ctx context.Context, organizationId string, body sdk.InventoryAPIAddReservationJSONRequestBody) (*sdk.InventoryAPIAddReservationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIAddReservationWithResponse", ctx, organizationId, body)
	ret0, _ := ret[0].(*sdk.InventoryAPIAddReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIAddReservationWithResponse indicates an expected call of InventoryAPIAddReservationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIAddReservationWithResponse(ctx, organizationId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIAddReservationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIAddReservationWithResponse), ctx, organizationId, body)
}

// InventoryAPIDeleteReservationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIDeleteReservationWithResponse(ctx context.Context, organizationId, reservationId string) (*sdk.InventoryAPIDeleteReservationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIDeleteReservationWithResponse", ctx, organizationId, reservationId)
	ret0, _ := ret[0].(*sdk.InventoryAPIDeleteReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIDeleteReservationWithResponse indicates an expected call of InventoryAPIDeleteReservationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIDeleteReservationWithResponse(ctx, organizationId, reservationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIDeleteReservationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIDeleteReservationWithResponse), ctx, organizationId, reservationId)
}

// InventoryAPIGetReservationsBalanceWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIGetReservationsBalanceWithResponse(ctx context.Context, organizationId string) (*sdk.InventoryAPIGetReservationsBalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIGetReservationsBalanceWithResponse", ctx, organizationId)
	ret0, _ := ret[0].(*sdk.InventoryAPIGetReservationsBalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIGetReservationsBalanceWithResponse indicates an expected call of InventoryAPIGetReservationsBalanceWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIGetReservationsBalanceWithResponse(ctx, organizationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIGetReservationsBalanceWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIGetReservationsBalanceWithResponse), ctx, organizationId)
}

// InventoryAPIGetReservationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIGetReservationsWithResponse(ctx context.Context, organizationId string) (*sdk.InventoryAPIGetReservationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIGetReservationsWithResponse", ctx, organizationId)
	ret0, _ := ret[0].(*sdk.InventoryAPIGetReservationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIGetReservationsWithResponse indicates an expected call of InventoryAPIGetReservationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIGetReservationsWithResponse(ctx, organizationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIGetReservationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIGetReservationsWithResponse), ctx, organizationId)
}

// InventoryAPIGetResourceUsageWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIGetResourceUsageWithResponse(ctx context.Context, organizationId string) (*sdk.InventoryAPIGetResourceUsageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIGetResourceUsageWithResponse", ctx, organizationId)
	ret0, _ := ret[0].(*sdk.InventoryAPIGetResourceUsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIGetResourceUsageWithResponse indicates an expected call of InventoryAPIGetResourceUsageWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIGetResourceUsageWithResponse(ctx, organizationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIGetResourceUsageWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIGetResourceUsageWithResponse), ctx, organizationId)
}

// InventoryAPIOverwriteReservationsWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIOverwriteReservationsWithBodyWithResponse(ctx context.Context, organizationId, contentType string, body io.Reader) (*sdk.InventoryAPIOverwriteReservationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIOverwriteReservationsWithBodyWithResponse", ctx, organizationId, contentType, body)
	ret0, _ := ret[0].(*sdk.InventoryAPIOverwriteReservationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIOverwriteReservationsWithBodyWithResponse indicates an expected call of InventoryAPIOverwriteReservationsWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIOverwriteReservationsWithBodyWithResponse(ctx, organizationId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIOverwriteReservationsWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIOverwriteReservationsWithBodyWithResponse), ctx, organizationId, contentType, body)
}

// InventoryAPIOverwriteReservationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPIOverwriteReservationsWithResponse(ctx context.Context, organizationId string, body sdk.InventoryAPIOverwriteReservationsJSONRequestBody) (*sdk.InventoryAPIOverwriteReservationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPIOverwriteReservationsWithResponse", ctx, organizationId, body)
	ret0, _ := ret[0].(*sdk.InventoryAPIOverwriteReservationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPIOverwriteReservationsWithResponse indicates an expected call of InventoryAPIOverwriteReservationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPIOverwriteReservationsWithResponse(ctx, organizationId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPIOverwriteReservationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPIOverwriteReservationsWithResponse), ctx, organizationId, body)
}

// InventoryAPISyncClusterResourcesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) InventoryAPISyncClusterResourcesWithResponse(ctx context.Context, organizationId, clusterId string) (*sdk.InventoryAPISyncClusterResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InventoryAPISyncClusterResourcesWithResponse", ctx, organizationId, clusterId)
	ret0, _ := ret[0].(*sdk.InventoryAPISyncClusterResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InventoryAPISyncClusterResourcesWithResponse indicates an expected call of InventoryAPISyncClusterResourcesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) InventoryAPISyncClusterResourcesWithResponse(ctx, organizationId, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InventoryAPISyncClusterResourcesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).InventoryAPISyncClusterResourcesWithResponse), ctx, organizationId, clusterId)
}

// ListInvitationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListInvitationsWithResponse(ctx context.Context, params *sdk.ListInvitationsParams) (*sdk.ListInvitationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvitationsWithResponse", ctx, params)
	ret0, _ := ret[0].(*sdk.ListInvitationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvitationsWithResponse indicates an expected call of ListInvitationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListInvitationsWithResponse(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvitationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListInvitationsWithResponse), ctx, params)
}

// ListOrganizationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListOrganizationsWithResponse(ctx context.Context) (*sdk.ListOrganizationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizationsWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.ListOrganizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizationsWithResponse indicates an expected call of ListOrganizationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListOrganizationsWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListOrganizationsWithResponse), ctx)
}

// NodeConfigurationAPICreateConfigurationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPICreateConfigurationWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.NodeConfigurationAPICreateConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPICreateConfigurationWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPICreateConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPICreateConfigurationWithBodyWithResponse indicates an expected call of NodeConfigurationAPICreateConfigurationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPICreateConfigurationWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPICreateConfigurationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPICreateConfigurationWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// NodeConfigurationAPICreateConfigurationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPICreateConfigurationWithResponse(ctx context.Context, clusterId string, body sdk.NodeConfigurationAPICreateConfigurationJSONRequestBody) (*sdk.NodeConfigurationAPICreateConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPICreateConfigurationWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPICreateConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPICreateConfigurationWithResponse indicates an expected call of NodeConfigurationAPICreateConfigurationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPICreateConfigurationWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPICreateConfigurationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPICreateConfigurationWithResponse), ctx, clusterId, body)
}

// NodeConfigurationAPIDeleteConfigurationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPIDeleteConfigurationWithResponse(ctx context.Context, clusterId, id string) (*sdk.NodeConfigurationAPIDeleteConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPIDeleteConfigurationWithResponse", ctx, clusterId, id)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPIDeleteConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIDeleteConfigurationWithResponse indicates an expected call of NodeConfigurationAPIDeleteConfigurationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPIDeleteConfigurationWithResponse(ctx, clusterId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIDeleteConfigurationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPIDeleteConfigurationWithResponse), ctx, clusterId, id)
}

// NodeConfigurationAPIGetConfigurationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPIGetConfigurationWithResponse(ctx context.Context, clusterId, id string) (*sdk.NodeConfigurationAPIGetConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPIGetConfigurationWithResponse", ctx, clusterId, id)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPIGetConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIGetConfigurationWithResponse indicates an expected call of NodeConfigurationAPIGetConfigurationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPIGetConfigurationWithResponse(ctx, clusterId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIGetConfigurationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPIGetConfigurationWithResponse), ctx, clusterId, id)
}

// NodeConfigurationAPIGetSuggestedConfigurationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPIGetSuggestedConfigurationWithResponse(ctx context.Context, clusterId string) (*sdk.NodeConfigurationAPIGetSuggestedConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPIGetSuggestedConfigurationWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPIGetSuggestedConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIGetSuggestedConfigurationWithResponse indicates an expected call of NodeConfigurationAPIGetSuggestedConfigurationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPIGetSuggestedConfigurationWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIGetSuggestedConfigurationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPIGetSuggestedConfigurationWithResponse), ctx, clusterId)
}

// NodeConfigurationAPIListConfigurationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPIListConfigurationsWithResponse(ctx context.Context, clusterId string) (*sdk.NodeConfigurationAPIListConfigurationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPIListConfigurationsWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPIListConfigurationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIListConfigurationsWithResponse indicates an expected call of NodeConfigurationAPIListConfigurationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPIListConfigurationsWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIListConfigurationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPIListConfigurationsWithResponse), ctx, clusterId)
}

// NodeConfigurationAPISetDefaultWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPISetDefaultWithResponse(ctx context.Context, clusterId, id string) (*sdk.NodeConfigurationAPISetDefaultResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPISetDefaultWithResponse", ctx, clusterId, id)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPISetDefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPISetDefaultWithResponse indicates an expected call of NodeConfigurationAPISetDefaultWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPISetDefaultWithResponse(ctx, clusterId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPISetDefaultWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPISetDefaultWithResponse), ctx, clusterId, id)
}

// NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse(ctx context.Context, clusterId, id, contentType string, body io.Reader) (*sdk.NodeConfigurationAPIUpdateConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse", ctx, clusterId, id, contentType, body)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPIUpdateConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse indicates an expected call of NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse(ctx, clusterId, id, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse), ctx, clusterId, id, contentType, body)
}

// NodeConfigurationAPIUpdateConfigurationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeConfigurationAPIUpdateConfigurationWithResponse(ctx context.Context, clusterId, id string, body sdk.NodeConfigurationAPIUpdateConfigurationJSONRequestBody) (*sdk.NodeConfigurationAPIUpdateConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeConfigurationAPIUpdateConfigurationWithResponse", ctx, clusterId, id, body)
	ret0, _ := ret[0].(*sdk.NodeConfigurationAPIUpdateConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeConfigurationAPIUpdateConfigurationWithResponse indicates an expected call of NodeConfigurationAPIUpdateConfigurationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeConfigurationAPIUpdateConfigurationWithResponse(ctx, clusterId, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeConfigurationAPIUpdateConfigurationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeConfigurationAPIUpdateConfigurationWithResponse), ctx, clusterId, id, body)
}

// NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.NodeTemplatesAPICreateNodeTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPICreateNodeTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse indicates an expected call of NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// NodeTemplatesAPICreateNodeTemplateWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPICreateNodeTemplateWithResponse(ctx context.Context, clusterId string, body sdk.NodeTemplatesAPICreateNodeTemplateJSONRequestBody) (*sdk.NodeTemplatesAPICreateNodeTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPICreateNodeTemplateWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPICreateNodeTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPICreateNodeTemplateWithResponse indicates an expected call of NodeTemplatesAPICreateNodeTemplateWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPICreateNodeTemplateWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPICreateNodeTemplateWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPICreateNodeTemplateWithResponse), ctx, clusterId, body)
}

// NodeTemplatesAPIDeleteNodeTemplateWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPIDeleteNodeTemplateWithResponse(ctx context.Context, clusterId, nodeTemplateName string) (*sdk.NodeTemplatesAPIDeleteNodeTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPIDeleteNodeTemplateWithResponse", ctx, clusterId, nodeTemplateName)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPIDeleteNodeTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIDeleteNodeTemplateWithResponse indicates an expected call of NodeTemplatesAPIDeleteNodeTemplateWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPIDeleteNodeTemplateWithResponse(ctx, clusterId, nodeTemplateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIDeleteNodeTemplateWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPIDeleteNodeTemplateWithResponse), ctx, clusterId, nodeTemplateName)
}

// NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.NodeTemplatesAPIFilterInstanceTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPIFilterInstanceTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse indicates an expected call of NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// NodeTemplatesAPIFilterInstanceTypesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPIFilterInstanceTypesWithResponse(ctx context.Context, clusterId string, body sdk.NodeTemplatesAPIFilterInstanceTypesJSONRequestBody) (*sdk.NodeTemplatesAPIFilterInstanceTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPIFilterInstanceTypesWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPIFilterInstanceTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIFilterInstanceTypesWithResponse indicates an expected call of NodeTemplatesAPIFilterInstanceTypesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPIFilterInstanceTypesWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIFilterInstanceTypesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPIFilterInstanceTypesWithResponse), ctx, clusterId, body)
}

// NodeTemplatesAPIListNodeTemplatesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPIListNodeTemplatesWithResponse(ctx context.Context, clusterId string, params *sdk.NodeTemplatesAPIListNodeTemplatesParams) (*sdk.NodeTemplatesAPIListNodeTemplatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPIListNodeTemplatesWithResponse", ctx, clusterId, params)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPIListNodeTemplatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIListNodeTemplatesWithResponse indicates an expected call of NodeTemplatesAPIListNodeTemplatesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPIListNodeTemplatesWithResponse(ctx, clusterId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIListNodeTemplatesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPIListNodeTemplatesWithResponse), ctx, clusterId, params)
}

// NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId, nodeTemplateName, contentType string, body io.Reader) (*sdk.NodeTemplatesAPIUpdateNodeTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse", ctx, clusterId, nodeTemplateName, contentType, body)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPIUpdateNodeTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse indicates an expected call of NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse(ctx, clusterId, nodeTemplateName, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse), ctx, clusterId, nodeTemplateName, contentType, body)
}

// NodeTemplatesAPIUpdateNodeTemplateWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) NodeTemplatesAPIUpdateNodeTemplateWithResponse(ctx context.Context, clusterId, nodeTemplateName string, body sdk.NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody) (*sdk.NodeTemplatesAPIUpdateNodeTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeTemplatesAPIUpdateNodeTemplateWithResponse", ctx, clusterId, nodeTemplateName, body)
	ret0, _ := ret[0].(*sdk.NodeTemplatesAPIUpdateNodeTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeTemplatesAPIUpdateNodeTemplateWithResponse indicates an expected call of NodeTemplatesAPIUpdateNodeTemplateWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) NodeTemplatesAPIUpdateNodeTemplateWithResponse(ctx, clusterId, nodeTemplateName, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeTemplatesAPIUpdateNodeTemplateWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).NodeTemplatesAPIUpdateNodeTemplateWithResponse), ctx, clusterId, nodeTemplateName, body)
}

// OperationsAPIGetOperationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OperationsAPIGetOperationWithResponse(ctx context.Context, id string) (*sdk.OperationsAPIGetOperationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OperationsAPIGetOperationWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.OperationsAPIGetOperationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OperationsAPIGetOperationWithResponse indicates an expected call of OperationsAPIGetOperationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OperationsAPIGetOperationWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OperationsAPIGetOperationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OperationsAPIGetOperationWithResponse), ctx, id)
}

// PoliciesAPIGetClusterNodeConstraintsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PoliciesAPIGetClusterNodeConstraintsWithResponse(ctx context.Context, clusterId string) (*sdk.PoliciesAPIGetClusterNodeConstraintsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoliciesAPIGetClusterNodeConstraintsWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.PoliciesAPIGetClusterNodeConstraintsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIGetClusterNodeConstraintsWithResponse indicates an expected call of PoliciesAPIGetClusterNodeConstraintsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PoliciesAPIGetClusterNodeConstraintsWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIGetClusterNodeConstraintsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PoliciesAPIGetClusterNodeConstraintsWithResponse), ctx, clusterId)
}

// PoliciesAPIGetClusterPoliciesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PoliciesAPIGetClusterPoliciesWithResponse(ctx context.Context, clusterId string) (*sdk.PoliciesAPIGetClusterPoliciesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoliciesAPIGetClusterPoliciesWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.PoliciesAPIGetClusterPoliciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIGetClusterPoliciesWithResponse indicates an expected call of PoliciesAPIGetClusterPoliciesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PoliciesAPIGetClusterPoliciesWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIGetClusterPoliciesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PoliciesAPIGetClusterPoliciesWithResponse), ctx, clusterId)
}

// PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.PoliciesAPIUpsertClusterPoliciesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.PoliciesAPIUpsertClusterPoliciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse indicates an expected call of PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// PoliciesAPIUpsertClusterPoliciesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PoliciesAPIUpsertClusterPoliciesWithResponse(ctx context.Context, clusterId string, body sdk.PoliciesAPIUpsertClusterPoliciesJSONRequestBody) (*sdk.PoliciesAPIUpsertClusterPoliciesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoliciesAPIUpsertClusterPoliciesWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.PoliciesAPIUpsertClusterPoliciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoliciesAPIUpsertClusterPoliciesWithResponse indicates an expected call of PoliciesAPIUpsertClusterPoliciesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PoliciesAPIUpsertClusterPoliciesWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoliciesAPIUpsertClusterPoliciesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PoliciesAPIUpsertClusterPoliciesWithResponse), ctx, clusterId, body)
}

// SSOAPICreateSSOConnectionWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SSOAPICreateSSOConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*sdk.SSOAPICreateSSOConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOAPICreateSSOConnectionWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*sdk.SSOAPICreateSSOConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPICreateSSOConnectionWithBodyWithResponse indicates an expected call of SSOAPICreateSSOConnectionWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SSOAPICreateSSOConnectionWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPICreateSSOConnectionWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SSOAPICreateSSOConnectionWithBodyWithResponse), ctx, contentType, body)
}

// SSOAPICreateSSOConnectionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SSOAPICreateSSOConnectionWithResponse(ctx context.Context, body sdk.SSOAPICreateSSOConnectionJSONRequestBody) (*sdk.SSOAPICreateSSOConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOAPICreateSSOConnectionWithResponse", ctx, body)
	ret0, _ := ret[0].(*sdk.SSOAPICreateSSOConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPICreateSSOConnectionWithResponse indicates an expected call of SSOAPICreateSSOConnectionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SSOAPICreateSSOConnectionWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPICreateSSOConnectionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SSOAPICreateSSOConnectionWithResponse), ctx, body)
}

// SSOAPIDeleteSSOConnectionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SSOAPIDeleteSSOConnectionWithResponse(ctx context.Context, id string) (*sdk.SSOAPIDeleteSSOConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOAPIDeleteSSOConnectionWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.SSOAPIDeleteSSOConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIDeleteSSOConnectionWithResponse indicates an expected call of SSOAPIDeleteSSOConnectionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SSOAPIDeleteSSOConnectionWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIDeleteSSOConnectionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SSOAPIDeleteSSOConnectionWithResponse), ctx, id)
}

// SSOAPIGetSSOConnectionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SSOAPIGetSSOConnectionWithResponse(ctx context.Context, id string) (*sdk.SSOAPIGetSSOConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOAPIGetSSOConnectionWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.SSOAPIGetSSOConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIGetSSOConnectionWithResponse indicates an expected call of SSOAPIGetSSOConnectionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SSOAPIGetSSOConnectionWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIGetSSOConnectionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SSOAPIGetSSOConnectionWithResponse), ctx, id)
}

// SSOAPIListSSOConnectionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SSOAPIListSSOConnectionsWithResponse(ctx context.Context) (*sdk.SSOAPIListSSOConnectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOAPIListSSOConnectionsWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.SSOAPIListSSOConnectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIListSSOConnectionsWithResponse indicates an expected call of SSOAPIListSSOConnectionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SSOAPIListSSOConnectionsWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIListSSOConnectionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SSOAPIListSSOConnectionsWithResponse), ctx)
}

// SSOAPIUpdateSSOConnectionWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SSOAPIUpdateSSOConnectionWithBodyWithResponse(ctx context.Context, id, contentType string, body io.Reader) (*sdk.SSOAPIUpdateSSOConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOAPIUpdateSSOConnectionWithBodyWithResponse", ctx, id, contentType, body)
	ret0, _ := ret[0].(*sdk.SSOAPIUpdateSSOConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIUpdateSSOConnectionWithBodyWithResponse indicates an expected call of SSOAPIUpdateSSOConnectionWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SSOAPIUpdateSSOConnectionWithBodyWithResponse(ctx, id, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIUpdateSSOConnectionWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SSOAPIUpdateSSOConnectionWithBodyWithResponse), ctx, id, contentType, body)
}

// SSOAPIUpdateSSOConnectionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) SSOAPIUpdateSSOConnectionWithResponse(ctx context.Context, id string, body sdk.SSOAPIUpdateSSOConnectionJSONRequestBody) (*sdk.SSOAPIUpdateSSOConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSOAPIUpdateSSOConnectionWithResponse", ctx, id, body)
	ret0, _ := ret[0].(*sdk.SSOAPIUpdateSSOConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSOAPIUpdateSSOConnectionWithResponse indicates an expected call of SSOAPIUpdateSSOConnectionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) SSOAPIUpdateSSOConnectionWithResponse(ctx, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSOAPIUpdateSSOConnectionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SSOAPIUpdateSSOConnectionWithResponse), ctx, id, body)
}

// ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.ScheduledRebalancingAPICreateRebalancingJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPICreateRebalancingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse indicates an expected call of ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// ScheduledRebalancingAPICreateRebalancingJobWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPICreateRebalancingJobWithResponse(ctx context.Context, clusterId string, body sdk.ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody) (*sdk.ScheduledRebalancingAPICreateRebalancingJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingJobWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPICreateRebalancingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingJobWithResponse indicates an expected call of ScheduledRebalancingAPICreateRebalancingJobWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingJobWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingJobWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPICreateRebalancingJobWithResponse), ctx, clusterId, body)
}

// ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*sdk.ScheduledRebalancingAPICreateRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPICreateRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse indicates an expected call of ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse), ctx, contentType, body)
}

// ScheduledRebalancingAPICreateRebalancingScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPICreateRebalancingScheduleWithResponse(ctx context.Context, body sdk.ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody) (*sdk.ScheduledRebalancingAPICreateRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPICreateRebalancingScheduleWithResponse", ctx, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPICreateRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPICreateRebalancingScheduleWithResponse indicates an expected call of ScheduledRebalancingAPICreateRebalancingScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPICreateRebalancingScheduleWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPICreateRebalancingScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPICreateRebalancingScheduleWithResponse), ctx, body)
}

// ScheduledRebalancingAPIDeleteRebalancingJobWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIDeleteRebalancingJobWithResponse(ctx context.Context, clusterId, id string) (*sdk.ScheduledRebalancingAPIDeleteRebalancingJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIDeleteRebalancingJobWithResponse", ctx, clusterId, id)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIDeleteRebalancingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIDeleteRebalancingJobWithResponse indicates an expected call of ScheduledRebalancingAPIDeleteRebalancingJobWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIDeleteRebalancingJobWithResponse(ctx, clusterId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIDeleteRebalancingJobWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIDeleteRebalancingJobWithResponse), ctx, clusterId, id)
}

// ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse(ctx context.Context, id string) (*sdk.ScheduledRebalancingAPIDeleteRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIDeleteRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse indicates an expected call of ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse), ctx, id)
}

// ScheduledRebalancingAPIGetRebalancingJobWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIGetRebalancingJobWithResponse(ctx context.Context, clusterId, id string) (*sdk.ScheduledRebalancingAPIGetRebalancingJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIGetRebalancingJobWithResponse", ctx, clusterId, id)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIGetRebalancingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIGetRebalancingJobWithResponse indicates an expected call of ScheduledRebalancingAPIGetRebalancingJobWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIGetRebalancingJobWithResponse(ctx, clusterId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIGetRebalancingJobWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIGetRebalancingJobWithResponse), ctx, clusterId, id)
}

// ScheduledRebalancingAPIGetRebalancingScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIGetRebalancingScheduleWithResponse(ctx context.Context, id string) (*sdk.ScheduledRebalancingAPIGetRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIGetRebalancingScheduleWithResponse", ctx, id)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIGetRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIGetRebalancingScheduleWithResponse indicates an expected call of ScheduledRebalancingAPIGetRebalancingScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIGetRebalancingScheduleWithResponse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIGetRebalancingScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIGetRebalancingScheduleWithResponse), ctx, id)
}

// ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse(ctx context.Context) (*sdk.ScheduledRebalancingAPIListAvailableRebalancingTZResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIListAvailableRebalancingTZResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse indicates an expected call of ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse), ctx)
}

// ScheduledRebalancingAPIListRebalancingJobsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIListRebalancingJobsWithResponse(ctx context.Context, clusterId string) (*sdk.ScheduledRebalancingAPIListRebalancingJobsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIListRebalancingJobsWithResponse", ctx, clusterId)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIListRebalancingJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIListRebalancingJobsWithResponse indicates an expected call of ScheduledRebalancingAPIListRebalancingJobsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIListRebalancingJobsWithResponse(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIListRebalancingJobsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIListRebalancingJobsWithResponse), ctx, clusterId)
}

// ScheduledRebalancingAPIListRebalancingSchedulesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIListRebalancingSchedulesWithResponse(ctx context.Context) (*sdk.ScheduledRebalancingAPIListRebalancingSchedulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIListRebalancingSchedulesWithResponse", ctx)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIListRebalancingSchedulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIListRebalancingSchedulesWithResponse indicates an expected call of ScheduledRebalancingAPIListRebalancingSchedulesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIListRebalancingSchedulesWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIListRebalancingSchedulesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIListRebalancingSchedulesWithResponse), ctx)
}

// ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader) (*sdk.ScheduledRebalancingAPIPreviewRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse", ctx, clusterId, contentType, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIPreviewRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse indicates an expected call of ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse(ctx, clusterId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse), ctx, clusterId, contentType, body)
}

// ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse(ctx context.Context, clusterId string, body sdk.ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody) (*sdk.ScheduledRebalancingAPIPreviewRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse", ctx, clusterId, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIPreviewRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse indicates an expected call of ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse(ctx, clusterId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse), ctx, clusterId, body)
}

// ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse(ctx context.Context, clusterId, id, contentType string, body io.Reader) (*sdk.ScheduledRebalancingAPIUpdateRebalancingJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse", ctx, clusterId, id, contentType, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIUpdateRebalancingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse(ctx, clusterId, id, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse), ctx, clusterId, id, contentType, body)
}

// ScheduledRebalancingAPIUpdateRebalancingJobWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIUpdateRebalancingJobWithResponse(ctx context.Context, clusterId, id string, body sdk.ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody) (*sdk.ScheduledRebalancingAPIUpdateRebalancingJobResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingJobWithResponse", ctx, clusterId, id, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIUpdateRebalancingJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingJobWithResponse indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingJobWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingJobWithResponse(ctx, clusterId, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingJobWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingJobWithResponse), ctx, clusterId, id, body)
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse(ctx context.Context, params *sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleParams, contentType string, body io.Reader) (*sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse", ctx, params, contentType, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse(ctx, params, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse), ctx, params, contentType, body)
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse(ctx context.Context, params *sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleParams, body sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody) (*sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse", ctx, params, body)
	ret0, _ := ret[0].(*sdk.ScheduledRebalancingAPIUpdateRebalancingScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse indicates an expected call of ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse(ctx, params, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse), ctx, params, body)
}

// UpdateCurrentUserProfileWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateCurrentUserProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*sdk.UpdateCurrentUserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrentUserProfileWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*sdk.UpdateCurrentUserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCurrentUserProfileWithBodyWithResponse indicates an expected call of UpdateCurrentUserProfileWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateCurrentUserProfileWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrentUserProfileWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateCurrentUserProfileWithBodyWithResponse), ctx, contentType, body)
}

// UpdateCurrentUserProfileWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateCurrentUserProfileWithResponse(ctx context.Context, body sdk.UpdateCurrentUserProfileJSONRequestBody) (*sdk.UpdateCurrentUserProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrentUserProfileWithResponse", ctx, body)
	ret0, _ := ret[0].(*sdk.UpdateCurrentUserProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCurrentUserProfileWithResponse indicates an expected call of UpdateCurrentUserProfileWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateCurrentUserProfileWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrentUserProfileWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateCurrentUserProfileWithResponse), ctx, body)
}

// UpdateOrganizationUserWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateOrganizationUserWithBodyWithResponse(ctx context.Context, id, userId, contentType string, body io.Reader) (*sdk.UpdateOrganizationUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationUserWithBodyWithResponse", ctx, id, userId, contentType, body)
	ret0, _ := ret[0].(*sdk.UpdateOrganizationUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationUserWithBodyWithResponse indicates an expected call of UpdateOrganizationUserWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateOrganizationUserWithBodyWithResponse(ctx, id, userId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationUserWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateOrganizationUserWithBodyWithResponse), ctx, id, userId, contentType, body)
}

// UpdateOrganizationUserWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateOrganizationUserWithResponse(ctx context.Context, id, userId string, body sdk.UpdateOrganizationUserJSONRequestBody) (*sdk.UpdateOrganizationUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationUserWithResponse", ctx, id, userId, body)
	ret0, _ := ret[0].(*sdk.UpdateOrganizationUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationUserWithResponse indicates an expected call of UpdateOrganizationUserWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateOrganizationUserWithResponse(ctx, id, userId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationUserWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateOrganizationUserWithResponse), ctx, id, userId, body)
}

// UpdateOrganizationWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateOrganizationWithBodyWithResponse(ctx context.Context, id, contentType string, body io.Reader) (*sdk.UpdateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationWithBodyWithResponse", ctx, id, contentType, body)
	ret0, _ := ret[0].(*sdk.UpdateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationWithBodyWithResponse indicates an expected call of UpdateOrganizationWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateOrganizationWithBodyWithResponse(ctx, id, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateOrganizationWithBodyWithResponse), ctx, id, contentType, body)
}

// UpdateOrganizationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateOrganizationWithResponse(ctx context.Context, id string, body sdk.UpdateOrganizationJSONRequestBody) (*sdk.UpdateOrganizationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganizationWithResponse", ctx, id, body)
	ret0, _ := ret[0].(*sdk.UpdateOrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganizationWithResponse indicates an expected call of UpdateOrganizationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateOrganizationWithResponse(ctx, id, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganizationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateOrganizationWithResponse), ctx, id, body)
}

// MockResponse is a mock of Response interface.
type MockResponse struct {
	ctrl     *gomock.Controller
	recorder *MockResponseMockRecorder
}

// MockResponseMockRecorder is the mock recorder for MockResponse.
type MockResponseMockRecorder struct {
	mock *MockResponse
}

// NewMockResponse creates a new mock instance.
func NewMockResponse(ctrl *gomock.Controller) *MockResponse {
	mock := &MockResponse{ctrl: ctrl}
	mock.recorder = &MockResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponse) EXPECT() *MockResponseMockRecorder {
	return m.recorder
}

// GetBody mocks base method.
func (m *MockResponse) GetBody() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetBody indicates an expected call of GetBody.
func (mr *MockResponseMockRecorder) GetBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockResponse)(nil).GetBody))
}

// Status mocks base method.
func (m *MockResponse) Status() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(string)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockResponseMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockResponse)(nil).Status))
}

// StatusCode mocks base method.
func (m *MockResponse) StatusCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// StatusCode indicates an expected call of StatusCode.
func (mr *MockResponseMockRecorder) StatusCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCode", reflect.TypeOf((*MockResponse)(nil).StatusCode))
}
