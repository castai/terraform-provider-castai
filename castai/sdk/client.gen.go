// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package sdk

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAgentInstallScript request
	GetAgentInstallScript(ctx context.Context, params *GetAgentInstallScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAuditEvents request
	ListAuditEvents(ctx context.Context, params *ListAuditEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAuthTokens request
	ListAuthTokens(ctx context.Context, params *ListAuthTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthToken request with any body
	CreateAuthTokenWithBody(ctx context.Context, params *CreateAuthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthToken(ctx context.Context, params *CreateAuthTokenParams, body CreateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthToken request
	DeleteAuthToken(ctx context.Context, authTokenId AuthTokenId, params *DeleteAuthTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthToken request
	GetAuthToken(ctx context.Context, authTokenId AuthTokenId, params *GetAuthTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAuthToken request with any body
	UpdateAuthTokenWithBody(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAuthToken(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, body UpdateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CostReportAPIListAllocationGroups request
	CostReportAPIListAllocationGroups(ctx context.Context, params *CostReportAPIListAllocationGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CostReportAPICreateAllocationGroup request with any body
	CostReportAPICreateAllocationGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CostReportAPICreateAllocationGroup(ctx context.Context, body CostReportAPICreateAllocationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CostReportAPIDeleteAllocationGroup request
	CostReportAPIDeleteAllocationGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CostReportAPIUpdateAllocationGroup request with any body
	CostReportAPIUpdateAllocationGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CostReportAPIUpdateAllocationGroup(ctx context.Context, id string, body CostReportAPIUpdateAllocationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CostReportAPIGetClusterCostHistory2 request
	CostReportAPIGetClusterCostHistory2(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostHistory2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CostReportAPIGetClusterCostReport2 request
	CostReportAPIGetClusterCostReport2(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostReport2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CostReportAPIGetClusterWorkloadReport request
	CostReportAPIGetClusterWorkloadReport(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CostReportAPIGetClusterWorkloadReport2 request with any body
	CostReportAPIGetClusterWorkloadReport2WithBody(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadReport2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CostReportAPIGetClusterWorkloadReport2(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadReport2Params, body CostReportAPIGetClusterWorkloadReport2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CostReportAPIGetClusterWorkloadLabels request
	CostReportAPIGetClusterWorkloadLabels(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CostReportAPIGetClustersCostReport request
	CostReportAPIGetClustersCostReport(ctx context.Context, params *CostReportAPIGetClustersCostReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCloudCredentials request
	ListCloudCredentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCloudCredentials request with any body
	CreateCloudCredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCloudCredentials(ctx context.Context, body CreateCloudCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCloudCredentials request
	DeleteCloudCredentials(ctx context.Context, credentialsId CredentialsId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudCredentials request
	GetCloudCredentials(ctx context.Context, credentialsId CredentialsId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryBlacklistAPIListBlacklists request
	InventoryBlacklistAPIListBlacklists(ctx context.Context, params *InventoryBlacklistAPIListBlacklistsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryBlacklistAPIAddBlacklist request with any body
	InventoryBlacklistAPIAddBlacklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InventoryBlacklistAPIAddBlacklist(ctx context.Context, body InventoryBlacklistAPIAddBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryBlacklistAPIRemoveBlacklist request with any body
	InventoryBlacklistAPIRemoveBlacklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InventoryBlacklistAPIRemoveBlacklist(ctx context.Context, body InventoryBlacklistAPIRemoveBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInvitation request with any body
	CreateInvitationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInvitation(ctx context.Context, body CreateInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClaimInvitation request with any body
	ClaimInvitationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClaimInvitation(ctx context.Context, id string, body ClaimInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterActionsAPIPollClusterActions request
	ClusterActionsAPIPollClusterActions(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterActionsAPIIngestLogs request with any body
	ClusterActionsAPIIngestLogsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClusterActionsAPIIngestLogs(ctx context.Context, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterActionsAPIAckClusterAction request with any body
	ClusterActionsAPIAckClusterActionWithBody(ctx context.Context, clusterId string, actionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClusterActionsAPIAckClusterAction(ctx context.Context, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CostReportAPIGetClusterCostHistory request
	CostReportAPIGetClusterCostHistory(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CostReportAPIGetClusterCostReport request
	CostReportAPIGetClusterCostReport(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CostReportAPIGetSavingsRecommendation2 request
	CostReportAPIGetSavingsRecommendation2(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPIFilterInstanceTypes request with any body
	NodeTemplatesAPIFilterInstanceTypesWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeTemplatesAPIFilterInstanceTypes(ctx context.Context, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetricsAPIGetCPUUsageMetrics request
	MetricsAPIGetCPUUsageMetrics(ctx context.Context, clusterId string, params *MetricsAPIGetCPUUsageMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetricsAPIGetGaugesMetrics request
	MetricsAPIGetGaugesMetrics(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MetricsAPIGetMemoryUsageMetrics request
	MetricsAPIGetMemoryUsageMetrics(ctx context.Context, clusterId string, params *MetricsAPIGetMemoryUsageMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIListConfigurations request
	NodeConfigurationAPIListConfigurations(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPICreateConfiguration request with any body
	NodeConfigurationAPICreateConfigurationWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeConfigurationAPICreateConfiguration(ctx context.Context, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIDeleteConfiguration request
	NodeConfigurationAPIDeleteConfiguration(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIGetConfiguration request
	NodeConfigurationAPIGetConfiguration(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIUpdateConfiguration request with any body
	NodeConfigurationAPIUpdateConfigurationWithBody(ctx context.Context, clusterId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeConfigurationAPIUpdateConfiguration(ctx context.Context, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPISetDefault request
	NodeConfigurationAPISetDefault(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesAPIGetClusterNodeConstraints request
	PoliciesAPIGetClusterNodeConstraints(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPIListNodeTemplates request
	NodeTemplatesAPIListNodeTemplates(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPICreateNodeTemplate request with any body
	NodeTemplatesAPICreateNodeTemplateWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeTemplatesAPICreateNodeTemplate(ctx context.Context, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPIDeleteNodeTemplate request
	NodeTemplatesAPIDeleteNodeTemplate(ctx context.Context, clusterId string, nodeTemplateName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPIUpdateNodeTemplate request with any body
	NodeTemplatesAPIUpdateNodeTemplateWithBody(ctx context.Context, clusterId string, nodeTemplateName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeTemplatesAPIUpdateNodeTemplate(ctx context.Context, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesAPIGetClusterPolicies request
	PoliciesAPIGetClusterPolicies(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesAPIUpsertClusterPolicies request with any body
	PoliciesAPIUpsertClusterPoliciesWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PoliciesAPIUpsertClusterPolicies(ctx context.Context, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProblematicWorkloads request
	GetProblematicWorkloads(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRebalancedWorkloads request
	GetRebalancedWorkloads(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRebalancingPlans request
	ListRebalancingPlans(ctx context.Context, clusterId ClusterId, params *ListRebalancingPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Rebalance request with any body
	RebalanceWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Rebalance(ctx context.Context, clusterId ClusterId, body RebalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRebalancingPlan request
	GetRebalancingPlan(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExecuteRebalancingPlan request with any body
	ExecuteRebalancingPlanWithBody(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecuteRebalancingPlan(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, body ExecuteRebalancingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkloads request
	GetWorkloads(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIListClusters request
	ExternalClusterAPIListClusters(ctx context.Context, params *ExternalClusterAPIListClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIRegisterCluster request with any body
	ExternalClusterAPIRegisterClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIRegisterCluster(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExternalClusterOperation request
	GetExternalClusterOperation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDeleteCluster request
	ExternalClusterAPIDeleteCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCluster request
	ExternalClusterAPIGetCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIUpdateCluster request with any body
	ExternalClusterAPIUpdateClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIUpdateCluster(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetAssumeRoleUser request
	ExternalClusterAPIGetAssumeRoleUser(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCredentialsScript request
	ExternalClusterAPIGetCredentialsScript(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDisconnectCluster request with any body
	ExternalClusterAPIDisconnectClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIDisconnectCluster(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CostReportAPIGetSavingsRecommendation request
	CostReportAPIGetSavingsRecommendation(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIHandleCloudEvent request with any body
	ExternalClusterAPIHandleCloudEventWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIHandleCloudEvent(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIListNodes request
	ExternalClusterAPIListNodes(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIAddNode request with any body
	ExternalClusterAPIAddNodeWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIAddNode(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDeleteNode request
	ExternalClusterAPIDeleteNode(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetNode request
	ExternalClusterAPIGetNode(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDrainNode request with any body
	ExternalClusterAPIDrainNodeWithBody(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIDrainNode(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIPauseCluster request
	ExternalClusterAPIPauseCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIReconcileCluster request
	ExternalClusterAPIReconcileCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIResumeCluster request
	ExternalClusterAPIResumeCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPICreateClusterToken request
	ExternalClusterAPICreateClusterToken(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CurrentUserProfile request
	CurrentUserProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCurrentUserProfile request with any body
	UpdateCurrentUserProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCurrentUserProfile(ctx context.Context, body UpdateCurrentUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPromMetrics request
	GetPromMetrics(ctx context.Context, params *GetPromMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIListNotifications request
	NotificationAPIListNotifications(ctx context.Context, params *NotificationAPIListNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIAckNotifications request with any body
	NotificationAPIAckNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationAPIAckNotifications(ctx context.Context, body NotificationAPIAckNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIListWebhookConfigs request
	NotificationAPIListWebhookConfigs(ctx context.Context, params *NotificationAPIListWebhookConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPICreateWebhookConfig request with any body
	NotificationAPICreateWebhookConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationAPICreateWebhookConfig(ctx context.Context, body NotificationAPICreateWebhookConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIDeleteWebhookConfig request
	NotificationAPIDeleteWebhookConfig(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIGetWebhookConfig request
	NotificationAPIGetWebhookConfig(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIUpdateWebhookConfig request with any body
	NotificationAPIUpdateWebhookConfigWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NotificationAPIUpdateWebhookConfig(ctx context.Context, id string, body NotificationAPIUpdateWebhookConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NotificationAPIGetNotification request
	NotificationAPIGetNotification(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizations request
	ListOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganization request with any body
	CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganization request
	DeleteOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganization request
	GetOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganization request with any body
	UpdateOrganizationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganization(ctx context.Context, id string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationUsers request
	GetOrganizationUsers(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationUser request with any body
	CreateOrganizationUserWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationUser(ctx context.Context, id string, body CreateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationUser request
	DeleteOrganizationUser(ctx context.Context, id string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationUser request with any body
	UpdateOrganizationUserWithBody(ctx context.Context, id string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganizationUser(ctx context.Context, id string, userId string, body UpdateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsageReport request
	GetUsageReport(ctx context.Context, params *GetUsageReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCredentialsScriptTemplate request
	ExternalClusterAPIGetCredentialsScriptTemplate(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetBestPracticesReport request
	InsightsAPIGetBestPracticesReport(ctx context.Context, params *InsightsAPIGetBestPracticesReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetBestPracticesCheckDetails request
	InsightsAPIGetBestPracticesCheckDetails(ctx context.Context, ruleId string, params *InsightsAPIGetBestPracticesCheckDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetBestPracticesReportFilters request
	InsightsAPIGetBestPracticesReportFilters(ctx context.Context, params *InsightsAPIGetBestPracticesReportFiltersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIScheduleBestPracticesScan request with any body
	InsightsAPIScheduleBestPracticesScanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIScheduleBestPracticesScan(ctx context.Context, body InsightsAPIScheduleBestPracticesScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetBestPracticesReportSummary request
	InsightsAPIGetBestPracticesReportSummary(ctx context.Context, params *InsightsAPIGetBestPracticesReportSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetBestPracticesOverview request
	InsightsAPIGetBestPracticesOverview(ctx context.Context, params *InsightsAPIGetBestPracticesOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetOverviewSummary request
	InsightsAPIGetOverviewSummary(ctx context.Context, params *InsightsAPIGetOverviewSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetVulnerabilitiesOverview request
	InsightsAPIGetVulnerabilitiesOverview(ctx context.Context, params *InsightsAPIGetVulnerabilitiesOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetVulnerabilitiesReport request
	InsightsAPIGetVulnerabilitiesReport(ctx context.Context, params *InsightsAPIGetVulnerabilitiesReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetVulnerabilitiesDetails request
	InsightsAPIGetVulnerabilitiesDetails(ctx context.Context, objectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetVulnerabilitiesResources request
	InsightsAPIGetVulnerabilitiesResources(ctx context.Context, objectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetPackageVulnerabilities request
	InsightsAPIGetPackageVulnerabilities(ctx context.Context, objectId string, params *InsightsAPIGetPackageVulnerabilitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetResourceVulnerablePackages request
	InsightsAPIGetResourceVulnerablePackages(ctx context.Context, objectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIScheduleVulnerabilitiesScan request with any body
	InsightsAPIScheduleVulnerabilitiesScanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIScheduleVulnerabilitiesScan(ctx context.Context, body InsightsAPIScheduleVulnerabilitiesScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetVulnerabilitiesReportSummary request
	InsightsAPIGetVulnerabilitiesReportSummary(ctx context.Context, params *InsightsAPIGetVulnerabilitiesReportSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIDisconnectAgent request
	InsightsAPIDisconnectAgent(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIIngestAgentLog request with any body
	InsightsAPIIngestAgentLogWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIIngestAgentLog(ctx context.Context, clusterId string, body InsightsAPIIngestAgentLogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIPostAgentTelemetry request with any body
	InsightsAPIPostAgentTelemetryWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InsightsAPIPostAgentTelemetry(ctx context.Context, clusterId string, body InsightsAPIPostAgentTelemetryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetAgentInstallScript request
	InsightsAPIGetAgentInstallScript(ctx context.Context, clusterId string, params *InsightsAPIGetAgentInstallScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InsightsAPIGetAgentCloudScript request
	InsightsAPIGetAgentCloudScript(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAgentInstallScript(ctx context.Context, params *GetAgentInstallScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentInstallScriptRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAuditEvents(ctx context.Context, params *ListAuditEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAuditEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAuthTokens(ctx context.Context, params *ListAuthTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAuthTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthTokenWithBody(ctx context.Context, params *CreateAuthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthTokenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthToken(ctx context.Context, params *CreateAuthTokenParams, body CreateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthTokenRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthToken(ctx context.Context, authTokenId AuthTokenId, params *DeleteAuthTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthTokenRequest(c.Server, authTokenId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthToken(ctx context.Context, authTokenId AuthTokenId, params *GetAuthTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthTokenRequest(c.Server, authTokenId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthTokenWithBody(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthTokenRequestWithBody(c.Server, authTokenId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthToken(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, body UpdateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthTokenRequest(c.Server, authTokenId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIListAllocationGroups(ctx context.Context, params *CostReportAPIListAllocationGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIListAllocationGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPICreateAllocationGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPICreateAllocationGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPICreateAllocationGroup(ctx context.Context, body CostReportAPICreateAllocationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPICreateAllocationGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIDeleteAllocationGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIDeleteAllocationGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIUpdateAllocationGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIUpdateAllocationGroupRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIUpdateAllocationGroup(ctx context.Context, id string, body CostReportAPIUpdateAllocationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIUpdateAllocationGroupRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIGetClusterCostHistory2(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostHistory2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIGetClusterCostHistory2Request(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIGetClusterCostReport2(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostReport2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIGetClusterCostReport2Request(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIGetClusterWorkloadReport(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIGetClusterWorkloadReportRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIGetClusterWorkloadReport2WithBody(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadReport2Params, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIGetClusterWorkloadReport2RequestWithBody(c.Server, clusterId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIGetClusterWorkloadReport2(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadReport2Params, body CostReportAPIGetClusterWorkloadReport2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIGetClusterWorkloadReport2Request(c.Server, clusterId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIGetClusterWorkloadLabels(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIGetClusterWorkloadLabelsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIGetClustersCostReport(ctx context.Context, params *CostReportAPIGetClustersCostReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIGetClustersCostReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCloudCredentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCloudCredentialsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCloudCredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCloudCredentialsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCloudCredentials(ctx context.Context, body CreateCloudCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCloudCredentialsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCloudCredentials(ctx context.Context, credentialsId CredentialsId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCloudCredentialsRequest(c.Server, credentialsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudCredentials(ctx context.Context, credentialsId CredentialsId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudCredentialsRequest(c.Server, credentialsId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryBlacklistAPIListBlacklists(ctx context.Context, params *InventoryBlacklistAPIListBlacklistsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryBlacklistAPIListBlacklistsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryBlacklistAPIAddBlacklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryBlacklistAPIAddBlacklistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryBlacklistAPIAddBlacklist(ctx context.Context, body InventoryBlacklistAPIAddBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryBlacklistAPIAddBlacklistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryBlacklistAPIRemoveBlacklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryBlacklistAPIRemoveBlacklistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryBlacklistAPIRemoveBlacklist(ctx context.Context, body InventoryBlacklistAPIRemoveBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryBlacklistAPIRemoveBlacklistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInvitationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInvitationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInvitation(ctx context.Context, body CreateInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInvitationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClaimInvitationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClaimInvitationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClaimInvitation(ctx context.Context, id string, body ClaimInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClaimInvitationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIPollClusterActions(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIPollClusterActionsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIIngestLogsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIIngestLogsRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIIngestLogs(ctx context.Context, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIIngestLogsRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIAckClusterActionWithBody(ctx context.Context, clusterId string, actionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIAckClusterActionRequestWithBody(c.Server, clusterId, actionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIAckClusterAction(ctx context.Context, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIAckClusterActionRequest(c.Server, clusterId, actionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIGetClusterCostHistory(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIGetClusterCostHistoryRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIGetClusterCostReport(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIGetClusterCostReportRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIGetSavingsRecommendation2(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIGetSavingsRecommendation2Request(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIFilterInstanceTypesWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIFilterInstanceTypesRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIFilterInstanceTypes(ctx context.Context, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIFilterInstanceTypesRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsAPIGetCPUUsageMetrics(ctx context.Context, clusterId string, params *MetricsAPIGetCPUUsageMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsAPIGetCPUUsageMetricsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsAPIGetGaugesMetrics(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsAPIGetGaugesMetricsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsAPIGetMemoryUsageMetrics(ctx context.Context, clusterId string, params *MetricsAPIGetMemoryUsageMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsAPIGetMemoryUsageMetricsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIListConfigurations(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIListConfigurationsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPICreateConfigurationWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPICreateConfigurationRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPICreateConfiguration(ctx context.Context, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPICreateConfigurationRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIDeleteConfiguration(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIDeleteConfigurationRequest(c.Server, clusterId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIGetConfiguration(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIGetConfigurationRequest(c.Server, clusterId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIUpdateConfigurationWithBody(ctx context.Context, clusterId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIUpdateConfigurationRequestWithBody(c.Server, clusterId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIUpdateConfiguration(ctx context.Context, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIUpdateConfigurationRequest(c.Server, clusterId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPISetDefault(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPISetDefaultRequest(c.Server, clusterId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesAPIGetClusterNodeConstraints(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesAPIGetClusterNodeConstraintsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIListNodeTemplates(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIListNodeTemplatesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPICreateNodeTemplateWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPICreateNodeTemplateRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPICreateNodeTemplate(ctx context.Context, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPICreateNodeTemplateRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIDeleteNodeTemplate(ctx context.Context, clusterId string, nodeTemplateName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIDeleteNodeTemplateRequest(c.Server, clusterId, nodeTemplateName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIUpdateNodeTemplateWithBody(ctx context.Context, clusterId string, nodeTemplateName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIUpdateNodeTemplateRequestWithBody(c.Server, clusterId, nodeTemplateName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIUpdateNodeTemplate(ctx context.Context, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIUpdateNodeTemplateRequest(c.Server, clusterId, nodeTemplateName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesAPIGetClusterPolicies(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesAPIGetClusterPoliciesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesAPIUpsertClusterPoliciesWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesAPIUpsertClusterPoliciesRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesAPIUpsertClusterPolicies(ctx context.Context, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesAPIUpsertClusterPoliciesRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProblematicWorkloads(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProblematicWorkloadsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRebalancedWorkloads(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRebalancedWorkloadsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRebalancingPlans(ctx context.Context, clusterId ClusterId, params *ListRebalancingPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRebalancingPlansRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RebalanceWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRebalanceRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Rebalance(ctx context.Context, clusterId ClusterId, body RebalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRebalanceRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRebalancingPlan(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRebalancingPlanRequest(c.Server, clusterId, rebalancingPlanId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteRebalancingPlanWithBody(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteRebalancingPlanRequestWithBody(c.Server, clusterId, rebalancingPlanId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteRebalancingPlan(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, body ExecuteRebalancingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteRebalancingPlanRequest(c.Server, clusterId, rebalancingPlanId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkloads(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkloadsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIListClusters(ctx context.Context, params *ExternalClusterAPIListClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIListClustersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIRegisterClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIRegisterClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIRegisterCluster(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIRegisterClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExternalClusterOperation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExternalClusterOperationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDeleteCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDeleteClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateCluster(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetAssumeRoleUser(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetAssumeRoleUserRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCredentialsScript(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCredentialsScriptRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDisconnectClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDisconnectClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDisconnectCluster(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDisconnectClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CostReportAPIGetSavingsRecommendation(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCostReportAPIGetSavingsRecommendationRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIHandleCloudEventWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIHandleCloudEventRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIHandleCloudEvent(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIHandleCloudEventRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIListNodes(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIListNodesRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIAddNodeWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIAddNodeRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIAddNode(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIAddNodeRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDeleteNode(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDeleteNodeRequest(c.Server, clusterId, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetNode(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetNodeRequest(c.Server, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDrainNodeWithBody(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDrainNodeRequestWithBody(c.Server, clusterId, nodeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDrainNode(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDrainNodeRequest(c.Server, clusterId, nodeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIPauseCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIPauseClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIReconcileCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIReconcileClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIResumeCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIResumeClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPICreateClusterToken(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPICreateClusterTokenRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CurrentUserProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCurrentUserProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCurrentUserProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCurrentUserProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCurrentUserProfile(ctx context.Context, body UpdateCurrentUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCurrentUserProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromMetrics(ctx context.Context, params *GetPromMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromMetricsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIListNotifications(ctx context.Context, params *NotificationAPIListNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIListNotificationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIAckNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIAckNotificationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIAckNotifications(ctx context.Context, body NotificationAPIAckNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIAckNotificationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIListWebhookConfigs(ctx context.Context, params *NotificationAPIListWebhookConfigsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIListWebhookConfigsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPICreateWebhookConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPICreateWebhookConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPICreateWebhookConfig(ctx context.Context, body NotificationAPICreateWebhookConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPICreateWebhookConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIDeleteWebhookConfig(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIDeleteWebhookConfigRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIGetWebhookConfig(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIGetWebhookConfigRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIUpdateWebhookConfigWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIUpdateWebhookConfigRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIUpdateWebhookConfig(ctx context.Context, id string, body NotificationAPIUpdateWebhookConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIUpdateWebhookConfigRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NotificationAPIGetNotification(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNotificationAPIGetNotificationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganization(ctx context.Context, id string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationUsers(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationUsersRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationUserWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationUser(ctx context.Context, id string, body CreateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationUserRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationUser(ctx context.Context, id string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationUserRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationUserWithBody(ctx context.Context, id string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationUserRequestWithBody(c.Server, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationUser(ctx context.Context, id string, userId string, body UpdateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationUserRequest(c.Server, id, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsageReport(ctx context.Context, params *GetUsageReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsageReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCredentialsScriptTemplate(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCredentialsScriptTemplateRequest(c.Server, provider, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetBestPracticesReport(ctx context.Context, params *InsightsAPIGetBestPracticesReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetBestPracticesReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetBestPracticesCheckDetails(ctx context.Context, ruleId string, params *InsightsAPIGetBestPracticesCheckDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetBestPracticesCheckDetailsRequest(c.Server, ruleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetBestPracticesReportFilters(ctx context.Context, params *InsightsAPIGetBestPracticesReportFiltersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetBestPracticesReportFiltersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIScheduleBestPracticesScanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIScheduleBestPracticesScanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIScheduleBestPracticesScan(ctx context.Context, body InsightsAPIScheduleBestPracticesScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIScheduleBestPracticesScanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetBestPracticesReportSummary(ctx context.Context, params *InsightsAPIGetBestPracticesReportSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetBestPracticesReportSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetBestPracticesOverview(ctx context.Context, params *InsightsAPIGetBestPracticesOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetBestPracticesOverviewRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetOverviewSummary(ctx context.Context, params *InsightsAPIGetOverviewSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetOverviewSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetVulnerabilitiesOverview(ctx context.Context, params *InsightsAPIGetVulnerabilitiesOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetVulnerabilitiesOverviewRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetVulnerabilitiesReport(ctx context.Context, params *InsightsAPIGetVulnerabilitiesReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetVulnerabilitiesReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetVulnerabilitiesDetails(ctx context.Context, objectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetVulnerabilitiesDetailsRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetVulnerabilitiesResources(ctx context.Context, objectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetVulnerabilitiesResourcesRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetPackageVulnerabilities(ctx context.Context, objectId string, params *InsightsAPIGetPackageVulnerabilitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetPackageVulnerabilitiesRequest(c.Server, objectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetResourceVulnerablePackages(ctx context.Context, objectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetResourceVulnerablePackagesRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIScheduleVulnerabilitiesScanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIScheduleVulnerabilitiesScanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIScheduleVulnerabilitiesScan(ctx context.Context, body InsightsAPIScheduleVulnerabilitiesScanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIScheduleVulnerabilitiesScanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetVulnerabilitiesReportSummary(ctx context.Context, params *InsightsAPIGetVulnerabilitiesReportSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetVulnerabilitiesReportSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIDisconnectAgent(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIDisconnectAgentRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIIngestAgentLogWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIIngestAgentLogRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIIngestAgentLog(ctx context.Context, clusterId string, body InsightsAPIIngestAgentLogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIIngestAgentLogRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIPostAgentTelemetryWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIPostAgentTelemetryRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIPostAgentTelemetry(ctx context.Context, clusterId string, body InsightsAPIPostAgentTelemetryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIPostAgentTelemetryRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetAgentInstallScript(ctx context.Context, clusterId string, params *InsightsAPIGetAgentInstallScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetAgentInstallScriptRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InsightsAPIGetAgentCloudScript(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInsightsAPIGetAgentCloudScriptRequest(c.Server, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAgentInstallScriptRequest generates requests for GetAgentInstallScript
func NewGetAgentInstallScriptRequest(server string, params *GetAgentInstallScriptParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/agent.sh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Provider != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, *params.Provider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EksRegion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eks.region", runtime.ParamLocationQuery, *params.EksRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EksAccountId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eks.accountId", runtime.ParamLocationQuery, *params.EksAccountId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EksClusterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eks.clusterName", runtime.ParamLocationQuery, *params.EksClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GkeRegion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gke.region", runtime.ParamLocationQuery, *params.GkeRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GkeLocation != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gke.location", runtime.ParamLocationQuery, *params.GkeLocation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GkeProjectId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gke.projectId", runtime.ParamLocationQuery, *params.GkeProjectId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GkeClusterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gke.clusterName", runtime.ParamLocationQuery, *params.GkeClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.KopsCsp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kops.csp", runtime.ParamLocationQuery, *params.KopsCsp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.KopsRegion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kops.region", runtime.ParamLocationQuery, *params.KopsRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.KopsClusterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kops.clusterName", runtime.ParamLocationQuery, *params.KopsClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.KopsStateStore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kops.stateStore", runtime.ParamLocationQuery, *params.KopsStateStore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AksLocation != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aks.location", runtime.ParamLocationQuery, *params.AksLocation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AksNodeResourceGroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aks.nodeResourceGroup", runtime.ParamLocationQuery, *params.AksNodeResourceGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AksSubscriptionId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aks.subscriptionId", runtime.ParamLocationQuery, *params.AksSubscriptionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAuditEventsRequest generates requests for ListAuditEvents
func NewListAuditEventsRequest(server string, params *ListAuditEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/audit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromDate", runtime.ParamLocationQuery, *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toDate", runtime.ParamLocationQuery, *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Label != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label", runtime.ParamLocationQuery, *params.Label); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LabelValue != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "labelValue", runtime.ParamLocationQuery, *params.LabelValue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAuthTokensRequest generates requests for ListAuthTokens
func NewListAuthTokensRequest(server string, params *ListAuthTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XCastAiOrganizationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CastAi-Organization-Id", runtime.ParamLocationHeader, *params.XCastAiOrganizationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CastAi-Organization-Id", headerParam0)
	}

	return req, nil
}

// NewCreateAuthTokenRequest calls the generic CreateAuthToken builder with application/json body
func NewCreateAuthTokenRequest(server string, params *CreateAuthTokenParams, body CreateAuthTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthTokenRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateAuthTokenRequestWithBody generates requests for CreateAuthToken with any type of body
func NewCreateAuthTokenRequestWithBody(server string, params *CreateAuthTokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCastAiOrganizationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CastAi-Organization-Id", runtime.ParamLocationHeader, *params.XCastAiOrganizationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CastAi-Organization-Id", headerParam0)
	}

	return req, nil
}

// NewDeleteAuthTokenRequest generates requests for DeleteAuthToken
func NewDeleteAuthTokenRequest(server string, authTokenId AuthTokenId, params *DeleteAuthTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authTokenId", runtime.ParamLocationPath, authTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XCastAiOrganizationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CastAi-Organization-Id", runtime.ParamLocationHeader, *params.XCastAiOrganizationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CastAi-Organization-Id", headerParam0)
	}

	return req, nil
}

// NewGetAuthTokenRequest generates requests for GetAuthToken
func NewGetAuthTokenRequest(server string, authTokenId AuthTokenId, params *GetAuthTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authTokenId", runtime.ParamLocationPath, authTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XCastAiOrganizationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CastAi-Organization-Id", runtime.ParamLocationHeader, *params.XCastAiOrganizationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CastAi-Organization-Id", headerParam0)
	}

	return req, nil
}

// NewUpdateAuthTokenRequest calls the generic UpdateAuthToken builder with application/json body
func NewUpdateAuthTokenRequest(server string, authTokenId AuthTokenId, params *UpdateAuthTokenParams, body UpdateAuthTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAuthTokenRequestWithBody(server, authTokenId, params, "application/json", bodyReader)
}

// NewUpdateAuthTokenRequestWithBody generates requests for UpdateAuthToken with any type of body
func NewUpdateAuthTokenRequestWithBody(server string, authTokenId AuthTokenId, params *UpdateAuthTokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authTokenId", runtime.ParamLocationPath, authTokenId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCastAiOrganizationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CastAi-Organization-Id", runtime.ParamLocationHeader, *params.XCastAiOrganizationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CastAi-Organization-Id", headerParam0)
	}

	return req, nil
}

// NewCostReportAPIListAllocationGroupsRequest generates requests for CostReportAPIListAllocationGroups
func NewCostReportAPIListAllocationGroupsRequest(server string, params *CostReportAPIListAllocationGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClusterIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterIds", runtime.ParamLocationQuery, *params.ClusterIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCostReportAPICreateAllocationGroupRequest calls the generic CostReportAPICreateAllocationGroup builder with application/json body
func NewCostReportAPICreateAllocationGroupRequest(server string, body CostReportAPICreateAllocationGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCostReportAPICreateAllocationGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewCostReportAPICreateAllocationGroupRequestWithBody generates requests for CostReportAPICreateAllocationGroup with any type of body
func NewCostReportAPICreateAllocationGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCostReportAPIDeleteAllocationGroupRequest generates requests for CostReportAPIDeleteAllocationGroup
func NewCostReportAPIDeleteAllocationGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCostReportAPIUpdateAllocationGroupRequest calls the generic CostReportAPIUpdateAllocationGroup builder with application/json body
func NewCostReportAPIUpdateAllocationGroupRequest(server string, id string, body CostReportAPIUpdateAllocationGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCostReportAPIUpdateAllocationGroupRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCostReportAPIUpdateAllocationGroupRequestWithBody generates requests for CostReportAPIUpdateAllocationGroup with any type of body
func NewCostReportAPIUpdateAllocationGroupRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/allocation-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCostReportAPIGetClusterCostHistory2Request generates requests for CostReportAPIGetClusterCostHistory2
func NewCostReportAPIGetClusterCostHistory2Request(server string, clusterId string, params *CostReportAPIGetClusterCostHistory2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromDate", runtime.ParamLocationQuery, params.FromDate); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toDate", runtime.ParamLocationQuery, params.ToDate); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCostReportAPIGetClusterCostReport2Request generates requests for CostReportAPIGetClusterCostReport2
func NewCostReportAPIGetClusterCostReport2Request(server string, clusterId string, params *CostReportAPIGetClusterCostReport2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/overview", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.StepSeconds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCostReportAPIGetClusterWorkloadReportRequest generates requests for CostReportAPIGetClusterWorkloadReport
func NewCostReportAPIGetClusterWorkloadReportRequest(server string, clusterId string, params *CostReportAPIGetClusterWorkloadReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/workload-costs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.StepSeconds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterWorkloadNames != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.workloadNames", runtime.ParamLocationQuery, *params.FilterWorkloadNames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCostReportAPIGetClusterWorkloadReport2Request calls the generic CostReportAPIGetClusterWorkloadReport2 builder with application/json body
func NewCostReportAPIGetClusterWorkloadReport2Request(server string, clusterId string, params *CostReportAPIGetClusterWorkloadReport2Params, body CostReportAPIGetClusterWorkloadReport2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCostReportAPIGetClusterWorkloadReport2RequestWithBody(server, clusterId, params, "application/json", bodyReader)
}

// NewCostReportAPIGetClusterWorkloadReport2RequestWithBody generates requests for CostReportAPIGetClusterWorkloadReport2 with any type of body
func NewCostReportAPIGetClusterWorkloadReport2RequestWithBody(server string, clusterId string, params *CostReportAPIGetClusterWorkloadReport2Params, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/workload-costs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.StepSeconds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCostReportAPIGetClusterWorkloadLabelsRequest generates requests for CostReportAPIGetClusterWorkloadLabels
func NewCostReportAPIGetClusterWorkloadLabelsRequest(server string, clusterId string, params *CostReportAPIGetClusterWorkloadLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/clusters/%s/workload-labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCostReportAPIGetClustersCostReportRequest generates requests for CostReportAPIGetClustersCostReport
func NewCostReportAPIGetClustersCostReportRequest(server string, params *CostReportAPIGetClustersCostReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/cost-reports/organization/daily-cost")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCloudCredentialsRequest generates requests for ListCloudCredentials
func NewListCloudCredentialsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCloudCredentialsRequest calls the generic CreateCloudCredentials builder with application/json body
func NewCreateCloudCredentialsRequest(server string, body CreateCloudCredentialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCloudCredentialsRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCloudCredentialsRequestWithBody generates requests for CreateCloudCredentials with any type of body
func NewCreateCloudCredentialsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCloudCredentialsRequest generates requests for DeleteCloudCredentials
func NewDeleteCloudCredentialsRequest(server string, credentialsId CredentialsId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "credentialsId", runtime.ParamLocationPath, credentialsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/credentials/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCloudCredentialsRequest generates requests for GetCloudCredentials
func NewGetCloudCredentialsRequest(server string, credentialsId CredentialsId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "credentialsId", runtime.ParamLocationPath, credentialsId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/credentials/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInventoryBlacklistAPIListBlacklistsRequest generates requests for InventoryBlacklistAPIListBlacklists
func NewInventoryBlacklistAPIListBlacklistsRequest(server string, params *InventoryBlacklistAPIListBlacklistsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory/blacklist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OrganizationId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInventoryBlacklistAPIAddBlacklistRequest calls the generic InventoryBlacklistAPIAddBlacklist builder with application/json body
func NewInventoryBlacklistAPIAddBlacklistRequest(server string, body InventoryBlacklistAPIAddBlacklistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInventoryBlacklistAPIAddBlacklistRequestWithBody(server, "application/json", bodyReader)
}

// NewInventoryBlacklistAPIAddBlacklistRequestWithBody generates requests for InventoryBlacklistAPIAddBlacklist with any type of body
func NewInventoryBlacklistAPIAddBlacklistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory/blacklist/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInventoryBlacklistAPIRemoveBlacklistRequest calls the generic InventoryBlacklistAPIRemoveBlacklist builder with application/json body
func NewInventoryBlacklistAPIRemoveBlacklistRequest(server string, body InventoryBlacklistAPIRemoveBlacklistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInventoryBlacklistAPIRemoveBlacklistRequestWithBody(server, "application/json", bodyReader)
}

// NewInventoryBlacklistAPIRemoveBlacklistRequestWithBody generates requests for InventoryBlacklistAPIRemoveBlacklist with any type of body
func NewInventoryBlacklistAPIRemoveBlacklistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/inventory/blacklist/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateInvitationRequest calls the generic CreateInvitation builder with application/json body
func NewCreateInvitationRequest(server string, body CreateInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInvitationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateInvitationRequestWithBody generates requests for CreateInvitation with any type of body
func NewCreateInvitationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClaimInvitationRequest calls the generic ClaimInvitation builder with application/json body
func NewClaimInvitationRequest(server string, id string, body ClaimInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClaimInvitationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewClaimInvitationRequestWithBody generates requests for ClaimInvitation with any type of body
func NewClaimInvitationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClusterActionsAPIPollClusterActionsRequest generates requests for ClusterActionsAPIPollClusterActions
func NewClusterActionsAPIPollClusterActionsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/actions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterActionsAPIIngestLogsRequest calls the generic ClusterActionsAPIIngestLogs builder with application/json body
func NewClusterActionsAPIIngestLogsRequest(server string, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClusterActionsAPIIngestLogsRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewClusterActionsAPIIngestLogsRequestWithBody generates requests for ClusterActionsAPIIngestLogs with any type of body
func NewClusterActionsAPIIngestLogsRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/actions/logs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClusterActionsAPIAckClusterActionRequest calls the generic ClusterActionsAPIAckClusterAction builder with application/json body
func NewClusterActionsAPIAckClusterActionRequest(server string, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClusterActionsAPIAckClusterActionRequestWithBody(server, clusterId, actionId, "application/json", bodyReader)
}

// NewClusterActionsAPIAckClusterActionRequestWithBody generates requests for ClusterActionsAPIAckClusterAction with any type of body
func NewClusterActionsAPIAckClusterActionRequestWithBody(server string, clusterId string, actionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/actions/%s/ack", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCostReportAPIGetClusterCostHistoryRequest generates requests for CostReportAPIGetClusterCostHistory
func NewCostReportAPIGetClusterCostHistoryRequest(server string, clusterId string, params *CostReportAPIGetClusterCostHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/cost-history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromDate", runtime.ParamLocationQuery, params.FromDate); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toDate", runtime.ParamLocationQuery, params.ToDate); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCostReportAPIGetClusterCostReportRequest generates requests for CostReportAPIGetClusterCostReport
func NewCostReportAPIGetClusterCostReportRequest(server string, clusterId string, params *CostReportAPIGetClusterCostReportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/cost-report", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.StepSeconds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCostReportAPIGetSavingsRecommendation2Request generates requests for CostReportAPIGetSavingsRecommendation2
func NewCostReportAPIGetSavingsRecommendation2Request(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/estimated-savings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeTemplatesAPIFilterInstanceTypesRequest calls the generic NodeTemplatesAPIFilterInstanceTypes builder with application/json body
func NewNodeTemplatesAPIFilterInstanceTypesRequest(server string, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeTemplatesAPIFilterInstanceTypesRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewNodeTemplatesAPIFilterInstanceTypesRequestWithBody generates requests for NodeTemplatesAPIFilterInstanceTypes with any type of body
func NewNodeTemplatesAPIFilterInstanceTypesRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/filter-instance-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMetricsAPIGetCPUUsageMetricsRequest generates requests for MetricsAPIGetCPUUsageMetrics
func NewMetricsAPIGetCPUUsageMetricsRequest(server string, clusterId string, params *MetricsAPIGetCPUUsageMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/metrics/cpu-usage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PeriodHours != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "periodHours", runtime.ParamLocationQuery, *params.PeriodHours); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StepSeconds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetricsAPIGetGaugesMetricsRequest generates requests for MetricsAPIGetGaugesMetrics
func NewMetricsAPIGetGaugesMetricsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/metrics/gauges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetricsAPIGetMemoryUsageMetricsRequest generates requests for MetricsAPIGetMemoryUsageMetrics
func NewMetricsAPIGetMemoryUsageMetricsRequest(server string, clusterId string, params *MetricsAPIGetMemoryUsageMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/metrics/memory-usage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PeriodHours != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "periodHours", runtime.ParamLocationQuery, *params.PeriodHours); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StepSeconds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stepSeconds", runtime.ParamLocationQuery, *params.StepSeconds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeConfigurationAPIListConfigurationsRequest generates requests for NodeConfigurationAPIListConfigurations
func NewNodeConfigurationAPIListConfigurationsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeConfigurationAPICreateConfigurationRequest calls the generic NodeConfigurationAPICreateConfiguration builder with application/json body
func NewNodeConfigurationAPICreateConfigurationRequest(server string, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeConfigurationAPICreateConfigurationRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewNodeConfigurationAPICreateConfigurationRequestWithBody generates requests for NodeConfigurationAPICreateConfiguration with any type of body
func NewNodeConfigurationAPICreateConfigurationRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeConfigurationAPIDeleteConfigurationRequest generates requests for NodeConfigurationAPIDeleteConfiguration
func NewNodeConfigurationAPIDeleteConfigurationRequest(server string, clusterId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeConfigurationAPIGetConfigurationRequest generates requests for NodeConfigurationAPIGetConfiguration
func NewNodeConfigurationAPIGetConfigurationRequest(server string, clusterId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeConfigurationAPIUpdateConfigurationRequest calls the generic NodeConfigurationAPIUpdateConfiguration builder with application/json body
func NewNodeConfigurationAPIUpdateConfigurationRequest(server string, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeConfigurationAPIUpdateConfigurationRequestWithBody(server, clusterId, id, "application/json", bodyReader)
}

// NewNodeConfigurationAPIUpdateConfigurationRequestWithBody generates requests for NodeConfigurationAPIUpdateConfiguration with any type of body
func NewNodeConfigurationAPIUpdateConfigurationRequestWithBody(server string, clusterId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeConfigurationAPISetDefaultRequest generates requests for NodeConfigurationAPISetDefault
func NewNodeConfigurationAPISetDefaultRequest(server string, clusterId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations/%s/default", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPoliciesAPIGetClusterNodeConstraintsRequest generates requests for PoliciesAPIGetClusterNodeConstraints
func NewPoliciesAPIGetClusterNodeConstraintsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-constraints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeTemplatesAPIListNodeTemplatesRequest generates requests for NodeTemplatesAPIListNodeTemplates
func NewNodeTemplatesAPIListNodeTemplatesRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeTemplatesAPICreateNodeTemplateRequest calls the generic NodeTemplatesAPICreateNodeTemplate builder with application/json body
func NewNodeTemplatesAPICreateNodeTemplateRequest(server string, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeTemplatesAPICreateNodeTemplateRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewNodeTemplatesAPICreateNodeTemplateRequestWithBody generates requests for NodeTemplatesAPICreateNodeTemplate with any type of body
func NewNodeTemplatesAPICreateNodeTemplateRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeTemplatesAPIDeleteNodeTemplateRequest generates requests for NodeTemplatesAPIDeleteNodeTemplate
func NewNodeTemplatesAPIDeleteNodeTemplateRequest(server string, clusterId string, nodeTemplateName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeTemplateName", runtime.ParamLocationPath, nodeTemplateName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeTemplatesAPIUpdateNodeTemplateRequest calls the generic NodeTemplatesAPIUpdateNodeTemplate builder with application/json body
func NewNodeTemplatesAPIUpdateNodeTemplateRequest(server string, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeTemplatesAPIUpdateNodeTemplateRequestWithBody(server, clusterId, nodeTemplateName, "application/json", bodyReader)
}

// NewNodeTemplatesAPIUpdateNodeTemplateRequestWithBody generates requests for NodeTemplatesAPIUpdateNodeTemplate with any type of body
func NewNodeTemplatesAPIUpdateNodeTemplateRequestWithBody(server string, clusterId string, nodeTemplateName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeTemplateName", runtime.ParamLocationPath, nodeTemplateName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPoliciesAPIGetClusterPoliciesRequest generates requests for PoliciesAPIGetClusterPolicies
func NewPoliciesAPIGetClusterPoliciesRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPoliciesAPIUpsertClusterPoliciesRequest calls the generic PoliciesAPIUpsertClusterPolicies builder with application/json body
func NewPoliciesAPIUpsertClusterPoliciesRequest(server string, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPoliciesAPIUpsertClusterPoliciesRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPoliciesAPIUpsertClusterPoliciesRequestWithBody generates requests for PoliciesAPIUpsertClusterPolicies with any type of body
func NewPoliciesAPIUpsertClusterPoliciesRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProblematicWorkloadsRequest generates requests for GetProblematicWorkloads
func NewGetProblematicWorkloadsRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/problematic-workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRebalancedWorkloadsRequest generates requests for GetRebalancedWorkloads
func NewGetRebalancedWorkloadsRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalanced-workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRebalancingPlansRequest generates requests for ListRebalancingPlans
func NewListRebalancingPlansRequest(server string, clusterId ClusterId, params *ListRebalancingPlansParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRebalanceRequest calls the generic Rebalance builder with application/json body
func NewRebalanceRequest(server string, clusterId ClusterId, body RebalanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRebalanceRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewRebalanceRequestWithBody generates requests for Rebalance with any type of body
func NewRebalanceRequestWithBody(server string, clusterId ClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRebalancingPlanRequest generates requests for GetRebalancingPlan
func NewGetRebalancingPlanRequest(server string, clusterId ClusterId, rebalancingPlanId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rebalancingPlanId", runtime.ParamLocationPath, rebalancingPlanId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExecuteRebalancingPlanRequest calls the generic ExecuteRebalancingPlan builder with application/json body
func NewExecuteRebalancingPlanRequest(server string, clusterId ClusterId, rebalancingPlanId string, body ExecuteRebalancingPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecuteRebalancingPlanRequestWithBody(server, clusterId, rebalancingPlanId, "application/json", bodyReader)
}

// NewExecuteRebalancingPlanRequestWithBody generates requests for ExecuteRebalancingPlan with any type of body
func NewExecuteRebalancingPlanRequestWithBody(server string, clusterId ClusterId, rebalancingPlanId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rebalancingPlanId", runtime.ParamLocationPath, rebalancingPlanId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans/%s/execute", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkloadsRequest generates requests for GetWorkloads
func NewGetWorkloadsRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIListClustersRequest generates requests for ExternalClusterAPIListClusters
func NewExternalClusterAPIListClustersRequest(server string, params *ExternalClusterAPIListClustersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeMetrics != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeMetrics", runtime.ParamLocationQuery, *params.IncludeMetrics); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIRegisterClusterRequest calls the generic ExternalClusterAPIRegisterCluster builder with application/json body
func NewExternalClusterAPIRegisterClusterRequest(server string, body ExternalClusterAPIRegisterClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIRegisterClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewExternalClusterAPIRegisterClusterRequestWithBody generates requests for ExternalClusterAPIRegisterCluster with any type of body
func NewExternalClusterAPIRegisterClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExternalClusterOperationRequest generates requests for GetExternalClusterOperation
func NewGetExternalClusterOperationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/operations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDeleteClusterRequest generates requests for ExternalClusterAPIDeleteCluster
func NewExternalClusterAPIDeleteClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetClusterRequest generates requests for ExternalClusterAPIGetCluster
func NewExternalClusterAPIGetClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIUpdateClusterRequest calls the generic ExternalClusterAPIUpdateCluster builder with application/json body
func NewExternalClusterAPIUpdateClusterRequest(server string, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIUpdateClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIUpdateClusterRequestWithBody generates requests for ExternalClusterAPIUpdateCluster with any type of body
func NewExternalClusterAPIUpdateClusterRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIGetAssumeRoleUserRequest generates requests for ExternalClusterAPIGetAssumeRoleUser
func NewExternalClusterAPIGetAssumeRoleUserRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/assume-role-user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCredentialsScriptRequest generates requests for ExternalClusterAPIGetCredentialsScript
func NewExternalClusterAPIGetCredentialsScriptRequest(server string, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/credentials-script", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CrossRole != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "crossRole", runtime.ParamLocationQuery, *params.CrossRole); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NvidiaDevicePlugin != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nvidiaDevicePlugin", runtime.ParamLocationQuery, *params.NvidiaDevicePlugin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InstallSecurityAgent != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "installSecurityAgent", runtime.ParamLocationQuery, *params.InstallSecurityAgent); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDisconnectClusterRequest calls the generic ExternalClusterAPIDisconnectCluster builder with application/json body
func NewExternalClusterAPIDisconnectClusterRequest(server string, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIDisconnectClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIDisconnectClusterRequestWithBody generates requests for ExternalClusterAPIDisconnectCluster with any type of body
func NewExternalClusterAPIDisconnectClusterRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/disconnect", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCostReportAPIGetSavingsRecommendationRequest generates requests for CostReportAPIGetSavingsRecommendation
func NewCostReportAPIGetSavingsRecommendationRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/estimated-savings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIHandleCloudEventRequest calls the generic ExternalClusterAPIHandleCloudEvent builder with application/json body
func NewExternalClusterAPIHandleCloudEventRequest(server string, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIHandleCloudEventRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIHandleCloudEventRequestWithBody generates requests for ExternalClusterAPIHandleCloudEvent with any type of body
func NewExternalClusterAPIHandleCloudEventRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIListNodesRequest generates requests for ExternalClusterAPIListNodes
func NewExternalClusterAPIListNodesRequest(server string, clusterId string, params *ExternalClusterAPIListNodesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageLimit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageCursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIAddNodeRequest calls the generic ExternalClusterAPIAddNode builder with application/json body
func NewExternalClusterAPIAddNodeRequest(server string, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIAddNodeRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIAddNodeRequestWithBody generates requests for ExternalClusterAPIAddNode with any type of body
func NewExternalClusterAPIAddNodeRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIDeleteNodeRequest generates requests for ExternalClusterAPIDeleteNode
func NewExternalClusterAPIDeleteNodeRequest(server string, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DrainTimeout != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "drainTimeout", runtime.ParamLocationQuery, *params.DrainTimeout); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ForceDelete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceDelete", runtime.ParamLocationQuery, *params.ForceDelete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetNodeRequest generates requests for ExternalClusterAPIGetNode
func NewExternalClusterAPIGetNodeRequest(server string, clusterId string, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDrainNodeRequest calls the generic ExternalClusterAPIDrainNode builder with application/json body
func NewExternalClusterAPIDrainNodeRequest(server string, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIDrainNodeRequestWithBody(server, clusterId, nodeId, "application/json", bodyReader)
}

// NewExternalClusterAPIDrainNodeRequestWithBody generates requests for ExternalClusterAPIDrainNode with any type of body
func NewExternalClusterAPIDrainNodeRequestWithBody(server string, clusterId string, nodeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s/drain", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIPauseClusterRequest generates requests for ExternalClusterAPIPauseCluster
func NewExternalClusterAPIPauseClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/pause", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIReconcileClusterRequest generates requests for ExternalClusterAPIReconcileCluster
func NewExternalClusterAPIReconcileClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/reconcile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIResumeClusterRequest generates requests for ExternalClusterAPIResumeCluster
func NewExternalClusterAPIResumeClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/resume", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPICreateClusterTokenRequest generates requests for ExternalClusterAPICreateClusterToken
func NewExternalClusterAPICreateClusterTokenRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCurrentUserProfileRequest generates requests for CurrentUserProfile
func NewCurrentUserProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCurrentUserProfileRequest calls the generic UpdateCurrentUserProfile builder with application/json body
func NewUpdateCurrentUserProfileRequest(server string, body UpdateCurrentUserProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCurrentUserProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateCurrentUserProfileRequestWithBody generates requests for UpdateCurrentUserProfile with any type of body
func NewUpdateCurrentUserProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPromMetricsRequest generates requests for GetPromMetrics
func NewGetPromMetricsRequest(server string, params *GetPromMetricsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/metrics/prom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClusterNames != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterNames", runtime.ParamLocationQuery, *params.ClusterNames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XCastAiOrganizationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-CastAi-Organization-Id", runtime.ParamLocationHeader, *params.XCastAiOrganizationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CastAi-Organization-Id", headerParam0)
	}

	return req, nil
}

// NewNotificationAPIListNotificationsRequest generates requests for NotificationAPIListNotifications
func NewNotificationAPIListNotificationsRequest(server string, params *NotificationAPIListNotificationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageLimit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageCursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSeverities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.severities", runtime.ParamLocationQuery, *params.FilterSeverities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterIsAcked != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.isAcked", runtime.ParamLocationQuery, *params.FilterIsAcked); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterNotificationId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.notificationId", runtime.ParamLocationQuery, *params.FilterNotificationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterNotificationName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.notificationName", runtime.ParamLocationQuery, *params.FilterNotificationName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.clusterId", runtime.ParamLocationQuery, *params.FilterClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterClusterName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.clusterName", runtime.ParamLocationQuery, *params.FilterClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterOperationId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.operationId", runtime.ParamLocationQuery, *params.FilterOperationId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterOperationType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.operationType", runtime.ParamLocationQuery, *params.FilterOperationType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterProject != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.project", runtime.ParamLocationQuery, *params.FilterProject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.field", runtime.ParamLocationQuery, *params.SortField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationAPIAckNotificationsRequest calls the generic NotificationAPIAckNotifications builder with application/json body
func NewNotificationAPIAckNotificationsRequest(server string, body NotificationAPIAckNotificationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotificationAPIAckNotificationsRequestWithBody(server, "application/json", bodyReader)
}

// NewNotificationAPIAckNotificationsRequestWithBody generates requests for NotificationAPIAckNotifications with any type of body
func NewNotificationAPIAckNotificationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/ack")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotificationAPIListWebhookConfigsRequest generates requests for NotificationAPIListWebhookConfigs
func NewNotificationAPIListWebhookConfigsRequest(server string, params *NotificationAPIListWebhookConfigsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/webhook-configurations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageLimit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageCursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterSeverities != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.severities", runtime.ParamLocationQuery, *params.FilterSeverities); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FilterStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter.status", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortField != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.field", runtime.ParamLocationQuery, *params.SortField); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort.order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationAPICreateWebhookConfigRequest calls the generic NotificationAPICreateWebhookConfig builder with application/json body
func NewNotificationAPICreateWebhookConfigRequest(server string, body NotificationAPICreateWebhookConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotificationAPICreateWebhookConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewNotificationAPICreateWebhookConfigRequestWithBody generates requests for NotificationAPICreateWebhookConfig with any type of body
func NewNotificationAPICreateWebhookConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/webhook-configurations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotificationAPIDeleteWebhookConfigRequest generates requests for NotificationAPIDeleteWebhookConfig
func NewNotificationAPIDeleteWebhookConfigRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/webhook-configurations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationAPIGetWebhookConfigRequest generates requests for NotificationAPIGetWebhookConfig
func NewNotificationAPIGetWebhookConfigRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/webhook-configurations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNotificationAPIUpdateWebhookConfigRequest calls the generic NotificationAPIUpdateWebhookConfig builder with application/json body
func NewNotificationAPIUpdateWebhookConfigRequest(server string, id string, body NotificationAPIUpdateWebhookConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNotificationAPIUpdateWebhookConfigRequestWithBody(server, id, "application/json", bodyReader)
}

// NewNotificationAPIUpdateWebhookConfigRequestWithBody generates requests for NotificationAPIUpdateWebhookConfig with any type of body
func NewNotificationAPIUpdateWebhookConfigRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/webhook-configurations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNotificationAPIGetNotificationRequest generates requests for NotificationAPIGetNotification
func NewNotificationAPIGetNotificationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationsRequest generates requests for ListOrganizations
func NewListOrganizationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRequest calls the generic CreateOrganization builder with application/json body
func NewCreateOrganizationRequest(server string, body CreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationRequestWithBody generates requests for CreateOrganization with any type of body
func NewCreateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationRequest generates requests for DeleteOrganization
func NewDeleteOrganizationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationRequest generates requests for GetOrganization
func NewGetOrganizationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationRequest calls the generic UpdateOrganization builder with application/json body
func NewUpdateOrganizationRequest(server string, id string, body UpdateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateOrganizationRequestWithBody generates requests for UpdateOrganization with any type of body
func NewUpdateOrganizationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationUsersRequest generates requests for GetOrganizationUsers
func NewGetOrganizationUsersRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationUserRequest calls the generic CreateOrganizationUser builder with application/json body
func NewCreateOrganizationUserRequest(server string, id string, body CreateOrganizationUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationUserRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateOrganizationUserRequestWithBody generates requests for CreateOrganizationUser with any type of body
func NewCreateOrganizationUserRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationUserRequest generates requests for DeleteOrganizationUser
func NewDeleteOrganizationUserRequest(server string, id string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationUserRequest calls the generic UpdateOrganizationUser builder with application/json body
func NewUpdateOrganizationUserRequest(server string, id string, userId string, body UpdateOrganizationUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationUserRequestWithBody(server, id, userId, "application/json", bodyReader)
}

// NewUpdateOrganizationUserRequestWithBody generates requests for UpdateOrganizationUser with any type of body
func NewUpdateOrganizationUserRequestWithBody(server string, id string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsageReportRequest generates requests for GetUsageReport
func NewGetUsageReportRequest(server string, params *GetUsageReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/report/usage/daily")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromDate", runtime.ParamLocationQuery, *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toDate", runtime.ParamLocationQuery, *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCredentialsScriptTemplateRequest generates requests for ExternalClusterAPIGetCredentialsScriptTemplate
func NewExternalClusterAPIGetCredentialsScriptTemplateRequest(server string, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/%s/onboarding.sh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CrossRole != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "crossRole", runtime.ParamLocationQuery, *params.CrossRole); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetBestPracticesReportRequest generates requests for InsightsAPIGetBestPracticesReport
func NewInsightsAPIGetBestPracticesReportRequest(server string, params *InsightsAPIGetBestPracticesReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Namespace != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespace", runtime.ParamLocationQuery, *params.Namespace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SeverityLevel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "severityLevel", runtime.ParamLocationQuery, *params.SeverityLevel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.From != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetBestPracticesCheckDetailsRequest generates requests for InsightsAPIGetBestPracticesCheckDetails
func NewInsightsAPIGetBestPracticesCheckDetailsRequest(server string, ruleId string, params *InsightsAPIGetBestPracticesCheckDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/checks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Namespace != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespace", runtime.ParamLocationQuery, *params.Namespace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetBestPracticesReportFiltersRequest generates requests for InsightsAPIGetBestPracticesReportFilters
func NewInsightsAPIGetBestPracticesReportFiltersRequest(server string, params *InsightsAPIGetBestPracticesReportFiltersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/filters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIScheduleBestPracticesScanRequest calls the generic InsightsAPIScheduleBestPracticesScan builder with application/json body
func NewInsightsAPIScheduleBestPracticesScanRequest(server string, body InsightsAPIScheduleBestPracticesScanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIScheduleBestPracticesScanRequestWithBody(server, "application/json", bodyReader)
}

// NewInsightsAPIScheduleBestPracticesScanRequestWithBody generates requests for InsightsAPIScheduleBestPracticesScan with any type of body
func NewInsightsAPIScheduleBestPracticesScanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/schedule-scan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIGetBestPracticesReportSummaryRequest generates requests for InsightsAPIGetBestPracticesReportSummary
func NewInsightsAPIGetBestPracticesReportSummaryRequest(server string, params *InsightsAPIGetBestPracticesReportSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/best-practices/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetBestPracticesOverviewRequest generates requests for InsightsAPIGetBestPracticesOverview
func NewInsightsAPIGetBestPracticesOverviewRequest(server string, params *InsightsAPIGetBestPracticesOverviewParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/overview/best-practices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromDate", runtime.ParamLocationQuery, *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toDate", runtime.ParamLocationQuery, *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetOverviewSummaryRequest generates requests for InsightsAPIGetOverviewSummary
func NewInsightsAPIGetOverviewSummaryRequest(server string, params *InsightsAPIGetOverviewSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/overview/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromDate", runtime.ParamLocationQuery, *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toDate", runtime.ParamLocationQuery, *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetVulnerabilitiesOverviewRequest generates requests for InsightsAPIGetVulnerabilitiesOverview
func NewInsightsAPIGetVulnerabilitiesOverviewRequest(server string, params *InsightsAPIGetVulnerabilitiesOverviewParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/overview/vulnerabilities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromDate", runtime.ParamLocationQuery, *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toDate", runtime.ParamLocationQuery, *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetVulnerabilitiesReportRequest generates requests for InsightsAPIGetVulnerabilitiesReport
func NewInsightsAPIGetVulnerabilitiesReportRequest(server string, params *InsightsAPIGetVulnerabilitiesReportParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/vulnerabilities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ObjectName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "objectName", runtime.ParamLocationQuery, *params.ObjectName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ObjectKind != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "objectKind", runtime.ParamLocationQuery, *params.ObjectKind); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Namespace != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespace", runtime.ParamLocationQuery, *params.Namespace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.From != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cve != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cve", runtime.ParamLocationQuery, *params.Cve); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetVulnerabilitiesDetailsRequest generates requests for InsightsAPIGetVulnerabilitiesDetails
func NewInsightsAPIGetVulnerabilitiesDetailsRequest(server string, objectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/vulnerabilities/details/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetVulnerabilitiesResourcesRequest generates requests for InsightsAPIGetVulnerabilitiesResources
func NewInsightsAPIGetVulnerabilitiesResourcesRequest(server string, objectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/vulnerabilities/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetPackageVulnerabilitiesRequest generates requests for InsightsAPIGetPackageVulnerabilities
func NewInsightsAPIGetPackageVulnerabilitiesRequest(server string, objectId string, params *InsightsAPIGetPackageVulnerabilitiesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/vulnerabilities/resources/%s/package", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PackageName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "packageName", runtime.ParamLocationQuery, *params.PackageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetResourceVulnerablePackagesRequest generates requests for InsightsAPIGetResourceVulnerablePackages
func NewInsightsAPIGetResourceVulnerablePackagesRequest(server string, objectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/vulnerabilities/resources/%s/packages", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIScheduleVulnerabilitiesScanRequest calls the generic InsightsAPIScheduleVulnerabilitiesScan builder with application/json body
func NewInsightsAPIScheduleVulnerabilitiesScanRequest(server string, body InsightsAPIScheduleVulnerabilitiesScanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIScheduleVulnerabilitiesScanRequestWithBody(server, "application/json", bodyReader)
}

// NewInsightsAPIScheduleVulnerabilitiesScanRequestWithBody generates requests for InsightsAPIScheduleVulnerabilitiesScan with any type of body
func NewInsightsAPIScheduleVulnerabilitiesScanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/vulnerabilities/schedule-scan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIGetVulnerabilitiesReportSummaryRequest generates requests for InsightsAPIGetVulnerabilitiesReportSummary
func NewInsightsAPIGetVulnerabilitiesReportSummaryRequest(server string, params *InsightsAPIGetVulnerabilitiesReportSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/vulnerabilities/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIDisconnectAgentRequest generates requests for InsightsAPIDisconnectAgent
func NewInsightsAPIDisconnectAgentRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/%s/disconnect", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIIngestAgentLogRequest calls the generic InsightsAPIIngestAgentLog builder with application/json body
func NewInsightsAPIIngestAgentLogRequest(server string, clusterId string, body InsightsAPIIngestAgentLogJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIIngestAgentLogRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewInsightsAPIIngestAgentLogRequestWithBody generates requests for InsightsAPIIngestAgentLog with any type of body
func NewInsightsAPIIngestAgentLogRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/%s/log", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIPostAgentTelemetryRequest calls the generic InsightsAPIPostAgentTelemetry builder with application/json body
func NewInsightsAPIPostAgentTelemetryRequest(server string, clusterId string, body InsightsAPIPostAgentTelemetryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInsightsAPIPostAgentTelemetryRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewInsightsAPIPostAgentTelemetryRequestWithBody generates requests for InsightsAPIPostAgentTelemetry with any type of body
func NewInsightsAPIPostAgentTelemetryRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/insights/%s/telemetry", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInsightsAPIGetAgentInstallScriptRequest generates requests for InsightsAPIGetAgentInstallScript
func NewInsightsAPIGetAgentInstallScriptRequest(server string, clusterId string, params *InsightsAPIGetAgentInstallScriptParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/%s/agent.sh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.EnableCloudscan != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enableCloudscan", runtime.ParamLocationQuery, *params.EnableCloudscan); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInsightsAPIGetAgentCloudScriptRequest generates requests for InsightsAPIGetAgentCloudScript
func NewInsightsAPIGetAgentCloudScriptRequest(server string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security/%s/agent-cloud.sh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAgentInstallScript request
	GetAgentInstallScriptWithResponse(ctx context.Context, params *GetAgentInstallScriptParams) (*GetAgentInstallScriptResponse, error)

	// ListAuditEvents request
	ListAuditEventsWithResponse(ctx context.Context, params *ListAuditEventsParams) (*ListAuditEventsResponse, error)

	// ListAuthTokens request
	ListAuthTokensWithResponse(ctx context.Context, params *ListAuthTokensParams) (*ListAuthTokensResponse, error)

	// CreateAuthToken request  with any body
	CreateAuthTokenWithBodyWithResponse(ctx context.Context, params *CreateAuthTokenParams, contentType string, body io.Reader) (*CreateAuthTokenResponse, error)

	CreateAuthTokenWithResponse(ctx context.Context, params *CreateAuthTokenParams, body CreateAuthTokenJSONRequestBody) (*CreateAuthTokenResponse, error)

	// DeleteAuthToken request
	DeleteAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId, params *DeleteAuthTokenParams) (*DeleteAuthTokenResponse, error)

	// GetAuthToken request
	GetAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId, params *GetAuthTokenParams) (*GetAuthTokenResponse, error)

	// UpdateAuthToken request  with any body
	UpdateAuthTokenWithBodyWithResponse(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, contentType string, body io.Reader) (*UpdateAuthTokenResponse, error)

	UpdateAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, body UpdateAuthTokenJSONRequestBody) (*UpdateAuthTokenResponse, error)

	// CostReportAPIListAllocationGroups request
	CostReportAPIListAllocationGroupsWithResponse(ctx context.Context, params *CostReportAPIListAllocationGroupsParams) (*CostReportAPIListAllocationGroupsResponse, error)

	// CostReportAPICreateAllocationGroup request  with any body
	CostReportAPICreateAllocationGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CostReportAPICreateAllocationGroupResponse, error)

	CostReportAPICreateAllocationGroupWithResponse(ctx context.Context, body CostReportAPICreateAllocationGroupJSONRequestBody) (*CostReportAPICreateAllocationGroupResponse, error)

	// CostReportAPIDeleteAllocationGroup request
	CostReportAPIDeleteAllocationGroupWithResponse(ctx context.Context, id string) (*CostReportAPIDeleteAllocationGroupResponse, error)

	// CostReportAPIUpdateAllocationGroup request  with any body
	CostReportAPIUpdateAllocationGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*CostReportAPIUpdateAllocationGroupResponse, error)

	CostReportAPIUpdateAllocationGroupWithResponse(ctx context.Context, id string, body CostReportAPIUpdateAllocationGroupJSONRequestBody) (*CostReportAPIUpdateAllocationGroupResponse, error)

	// CostReportAPIGetClusterCostHistory2 request
	CostReportAPIGetClusterCostHistory2WithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostHistory2Params) (*CostReportAPIGetClusterCostHistory2Response, error)

	// CostReportAPIGetClusterCostReport2 request
	CostReportAPIGetClusterCostReport2WithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostReport2Params) (*CostReportAPIGetClusterCostReport2Response, error)

	// CostReportAPIGetClusterWorkloadReport request
	CostReportAPIGetClusterWorkloadReportWithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadReportParams) (*CostReportAPIGetClusterWorkloadReportResponse, error)

	// CostReportAPIGetClusterWorkloadReport2 request  with any body
	CostReportAPIGetClusterWorkloadReport2WithBodyWithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadReport2Params, contentType string, body io.Reader) (*CostReportAPIGetClusterWorkloadReport2Response, error)

	CostReportAPIGetClusterWorkloadReport2WithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadReport2Params, body CostReportAPIGetClusterWorkloadReport2JSONRequestBody) (*CostReportAPIGetClusterWorkloadReport2Response, error)

	// CostReportAPIGetClusterWorkloadLabels request
	CostReportAPIGetClusterWorkloadLabelsWithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadLabelsParams) (*CostReportAPIGetClusterWorkloadLabelsResponse, error)

	// CostReportAPIGetClustersCostReport request
	CostReportAPIGetClustersCostReportWithResponse(ctx context.Context, params *CostReportAPIGetClustersCostReportParams) (*CostReportAPIGetClustersCostReportResponse, error)

	// ListCloudCredentials request
	ListCloudCredentialsWithResponse(ctx context.Context) (*ListCloudCredentialsResponse, error)

	// CreateCloudCredentials request  with any body
	CreateCloudCredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateCloudCredentialsResponse, error)

	CreateCloudCredentialsWithResponse(ctx context.Context, body CreateCloudCredentialsJSONRequestBody) (*CreateCloudCredentialsResponse, error)

	// DeleteCloudCredentials request
	DeleteCloudCredentialsWithResponse(ctx context.Context, credentialsId CredentialsId) (*DeleteCloudCredentialsResponse, error)

	// GetCloudCredentials request
	GetCloudCredentialsWithResponse(ctx context.Context, credentialsId CredentialsId) (*GetCloudCredentialsResponse, error)

	// InventoryBlacklistAPIListBlacklists request
	InventoryBlacklistAPIListBlacklistsWithResponse(ctx context.Context, params *InventoryBlacklistAPIListBlacklistsParams) (*InventoryBlacklistAPIListBlacklistsResponse, error)

	// InventoryBlacklistAPIAddBlacklist request  with any body
	InventoryBlacklistAPIAddBlacklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*InventoryBlacklistAPIAddBlacklistResponse, error)

	InventoryBlacklistAPIAddBlacklistWithResponse(ctx context.Context, body InventoryBlacklistAPIAddBlacklistJSONRequestBody) (*InventoryBlacklistAPIAddBlacklistResponse, error)

	// InventoryBlacklistAPIRemoveBlacklist request  with any body
	InventoryBlacklistAPIRemoveBlacklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*InventoryBlacklistAPIRemoveBlacklistResponse, error)

	InventoryBlacklistAPIRemoveBlacklistWithResponse(ctx context.Context, body InventoryBlacklistAPIRemoveBlacklistJSONRequestBody) (*InventoryBlacklistAPIRemoveBlacklistResponse, error)

	// CreateInvitation request  with any body
	CreateInvitationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateInvitationResponse, error)

	CreateInvitationWithResponse(ctx context.Context, body CreateInvitationJSONRequestBody) (*CreateInvitationResponse, error)

	// ClaimInvitation request  with any body
	ClaimInvitationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ClaimInvitationResponse, error)

	ClaimInvitationWithResponse(ctx context.Context, id string, body ClaimInvitationJSONRequestBody) (*ClaimInvitationResponse, error)

	// ClusterActionsAPIPollClusterActions request
	ClusterActionsAPIPollClusterActionsWithResponse(ctx context.Context, clusterId string) (*ClusterActionsAPIPollClusterActionsResponse, error)

	// ClusterActionsAPIIngestLogs request  with any body
	ClusterActionsAPIIngestLogsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ClusterActionsAPIIngestLogsResponse, error)

	ClusterActionsAPIIngestLogsWithResponse(ctx context.Context, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody) (*ClusterActionsAPIIngestLogsResponse, error)

	// ClusterActionsAPIAckClusterAction request  with any body
	ClusterActionsAPIAckClusterActionWithBodyWithResponse(ctx context.Context, clusterId string, actionId string, contentType string, body io.Reader) (*ClusterActionsAPIAckClusterActionResponse, error)

	ClusterActionsAPIAckClusterActionWithResponse(ctx context.Context, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody) (*ClusterActionsAPIAckClusterActionResponse, error)

	// CostReportAPIGetClusterCostHistory request
	CostReportAPIGetClusterCostHistoryWithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostHistoryParams) (*CostReportAPIGetClusterCostHistoryResponse, error)

	// CostReportAPIGetClusterCostReport request
	CostReportAPIGetClusterCostReportWithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostReportParams) (*CostReportAPIGetClusterCostReportResponse, error)

	// CostReportAPIGetSavingsRecommendation2 request
	CostReportAPIGetSavingsRecommendation2WithResponse(ctx context.Context, clusterId string) (*CostReportAPIGetSavingsRecommendation2Response, error)

	// NodeTemplatesAPIFilterInstanceTypes request  with any body
	NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*NodeTemplatesAPIFilterInstanceTypesResponse, error)

	NodeTemplatesAPIFilterInstanceTypesWithResponse(ctx context.Context, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody) (*NodeTemplatesAPIFilterInstanceTypesResponse, error)

	// MetricsAPIGetCPUUsageMetrics request
	MetricsAPIGetCPUUsageMetricsWithResponse(ctx context.Context, clusterId string, params *MetricsAPIGetCPUUsageMetricsParams) (*MetricsAPIGetCPUUsageMetricsResponse, error)

	// MetricsAPIGetGaugesMetrics request
	MetricsAPIGetGaugesMetricsWithResponse(ctx context.Context, clusterId string) (*MetricsAPIGetGaugesMetricsResponse, error)

	// MetricsAPIGetMemoryUsageMetrics request
	MetricsAPIGetMemoryUsageMetricsWithResponse(ctx context.Context, clusterId string, params *MetricsAPIGetMemoryUsageMetricsParams) (*MetricsAPIGetMemoryUsageMetricsResponse, error)

	// NodeConfigurationAPIListConfigurations request
	NodeConfigurationAPIListConfigurationsWithResponse(ctx context.Context, clusterId string) (*NodeConfigurationAPIListConfigurationsResponse, error)

	// NodeConfigurationAPICreateConfiguration request  with any body
	NodeConfigurationAPICreateConfigurationWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*NodeConfigurationAPICreateConfigurationResponse, error)

	NodeConfigurationAPICreateConfigurationWithResponse(ctx context.Context, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody) (*NodeConfigurationAPICreateConfigurationResponse, error)

	// NodeConfigurationAPIDeleteConfiguration request
	NodeConfigurationAPIDeleteConfigurationWithResponse(ctx context.Context, clusterId string, id string) (*NodeConfigurationAPIDeleteConfigurationResponse, error)

	// NodeConfigurationAPIGetConfiguration request
	NodeConfigurationAPIGetConfigurationWithResponse(ctx context.Context, clusterId string, id string) (*NodeConfigurationAPIGetConfigurationResponse, error)

	// NodeConfigurationAPIUpdateConfiguration request  with any body
	NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse(ctx context.Context, clusterId string, id string, contentType string, body io.Reader) (*NodeConfigurationAPIUpdateConfigurationResponse, error)

	NodeConfigurationAPIUpdateConfigurationWithResponse(ctx context.Context, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody) (*NodeConfigurationAPIUpdateConfigurationResponse, error)

	// NodeConfigurationAPISetDefault request
	NodeConfigurationAPISetDefaultWithResponse(ctx context.Context, clusterId string, id string) (*NodeConfigurationAPISetDefaultResponse, error)

	// PoliciesAPIGetClusterNodeConstraints request
	PoliciesAPIGetClusterNodeConstraintsWithResponse(ctx context.Context, clusterId string) (*PoliciesAPIGetClusterNodeConstraintsResponse, error)

	// NodeTemplatesAPIListNodeTemplates request
	NodeTemplatesAPIListNodeTemplatesWithResponse(ctx context.Context, clusterId string) (*NodeTemplatesAPIListNodeTemplatesResponse, error)

	// NodeTemplatesAPICreateNodeTemplate request  with any body
	NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*NodeTemplatesAPICreateNodeTemplateResponse, error)

	NodeTemplatesAPICreateNodeTemplateWithResponse(ctx context.Context, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody) (*NodeTemplatesAPICreateNodeTemplateResponse, error)

	// NodeTemplatesAPIDeleteNodeTemplate request
	NodeTemplatesAPIDeleteNodeTemplateWithResponse(ctx context.Context, clusterId string, nodeTemplateName string) (*NodeTemplatesAPIDeleteNodeTemplateResponse, error)

	// NodeTemplatesAPIUpdateNodeTemplate request  with any body
	NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId string, nodeTemplateName string, contentType string, body io.Reader) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error)

	NodeTemplatesAPIUpdateNodeTemplateWithResponse(ctx context.Context, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error)

	// PoliciesAPIGetClusterPolicies request
	PoliciesAPIGetClusterPoliciesWithResponse(ctx context.Context, clusterId string) (*PoliciesAPIGetClusterPoliciesResponse, error)

	// PoliciesAPIUpsertClusterPolicies request  with any body
	PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*PoliciesAPIUpsertClusterPoliciesResponse, error)

	PoliciesAPIUpsertClusterPoliciesWithResponse(ctx context.Context, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody) (*PoliciesAPIUpsertClusterPoliciesResponse, error)

	// GetProblematicWorkloads request
	GetProblematicWorkloadsWithResponse(ctx context.Context, clusterId ClusterId) (*GetProblematicWorkloadsResponse, error)

	// GetRebalancedWorkloads request
	GetRebalancedWorkloadsWithResponse(ctx context.Context, clusterId ClusterId) (*GetRebalancedWorkloadsResponse, error)

	// ListRebalancingPlans request
	ListRebalancingPlansWithResponse(ctx context.Context, clusterId ClusterId, params *ListRebalancingPlansParams) (*ListRebalancingPlansResponse, error)

	// Rebalance request  with any body
	RebalanceWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*RebalanceResponse, error)

	RebalanceWithResponse(ctx context.Context, clusterId ClusterId, body RebalanceJSONRequestBody) (*RebalanceResponse, error)

	// GetRebalancingPlan request
	GetRebalancingPlanWithResponse(ctx context.Context, clusterId ClusterId, rebalancingPlanId string) (*GetRebalancingPlanResponse, error)

	// ExecuteRebalancingPlan request  with any body
	ExecuteRebalancingPlanWithBodyWithResponse(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, contentType string, body io.Reader) (*ExecuteRebalancingPlanResponse, error)

	ExecuteRebalancingPlanWithResponse(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, body ExecuteRebalancingPlanJSONRequestBody) (*ExecuteRebalancingPlanResponse, error)

	// GetWorkloads request
	GetWorkloadsWithResponse(ctx context.Context, clusterId ClusterId) (*GetWorkloadsResponse, error)

	// ExternalClusterAPIListClusters request
	ExternalClusterAPIListClustersWithResponse(ctx context.Context, params *ExternalClusterAPIListClustersParams) (*ExternalClusterAPIListClustersResponse, error)

	// ExternalClusterAPIRegisterCluster request  with any body
	ExternalClusterAPIRegisterClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ExternalClusterAPIRegisterClusterResponse, error)

	ExternalClusterAPIRegisterClusterWithResponse(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody) (*ExternalClusterAPIRegisterClusterResponse, error)

	// GetExternalClusterOperation request
	GetExternalClusterOperationWithResponse(ctx context.Context, id string) (*GetExternalClusterOperationResponse, error)

	// ExternalClusterAPIDeleteCluster request
	ExternalClusterAPIDeleteClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDeleteClusterResponse, error)

	// ExternalClusterAPIGetCluster request
	ExternalClusterAPIGetClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetClusterResponse, error)

	// ExternalClusterAPIUpdateCluster request  with any body
	ExternalClusterAPIUpdateClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIUpdateClusterResponse, error)

	ExternalClusterAPIUpdateClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody) (*ExternalClusterAPIUpdateClusterResponse, error)

	// ExternalClusterAPIGetAssumeRoleUser request
	ExternalClusterAPIGetAssumeRoleUserWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetAssumeRoleUserResponse, error)

	// ExternalClusterAPIGetCredentialsScript request
	ExternalClusterAPIGetCredentialsScriptWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams) (*ExternalClusterAPIGetCredentialsScriptResponse, error)

	// ExternalClusterAPIDisconnectCluster request  with any body
	ExternalClusterAPIDisconnectClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIDisconnectClusterResponse, error)

	ExternalClusterAPIDisconnectClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody) (*ExternalClusterAPIDisconnectClusterResponse, error)

	// CostReportAPIGetSavingsRecommendation request
	CostReportAPIGetSavingsRecommendationWithResponse(ctx context.Context, clusterId string) (*CostReportAPIGetSavingsRecommendationResponse, error)

	// ExternalClusterAPIHandleCloudEvent request  with any body
	ExternalClusterAPIHandleCloudEventWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIHandleCloudEventResponse, error)

	ExternalClusterAPIHandleCloudEventWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody) (*ExternalClusterAPIHandleCloudEventResponse, error)

	// ExternalClusterAPIListNodes request
	ExternalClusterAPIListNodesWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams) (*ExternalClusterAPIListNodesResponse, error)

	// ExternalClusterAPIAddNode request  with any body
	ExternalClusterAPIAddNodeWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIAddNodeResponse, error)

	ExternalClusterAPIAddNodeWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody) (*ExternalClusterAPIAddNodeResponse, error)

	// ExternalClusterAPIDeleteNode request
	ExternalClusterAPIDeleteNodeWithResponse(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams) (*ExternalClusterAPIDeleteNodeResponse, error)

	// ExternalClusterAPIGetNode request
	ExternalClusterAPIGetNodeWithResponse(ctx context.Context, clusterId string, nodeId string) (*ExternalClusterAPIGetNodeResponse, error)

	// ExternalClusterAPIDrainNode request  with any body
	ExternalClusterAPIDrainNodeWithBodyWithResponse(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader) (*ExternalClusterAPIDrainNodeResponse, error)

	ExternalClusterAPIDrainNodeWithResponse(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody) (*ExternalClusterAPIDrainNodeResponse, error)

	// ExternalClusterAPIPauseCluster request
	ExternalClusterAPIPauseClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIPauseClusterResponse, error)

	// ExternalClusterAPIReconcileCluster request
	ExternalClusterAPIReconcileClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIReconcileClusterResponse, error)

	// ExternalClusterAPIResumeCluster request
	ExternalClusterAPIResumeClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIResumeClusterResponse, error)

	// ExternalClusterAPICreateClusterToken request
	ExternalClusterAPICreateClusterTokenWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPICreateClusterTokenResponse, error)

	// CurrentUserProfile request
	CurrentUserProfileWithResponse(ctx context.Context) (*CurrentUserProfileResponse, error)

	// UpdateCurrentUserProfile request  with any body
	UpdateCurrentUserProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UpdateCurrentUserProfileResponse, error)

	UpdateCurrentUserProfileWithResponse(ctx context.Context, body UpdateCurrentUserProfileJSONRequestBody) (*UpdateCurrentUserProfileResponse, error)

	// GetPromMetrics request
	GetPromMetricsWithResponse(ctx context.Context, params *GetPromMetricsParams) (*GetPromMetricsResponse, error)

	// NotificationAPIListNotifications request
	NotificationAPIListNotificationsWithResponse(ctx context.Context, params *NotificationAPIListNotificationsParams) (*NotificationAPIListNotificationsResponse, error)

	// NotificationAPIAckNotifications request  with any body
	NotificationAPIAckNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*NotificationAPIAckNotificationsResponse, error)

	NotificationAPIAckNotificationsWithResponse(ctx context.Context, body NotificationAPIAckNotificationsJSONRequestBody) (*NotificationAPIAckNotificationsResponse, error)

	// NotificationAPIListWebhookConfigs request
	NotificationAPIListWebhookConfigsWithResponse(ctx context.Context, params *NotificationAPIListWebhookConfigsParams) (*NotificationAPIListWebhookConfigsResponse, error)

	// NotificationAPICreateWebhookConfig request  with any body
	NotificationAPICreateWebhookConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*NotificationAPICreateWebhookConfigResponse, error)

	NotificationAPICreateWebhookConfigWithResponse(ctx context.Context, body NotificationAPICreateWebhookConfigJSONRequestBody) (*NotificationAPICreateWebhookConfigResponse, error)

	// NotificationAPIDeleteWebhookConfig request
	NotificationAPIDeleteWebhookConfigWithResponse(ctx context.Context, id string) (*NotificationAPIDeleteWebhookConfigResponse, error)

	// NotificationAPIGetWebhookConfig request
	NotificationAPIGetWebhookConfigWithResponse(ctx context.Context, id string) (*NotificationAPIGetWebhookConfigResponse, error)

	// NotificationAPIUpdateWebhookConfig request  with any body
	NotificationAPIUpdateWebhookConfigWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*NotificationAPIUpdateWebhookConfigResponse, error)

	NotificationAPIUpdateWebhookConfigWithResponse(ctx context.Context, id string, body NotificationAPIUpdateWebhookConfigJSONRequestBody) (*NotificationAPIUpdateWebhookConfigResponse, error)

	// NotificationAPIGetNotification request
	NotificationAPIGetNotificationWithResponse(ctx context.Context, id string) (*NotificationAPIGetNotificationResponse, error)

	// ListOrganizations request
	ListOrganizationsWithResponse(ctx context.Context) (*ListOrganizationsResponse, error)

	// CreateOrganization request  with any body
	CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateOrganizationResponse, error)

	CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody) (*CreateOrganizationResponse, error)

	// DeleteOrganization request
	DeleteOrganizationWithResponse(ctx context.Context, id string) (*DeleteOrganizationResponse, error)

	// GetOrganization request
	GetOrganizationWithResponse(ctx context.Context, id string) (*GetOrganizationResponse, error)

	// UpdateOrganization request  with any body
	UpdateOrganizationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateOrganizationResponse, error)

	UpdateOrganizationWithResponse(ctx context.Context, id string, body UpdateOrganizationJSONRequestBody) (*UpdateOrganizationResponse, error)

	// GetOrganizationUsers request
	GetOrganizationUsersWithResponse(ctx context.Context, id string) (*GetOrganizationUsersResponse, error)

	// CreateOrganizationUser request  with any body
	CreateOrganizationUserWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*CreateOrganizationUserResponse, error)

	CreateOrganizationUserWithResponse(ctx context.Context, id string, body CreateOrganizationUserJSONRequestBody) (*CreateOrganizationUserResponse, error)

	// DeleteOrganizationUser request
	DeleteOrganizationUserWithResponse(ctx context.Context, id string, userId string) (*DeleteOrganizationUserResponse, error)

	// UpdateOrganizationUser request  with any body
	UpdateOrganizationUserWithBodyWithResponse(ctx context.Context, id string, userId string, contentType string, body io.Reader) (*UpdateOrganizationUserResponse, error)

	UpdateOrganizationUserWithResponse(ctx context.Context, id string, userId string, body UpdateOrganizationUserJSONRequestBody) (*UpdateOrganizationUserResponse, error)

	// GetUsageReport request
	GetUsageReportWithResponse(ctx context.Context, params *GetUsageReportParams) (*GetUsageReportResponse, error)

	// ExternalClusterAPIGetCredentialsScriptTemplate request
	ExternalClusterAPIGetCredentialsScriptTemplateWithResponse(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error)

	// InsightsAPIGetBestPracticesReport request
	InsightsAPIGetBestPracticesReportWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesReportParams) (*InsightsAPIGetBestPracticesReportResponse, error)

	// InsightsAPIGetBestPracticesCheckDetails request
	InsightsAPIGetBestPracticesCheckDetailsWithResponse(ctx context.Context, ruleId string, params *InsightsAPIGetBestPracticesCheckDetailsParams) (*InsightsAPIGetBestPracticesCheckDetailsResponse, error)

	// InsightsAPIGetBestPracticesReportFilters request
	InsightsAPIGetBestPracticesReportFiltersWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesReportFiltersParams) (*InsightsAPIGetBestPracticesReportFiltersResponse, error)

	// InsightsAPIScheduleBestPracticesScan request  with any body
	InsightsAPIScheduleBestPracticesScanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*InsightsAPIScheduleBestPracticesScanResponse, error)

	InsightsAPIScheduleBestPracticesScanWithResponse(ctx context.Context, body InsightsAPIScheduleBestPracticesScanJSONRequestBody) (*InsightsAPIScheduleBestPracticesScanResponse, error)

	// InsightsAPIGetBestPracticesReportSummary request
	InsightsAPIGetBestPracticesReportSummaryWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesReportSummaryParams) (*InsightsAPIGetBestPracticesReportSummaryResponse, error)

	// InsightsAPIGetBestPracticesOverview request
	InsightsAPIGetBestPracticesOverviewWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesOverviewParams) (*InsightsAPIGetBestPracticesOverviewResponse, error)

	// InsightsAPIGetOverviewSummary request
	InsightsAPIGetOverviewSummaryWithResponse(ctx context.Context, params *InsightsAPIGetOverviewSummaryParams) (*InsightsAPIGetOverviewSummaryResponse, error)

	// InsightsAPIGetVulnerabilitiesOverview request
	InsightsAPIGetVulnerabilitiesOverviewWithResponse(ctx context.Context, params *InsightsAPIGetVulnerabilitiesOverviewParams) (*InsightsAPIGetVulnerabilitiesOverviewResponse, error)

	// InsightsAPIGetVulnerabilitiesReport request
	InsightsAPIGetVulnerabilitiesReportWithResponse(ctx context.Context, params *InsightsAPIGetVulnerabilitiesReportParams) (*InsightsAPIGetVulnerabilitiesReportResponse, error)

	// InsightsAPIGetVulnerabilitiesDetails request
	InsightsAPIGetVulnerabilitiesDetailsWithResponse(ctx context.Context, objectId string) (*InsightsAPIGetVulnerabilitiesDetailsResponse, error)

	// InsightsAPIGetVulnerabilitiesResources request
	InsightsAPIGetVulnerabilitiesResourcesWithResponse(ctx context.Context, objectId string) (*InsightsAPIGetVulnerabilitiesResourcesResponse, error)

	// InsightsAPIGetPackageVulnerabilities request
	InsightsAPIGetPackageVulnerabilitiesWithResponse(ctx context.Context, objectId string, params *InsightsAPIGetPackageVulnerabilitiesParams) (*InsightsAPIGetPackageVulnerabilitiesResponse, error)

	// InsightsAPIGetResourceVulnerablePackages request
	InsightsAPIGetResourceVulnerablePackagesWithResponse(ctx context.Context, objectId string) (*InsightsAPIGetResourceVulnerablePackagesResponse, error)

	// InsightsAPIScheduleVulnerabilitiesScan request  with any body
	InsightsAPIScheduleVulnerabilitiesScanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*InsightsAPIScheduleVulnerabilitiesScanResponse, error)

	InsightsAPIScheduleVulnerabilitiesScanWithResponse(ctx context.Context, body InsightsAPIScheduleVulnerabilitiesScanJSONRequestBody) (*InsightsAPIScheduleVulnerabilitiesScanResponse, error)

	// InsightsAPIGetVulnerabilitiesReportSummary request
	InsightsAPIGetVulnerabilitiesReportSummaryWithResponse(ctx context.Context, params *InsightsAPIGetVulnerabilitiesReportSummaryParams) (*InsightsAPIGetVulnerabilitiesReportSummaryResponse, error)

	// InsightsAPIDisconnectAgent request
	InsightsAPIDisconnectAgentWithResponse(ctx context.Context, clusterId string) (*InsightsAPIDisconnectAgentResponse, error)

	// InsightsAPIIngestAgentLog request  with any body
	InsightsAPIIngestAgentLogWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*InsightsAPIIngestAgentLogResponse, error)

	InsightsAPIIngestAgentLogWithResponse(ctx context.Context, clusterId string, body InsightsAPIIngestAgentLogJSONRequestBody) (*InsightsAPIIngestAgentLogResponse, error)

	// InsightsAPIPostAgentTelemetry request  with any body
	InsightsAPIPostAgentTelemetryWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*InsightsAPIPostAgentTelemetryResponse, error)

	InsightsAPIPostAgentTelemetryWithResponse(ctx context.Context, clusterId string, body InsightsAPIPostAgentTelemetryJSONRequestBody) (*InsightsAPIPostAgentTelemetryResponse, error)

	// InsightsAPIGetAgentInstallScript request
	InsightsAPIGetAgentInstallScriptWithResponse(ctx context.Context, clusterId string, params *InsightsAPIGetAgentInstallScriptParams) (*InsightsAPIGetAgentInstallScriptResponse, error)

	// InsightsAPIGetAgentCloudScript request
	InsightsAPIGetAgentCloudScriptWithResponse(ctx context.Context, provider string) (*InsightsAPIGetAgentCloudScriptResponse, error)
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
type Response interface {
	Status() string
	StatusCode() int
	GetBody() []byte
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetAgentInstallScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAgentInstallScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentInstallScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetAgentInstallScriptResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListAuditEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuditEventList
}

// Status returns HTTPResponse.Status
func (r ListAuditEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuditEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListAuditEventsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListAuthTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthTokenList
}

// Status returns HTTPResponse.Status
func (r ListAuthTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuthTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListAuthTokensResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthTokenCreateResponse
}

// Status returns HTTPResponse.Status
func (r CreateAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthToken
}

// Status returns HTTPResponse.Status
func (r GetAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UpdateAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthToken
}

// Status returns HTTPResponse.Status
func (r UpdateAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UpdateAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CostReportAPIListAllocationGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1ListAllocationGroupsResponse
}

// Status returns HTTPResponse.Status
func (r CostReportAPIListAllocationGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CostReportAPIListAllocationGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CostReportAPIListAllocationGroupsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CostReportAPICreateAllocationGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1AllocationGroup
}

// Status returns HTTPResponse.Status
func (r CostReportAPICreateAllocationGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CostReportAPICreateAllocationGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CostReportAPICreateAllocationGroupResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CostReportAPIDeleteAllocationGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1DeleteAllocationGroupResponse
}

// Status returns HTTPResponse.Status
func (r CostReportAPIDeleteAllocationGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CostReportAPIDeleteAllocationGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CostReportAPIDeleteAllocationGroupResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CostReportAPIUpdateAllocationGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1AllocationGroup
}

// Status returns HTTPResponse.Status
func (r CostReportAPIUpdateAllocationGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CostReportAPIUpdateAllocationGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CostReportAPIUpdateAllocationGroupResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CostReportAPIGetClusterCostHistory2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterCostHistoryResponse
}

// Status returns HTTPResponse.Status
func (r CostReportAPIGetClusterCostHistory2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CostReportAPIGetClusterCostHistory2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CostReportAPIGetClusterCostHistory2Response) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CostReportAPIGetClusterCostReport2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterCostReportResponse
}

// Status returns HTTPResponse.Status
func (r CostReportAPIGetClusterCostReport2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CostReportAPIGetClusterCostReport2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CostReportAPIGetClusterCostReport2Response) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CostReportAPIGetClusterWorkloadReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterWorkloadReportResponse
}

// Status returns HTTPResponse.Status
func (r CostReportAPIGetClusterWorkloadReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CostReportAPIGetClusterWorkloadReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CostReportAPIGetClusterWorkloadReportResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CostReportAPIGetClusterWorkloadReport2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterWorkloadReportResponse
}

// Status returns HTTPResponse.Status
func (r CostReportAPIGetClusterWorkloadReport2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CostReportAPIGetClusterWorkloadReport2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CostReportAPIGetClusterWorkloadReport2Response) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CostReportAPIGetClusterWorkloadLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterWorkloadLabelsResponse
}

// Status returns HTTPResponse.Status
func (r CostReportAPIGetClusterWorkloadLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CostReportAPIGetClusterWorkloadLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CostReportAPIGetClusterWorkloadLabelsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CostReportAPIGetClustersCostReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClustersCostReportResponse
}

// Status returns HTTPResponse.Status
func (r CostReportAPIGetClustersCostReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CostReportAPIGetClustersCostReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CostReportAPIGetClustersCostReportResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListCloudCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudCredentialsList
}

// Status returns HTTPResponse.Status
func (r ListCloudCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCloudCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListCloudCredentialsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateCloudCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CloudCredentials
}

// Status returns HTTPResponse.Status
func (r CreateCloudCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCloudCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateCloudCredentialsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteCloudCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCloudCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCloudCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteCloudCredentialsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetCloudCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudCredentials
}

// Status returns HTTPResponse.Status
func (r GetCloudCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetCloudCredentialsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InventoryBlacklistAPIListBlacklistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryblacklistV1ListBlacklistsResponse
}

// Status returns HTTPResponse.Status
func (r InventoryBlacklistAPIListBlacklistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryBlacklistAPIListBlacklistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InventoryBlacklistAPIListBlacklistsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InventoryBlacklistAPIAddBlacklistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryblacklistV1AddBlacklistResponse
}

// Status returns HTTPResponse.Status
func (r InventoryBlacklistAPIAddBlacklistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryBlacklistAPIAddBlacklistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InventoryBlacklistAPIAddBlacklistResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InventoryBlacklistAPIRemoveBlacklistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InventoryblacklistV1RemoveBlacklistResponse
}

// Status returns HTTPResponse.Status
func (r InventoryBlacklistAPIRemoveBlacklistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryBlacklistAPIRemoveBlacklistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InventoryBlacklistAPIRemoveBlacklistResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NewInvitationsResponse
}

// Status returns HTTPResponse.Status
func (r CreateInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateInvitationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ClaimInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ClaimInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClaimInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ClaimInvitationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ClusterActionsAPIPollClusterActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusteractionsV1PollClusterActionsResponse
}

// Status returns HTTPResponse.Status
func (r ClusterActionsAPIPollClusterActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterActionsAPIPollClusterActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ClusterActionsAPIPollClusterActionsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ClusterActionsAPIIngestLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusteractionsV1IngestLogsResponse
}

// Status returns HTTPResponse.Status
func (r ClusterActionsAPIIngestLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterActionsAPIIngestLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ClusterActionsAPIIngestLogsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ClusterActionsAPIAckClusterActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusteractionsV1AckClusterActionResponse
}

// Status returns HTTPResponse.Status
func (r ClusterActionsAPIAckClusterActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterActionsAPIAckClusterActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ClusterActionsAPIAckClusterActionResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CostReportAPIGetClusterCostHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterCostHistoryResponse
}

// Status returns HTTPResponse.Status
func (r CostReportAPIGetClusterCostHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CostReportAPIGetClusterCostHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CostReportAPIGetClusterCostHistoryResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CostReportAPIGetClusterCostReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetClusterCostReportResponse
}

// Status returns HTTPResponse.Status
func (r CostReportAPIGetClusterCostReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CostReportAPIGetClusterCostReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CostReportAPIGetClusterCostReportResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CostReportAPIGetSavingsRecommendation2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetSavingsRecommendationResponse
}

// Status returns HTTPResponse.Status
func (r CostReportAPIGetSavingsRecommendation2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CostReportAPIGetSavingsRecommendation2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CostReportAPIGetSavingsRecommendation2Response) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeTemplatesAPIFilterInstanceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1FilterInstanceTypesResponse
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPIFilterInstanceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPIFilterInstanceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeTemplatesAPIFilterInstanceTypesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type MetricsAPIGetCPUUsageMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiMetricsV1beta1GetCPUUsageMetricsResponse
}

// Status returns HTTPResponse.Status
func (r MetricsAPIGetCPUUsageMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsAPIGetCPUUsageMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r MetricsAPIGetCPUUsageMetricsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type MetricsAPIGetGaugesMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiMetricsV1beta1GetGaugesMetricsResponse
}

// Status returns HTTPResponse.Status
func (r MetricsAPIGetGaugesMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsAPIGetGaugesMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r MetricsAPIGetGaugesMetricsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type MetricsAPIGetMemoryUsageMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiMetricsV1beta1GetMemoryUsageMetricsResponse
}

// Status returns HTTPResponse.Status
func (r MetricsAPIGetMemoryUsageMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsAPIGetMemoryUsageMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r MetricsAPIGetMemoryUsageMetricsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeConfigurationAPIListConfigurationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1ListConfigurationsResponse
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIListConfigurationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIListConfigurationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeConfigurationAPIListConfigurationsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeConfigurationAPICreateConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1NodeConfiguration
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPICreateConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPICreateConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeConfigurationAPICreateConfigurationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeConfigurationAPIDeleteConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1DeleteConfigurationResponse
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIDeleteConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIDeleteConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeConfigurationAPIDeleteConfigurationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeConfigurationAPIGetConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1NodeConfiguration
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIGetConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIGetConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeConfigurationAPIGetConfigurationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeConfigurationAPIUpdateConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1NodeConfiguration
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIUpdateConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIUpdateConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeConfigurationAPIUpdateConfigurationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeConfigurationAPISetDefaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1NodeConfiguration
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPISetDefaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPISetDefaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeConfigurationAPISetDefaultResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type PoliciesAPIGetClusterNodeConstraintsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoliciesV1GetClusterNodeConstraintsResponse
}

// Status returns HTTPResponse.Status
func (r PoliciesAPIGetClusterNodeConstraintsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesAPIGetClusterNodeConstraintsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r PoliciesAPIGetClusterNodeConstraintsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeTemplatesAPIListNodeTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1ListNodeTemplatesResponse
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPIListNodeTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPIListNodeTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeTemplatesAPIListNodeTemplatesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeTemplatesAPICreateNodeTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1NodeTemplate
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPICreateNodeTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPICreateNodeTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeTemplatesAPICreateNodeTemplateResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeTemplatesAPIDeleteNodeTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1DeleteNodeTemplateResponse
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPIDeleteNodeTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPIDeleteNodeTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeTemplatesAPIDeleteNodeTemplateResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeTemplatesAPIUpdateNodeTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1NodeTemplate
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPIUpdateNodeTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPIUpdateNodeTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeTemplatesAPIUpdateNodeTemplateResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type PoliciesAPIGetClusterPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoliciesV1Policies
}

// Status returns HTTPResponse.Status
func (r PoliciesAPIGetClusterPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesAPIGetClusterPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r PoliciesAPIGetClusterPoliciesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type PoliciesAPIUpsertClusterPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoliciesV1Policies
}

// Status returns HTTPResponse.Status
func (r PoliciesAPIUpsertClusterPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesAPIUpsertClusterPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r PoliciesAPIUpsertClusterPoliciesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetProblematicWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterProblematicWorkloads
}

// Status returns HTTPResponse.Status
func (r GetProblematicWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProblematicWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetProblematicWorkloadsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetRebalancedWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RebalancedWorkloads
}

// Status returns HTTPResponse.Status
func (r GetRebalancedWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRebalancedWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetRebalancedWorkloadsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListRebalancingPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RebalancingPlansResponse
}

// Status returns HTTPResponse.Status
func (r ListRebalancingPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRebalancingPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListRebalancingPlansResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type RebalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *RebalancingAccepted
}

// Status returns HTTPResponse.Status
func (r RebalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RebalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r RebalanceResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetRebalancingPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RebalancingPlan
}

// Status returns HTTPResponse.Status
func (r GetRebalancingPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRebalancingPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetRebalancingPlanResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExecuteRebalancingPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RebalancingPlan
}

// Status returns HTTPResponse.Status
func (r ExecuteRebalancingPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteRebalancingPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExecuteRebalancingPlanResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterWorkloads
}

// Status returns HTTPResponse.Status
func (r GetWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetWorkloadsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIListClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1ListClustersResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIListClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIListClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIListClustersResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIRegisterClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIRegisterClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIRegisterClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIRegisterClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetExternalClusterOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationResponse
}

// Status returns HTTPResponse.Status
func (r GetExternalClusterOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExternalClusterOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetExternalClusterOperationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDeleteClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIUpdateClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIUpdateClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIUpdateClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIUpdateClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetAssumeRoleUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetAssumeRoleUserResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetAssumeRoleUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetAssumeRoleUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetAssumeRoleUserResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetCredentialsScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetCredentialsScriptResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCredentialsScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCredentialsScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetCredentialsScriptResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDisconnectClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDisconnectClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDisconnectClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDisconnectClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CostReportAPIGetSavingsRecommendationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CostreportV1beta1GetSavingsRecommendationResponse
}

// Status returns HTTPResponse.Status
func (r CostReportAPIGetSavingsRecommendationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CostReportAPIGetSavingsRecommendationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CostReportAPIGetSavingsRecommendationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIHandleCloudEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1HandleCloudEventResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIHandleCloudEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIHandleCloudEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIHandleCloudEventResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIListNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1ListNodesResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIListNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIListNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIListNodesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIAddNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1AddNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIAddNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIAddNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIAddNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDeleteNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DeleteNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDeleteNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDeleteNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDeleteNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Node
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDrainNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DrainNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDrainNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDrainNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDrainNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIPauseClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIPauseClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIPauseClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIPauseClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIReconcileClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1ReconcileClusterResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIReconcileClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIReconcileClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIReconcileClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIResumeClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIResumeClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIResumeClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIResumeClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPICreateClusterTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1CreateClusterTokenResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPICreateClusterTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPICreateClusterTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPICreateClusterTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CurrentUserProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileResponse
}

// Status returns HTTPResponse.Status
func (r CurrentUserProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CurrentUserProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CurrentUserProfileResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UpdateCurrentUserProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfile
}

// Status returns HTTPResponse.Status
func (r UpdateCurrentUserProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCurrentUserProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UpdateCurrentUserProfileResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetPromMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPromMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPromMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetPromMetricsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NotificationAPIListNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1ListNotificationsResponse
}

// Status returns HTTPResponse.Status
func (r NotificationAPIListNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIListNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NotificationAPIListNotificationsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NotificationAPIAckNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1AckNotificationsResponse
}

// Status returns HTTPResponse.Status
func (r NotificationAPIAckNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIAckNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NotificationAPIAckNotificationsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NotificationAPIListWebhookConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1ListWebhookConfigsResponse
}

// Status returns HTTPResponse.Status
func (r NotificationAPIListWebhookConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIListWebhookConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NotificationAPIListWebhookConfigsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NotificationAPICreateWebhookConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1WebhookConfig
}

// Status returns HTTPResponse.Status
func (r NotificationAPICreateWebhookConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPICreateWebhookConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NotificationAPICreateWebhookConfigResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NotificationAPIDeleteWebhookConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1DeleteWebhookConfigResponse
}

// Status returns HTTPResponse.Status
func (r NotificationAPIDeleteWebhookConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIDeleteWebhookConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NotificationAPIDeleteWebhookConfigResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NotificationAPIGetWebhookConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1WebhookConfig
}

// Status returns HTTPResponse.Status
func (r NotificationAPIGetWebhookConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIGetWebhookConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NotificationAPIGetWebhookConfigResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NotificationAPIUpdateWebhookConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1WebhookConfig
}

// Status returns HTTPResponse.Status
func (r NotificationAPIUpdateWebhookConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIUpdateWebhookConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NotificationAPIUpdateWebhookConfigResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NotificationAPIGetNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiNotificationsV1beta1Notification
}

// Status returns HTTPResponse.Status
func (r NotificationAPIGetNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NotificationAPIGetNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NotificationAPIGetNotificationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationsList
}

// Status returns HTTPResponse.Status
func (r ListOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListOrganizationsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateOrganizationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteOrganizationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r GetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetOrganizationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UpdateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UpdateOrganizationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetOrganizationUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUsersList
}

// Status returns HTTPResponse.Status
func (r GetOrganizationUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetOrganizationUsersResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateOrganizationUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUser
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateOrganizationUserResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteOrganizationUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteOrganizationUserResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UpdateOrganizationUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUser
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UpdateOrganizationUserResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetUsageReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceUsageReport
}

// Status returns HTTPResponse.Status
func (r GetUsageReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsageReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetUsageReportResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetCredentialsScriptTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCredentialsScriptTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCredentialsScriptTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetCredentialsScriptTemplateResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetBestPracticesReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetBestPracticesReportResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetBestPracticesReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetBestPracticesReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetBestPracticesReportResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetBestPracticesCheckDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetBestPracticesCheckDetailsResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetBestPracticesCheckDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetBestPracticesCheckDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetBestPracticesCheckDetailsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetBestPracticesReportFiltersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetBestPracticesReportFiltersResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetBestPracticesReportFiltersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetBestPracticesReportFiltersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetBestPracticesReportFiltersResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIScheduleBestPracticesScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1ScheduleBestPracticesScanResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIScheduleBestPracticesScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIScheduleBestPracticesScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIScheduleBestPracticesScanResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetBestPracticesReportSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetBestPracticesReportSummaryResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetBestPracticesReportSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetBestPracticesReportSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetBestPracticesReportSummaryResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetBestPracticesOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetBestPracticesOverviewResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetBestPracticesOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetBestPracticesOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetBestPracticesOverviewResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetOverviewSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetOverviewSummaryResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetOverviewSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetOverviewSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetOverviewSummaryResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetVulnerabilitiesOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetVulnerabilitiesOverviewResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetVulnerabilitiesOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetVulnerabilitiesOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetVulnerabilitiesOverviewResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetVulnerabilitiesReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetVulnerabilitiesReportResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetVulnerabilitiesReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetVulnerabilitiesReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetVulnerabilitiesReportResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetVulnerabilitiesDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetVulnerabilitiesDetailsResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetVulnerabilitiesDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetVulnerabilitiesDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetVulnerabilitiesDetailsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetVulnerabilitiesResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetVulnerabilitiesResourcesResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetVulnerabilitiesResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetVulnerabilitiesResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetVulnerabilitiesResourcesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetPackageVulnerabilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetPackageVulnerabilitiesResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetPackageVulnerabilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetPackageVulnerabilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetPackageVulnerabilitiesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetResourceVulnerablePackagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetResourceVulnerablePackagesResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetResourceVulnerablePackagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetResourceVulnerablePackagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetResourceVulnerablePackagesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIScheduleVulnerabilitiesScanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1ScheduleVulnerabilitiesScanResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIScheduleVulnerabilitiesScanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIScheduleVulnerabilitiesScanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIScheduleVulnerabilitiesScanResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetVulnerabilitiesReportSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1GetVulnerabilitiesReportSummaryResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetVulnerabilitiesReportSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetVulnerabilitiesReportSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetVulnerabilitiesReportSummaryResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIDisconnectAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1DisconnectAgentResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIDisconnectAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIDisconnectAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIDisconnectAgentResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIIngestAgentLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1IngestAgentLogResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIIngestAgentLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIIngestAgentLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIIngestAgentLogResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIPostAgentTelemetryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InsightsV1PostAgentTelemetryResponse
}

// Status returns HTTPResponse.Status
func (r InsightsAPIPostAgentTelemetryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIPostAgentTelemetryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIPostAgentTelemetryResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetAgentInstallScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetAgentInstallScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetAgentInstallScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetAgentInstallScriptResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InsightsAPIGetAgentCloudScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InsightsAPIGetAgentCloudScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InsightsAPIGetAgentCloudScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InsightsAPIGetAgentCloudScriptResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

// GetAgentInstallScriptWithResponse request returning *GetAgentInstallScriptResponse
func (c *ClientWithResponses) GetAgentInstallScriptWithResponse(ctx context.Context, params *GetAgentInstallScriptParams) (*GetAgentInstallScriptResponse, error) {
	rsp, err := c.GetAgentInstallScript(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentInstallScriptResponse(rsp)
}

// ListAuditEventsWithResponse request returning *ListAuditEventsResponse
func (c *ClientWithResponses) ListAuditEventsWithResponse(ctx context.Context, params *ListAuditEventsParams) (*ListAuditEventsResponse, error) {
	rsp, err := c.ListAuditEvents(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListAuditEventsResponse(rsp)
}

// ListAuthTokensWithResponse request returning *ListAuthTokensResponse
func (c *ClientWithResponses) ListAuthTokensWithResponse(ctx context.Context, params *ListAuthTokensParams) (*ListAuthTokensResponse, error) {
	rsp, err := c.ListAuthTokens(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListAuthTokensResponse(rsp)
}

// CreateAuthTokenWithBodyWithResponse request with arbitrary body returning *CreateAuthTokenResponse
func (c *ClientWithResponses) CreateAuthTokenWithBodyWithResponse(ctx context.Context, params *CreateAuthTokenParams, contentType string, body io.Reader) (*CreateAuthTokenResponse, error) {
	rsp, err := c.CreateAuthTokenWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthTokenWithResponse(ctx context.Context, params *CreateAuthTokenParams, body CreateAuthTokenJSONRequestBody) (*CreateAuthTokenResponse, error) {
	rsp, err := c.CreateAuthToken(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthTokenResponse(rsp)
}

// DeleteAuthTokenWithResponse request returning *DeleteAuthTokenResponse
func (c *ClientWithResponses) DeleteAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId, params *DeleteAuthTokenParams) (*DeleteAuthTokenResponse, error) {
	rsp, err := c.DeleteAuthToken(ctx, authTokenId, params)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthTokenResponse(rsp)
}

// GetAuthTokenWithResponse request returning *GetAuthTokenResponse
func (c *ClientWithResponses) GetAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId, params *GetAuthTokenParams) (*GetAuthTokenResponse, error) {
	rsp, err := c.GetAuthToken(ctx, authTokenId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthTokenResponse(rsp)
}

// UpdateAuthTokenWithBodyWithResponse request with arbitrary body returning *UpdateAuthTokenResponse
func (c *ClientWithResponses) UpdateAuthTokenWithBodyWithResponse(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, contentType string, body io.Reader) (*UpdateAuthTokenResponse, error) {
	rsp, err := c.UpdateAuthTokenWithBody(ctx, authTokenId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthTokenResponse(rsp)
}

func (c *ClientWithResponses) UpdateAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, body UpdateAuthTokenJSONRequestBody) (*UpdateAuthTokenResponse, error) {
	rsp, err := c.UpdateAuthToken(ctx, authTokenId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthTokenResponse(rsp)
}

// CostReportAPIListAllocationGroupsWithResponse request returning *CostReportAPIListAllocationGroupsResponse
func (c *ClientWithResponses) CostReportAPIListAllocationGroupsWithResponse(ctx context.Context, params *CostReportAPIListAllocationGroupsParams) (*CostReportAPIListAllocationGroupsResponse, error) {
	rsp, err := c.CostReportAPIListAllocationGroups(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIListAllocationGroupsResponse(rsp)
}

// CostReportAPICreateAllocationGroupWithBodyWithResponse request with arbitrary body returning *CostReportAPICreateAllocationGroupResponse
func (c *ClientWithResponses) CostReportAPICreateAllocationGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CostReportAPICreateAllocationGroupResponse, error) {
	rsp, err := c.CostReportAPICreateAllocationGroupWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPICreateAllocationGroupResponse(rsp)
}

func (c *ClientWithResponses) CostReportAPICreateAllocationGroupWithResponse(ctx context.Context, body CostReportAPICreateAllocationGroupJSONRequestBody) (*CostReportAPICreateAllocationGroupResponse, error) {
	rsp, err := c.CostReportAPICreateAllocationGroup(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPICreateAllocationGroupResponse(rsp)
}

// CostReportAPIDeleteAllocationGroupWithResponse request returning *CostReportAPIDeleteAllocationGroupResponse
func (c *ClientWithResponses) CostReportAPIDeleteAllocationGroupWithResponse(ctx context.Context, id string) (*CostReportAPIDeleteAllocationGroupResponse, error) {
	rsp, err := c.CostReportAPIDeleteAllocationGroup(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIDeleteAllocationGroupResponse(rsp)
}

// CostReportAPIUpdateAllocationGroupWithBodyWithResponse request with arbitrary body returning *CostReportAPIUpdateAllocationGroupResponse
func (c *ClientWithResponses) CostReportAPIUpdateAllocationGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*CostReportAPIUpdateAllocationGroupResponse, error) {
	rsp, err := c.CostReportAPIUpdateAllocationGroupWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIUpdateAllocationGroupResponse(rsp)
}

func (c *ClientWithResponses) CostReportAPIUpdateAllocationGroupWithResponse(ctx context.Context, id string, body CostReportAPIUpdateAllocationGroupJSONRequestBody) (*CostReportAPIUpdateAllocationGroupResponse, error) {
	rsp, err := c.CostReportAPIUpdateAllocationGroup(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIUpdateAllocationGroupResponse(rsp)
}

// CostReportAPIGetClusterCostHistory2WithResponse request returning *CostReportAPIGetClusterCostHistory2Response
func (c *ClientWithResponses) CostReportAPIGetClusterCostHistory2WithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostHistory2Params) (*CostReportAPIGetClusterCostHistory2Response, error) {
	rsp, err := c.CostReportAPIGetClusterCostHistory2(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIGetClusterCostHistory2Response(rsp)
}

// CostReportAPIGetClusterCostReport2WithResponse request returning *CostReportAPIGetClusterCostReport2Response
func (c *ClientWithResponses) CostReportAPIGetClusterCostReport2WithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostReport2Params) (*CostReportAPIGetClusterCostReport2Response, error) {
	rsp, err := c.CostReportAPIGetClusterCostReport2(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIGetClusterCostReport2Response(rsp)
}

// CostReportAPIGetClusterWorkloadReportWithResponse request returning *CostReportAPIGetClusterWorkloadReportResponse
func (c *ClientWithResponses) CostReportAPIGetClusterWorkloadReportWithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadReportParams) (*CostReportAPIGetClusterWorkloadReportResponse, error) {
	rsp, err := c.CostReportAPIGetClusterWorkloadReport(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIGetClusterWorkloadReportResponse(rsp)
}

// CostReportAPIGetClusterWorkloadReport2WithBodyWithResponse request with arbitrary body returning *CostReportAPIGetClusterWorkloadReport2Response
func (c *ClientWithResponses) CostReportAPIGetClusterWorkloadReport2WithBodyWithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadReport2Params, contentType string, body io.Reader) (*CostReportAPIGetClusterWorkloadReport2Response, error) {
	rsp, err := c.CostReportAPIGetClusterWorkloadReport2WithBody(ctx, clusterId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIGetClusterWorkloadReport2Response(rsp)
}

func (c *ClientWithResponses) CostReportAPIGetClusterWorkloadReport2WithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadReport2Params, body CostReportAPIGetClusterWorkloadReport2JSONRequestBody) (*CostReportAPIGetClusterWorkloadReport2Response, error) {
	rsp, err := c.CostReportAPIGetClusterWorkloadReport2(ctx, clusterId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIGetClusterWorkloadReport2Response(rsp)
}

// CostReportAPIGetClusterWorkloadLabelsWithResponse request returning *CostReportAPIGetClusterWorkloadLabelsResponse
func (c *ClientWithResponses) CostReportAPIGetClusterWorkloadLabelsWithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterWorkloadLabelsParams) (*CostReportAPIGetClusterWorkloadLabelsResponse, error) {
	rsp, err := c.CostReportAPIGetClusterWorkloadLabels(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIGetClusterWorkloadLabelsResponse(rsp)
}

// CostReportAPIGetClustersCostReportWithResponse request returning *CostReportAPIGetClustersCostReportResponse
func (c *ClientWithResponses) CostReportAPIGetClustersCostReportWithResponse(ctx context.Context, params *CostReportAPIGetClustersCostReportParams) (*CostReportAPIGetClustersCostReportResponse, error) {
	rsp, err := c.CostReportAPIGetClustersCostReport(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIGetClustersCostReportResponse(rsp)
}

// ListCloudCredentialsWithResponse request returning *ListCloudCredentialsResponse
func (c *ClientWithResponses) ListCloudCredentialsWithResponse(ctx context.Context) (*ListCloudCredentialsResponse, error) {
	rsp, err := c.ListCloudCredentials(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListCloudCredentialsResponse(rsp)
}

// CreateCloudCredentialsWithBodyWithResponse request with arbitrary body returning *CreateCloudCredentialsResponse
func (c *ClientWithResponses) CreateCloudCredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateCloudCredentialsResponse, error) {
	rsp, err := c.CreateCloudCredentialsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateCloudCredentialsResponse(rsp)
}

func (c *ClientWithResponses) CreateCloudCredentialsWithResponse(ctx context.Context, body CreateCloudCredentialsJSONRequestBody) (*CreateCloudCredentialsResponse, error) {
	rsp, err := c.CreateCloudCredentials(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateCloudCredentialsResponse(rsp)
}

// DeleteCloudCredentialsWithResponse request returning *DeleteCloudCredentialsResponse
func (c *ClientWithResponses) DeleteCloudCredentialsWithResponse(ctx context.Context, credentialsId CredentialsId) (*DeleteCloudCredentialsResponse, error) {
	rsp, err := c.DeleteCloudCredentials(ctx, credentialsId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCloudCredentialsResponse(rsp)
}

// GetCloudCredentialsWithResponse request returning *GetCloudCredentialsResponse
func (c *ClientWithResponses) GetCloudCredentialsWithResponse(ctx context.Context, credentialsId CredentialsId) (*GetCloudCredentialsResponse, error) {
	rsp, err := c.GetCloudCredentials(ctx, credentialsId)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudCredentialsResponse(rsp)
}

// InventoryBlacklistAPIListBlacklistsWithResponse request returning *InventoryBlacklistAPIListBlacklistsResponse
func (c *ClientWithResponses) InventoryBlacklistAPIListBlacklistsWithResponse(ctx context.Context, params *InventoryBlacklistAPIListBlacklistsParams) (*InventoryBlacklistAPIListBlacklistsResponse, error) {
	rsp, err := c.InventoryBlacklistAPIListBlacklists(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseInventoryBlacklistAPIListBlacklistsResponse(rsp)
}

// InventoryBlacklistAPIAddBlacklistWithBodyWithResponse request with arbitrary body returning *InventoryBlacklistAPIAddBlacklistResponse
func (c *ClientWithResponses) InventoryBlacklistAPIAddBlacklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*InventoryBlacklistAPIAddBlacklistResponse, error) {
	rsp, err := c.InventoryBlacklistAPIAddBlacklistWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseInventoryBlacklistAPIAddBlacklistResponse(rsp)
}

func (c *ClientWithResponses) InventoryBlacklistAPIAddBlacklistWithResponse(ctx context.Context, body InventoryBlacklistAPIAddBlacklistJSONRequestBody) (*InventoryBlacklistAPIAddBlacklistResponse, error) {
	rsp, err := c.InventoryBlacklistAPIAddBlacklist(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseInventoryBlacklistAPIAddBlacklistResponse(rsp)
}

// InventoryBlacklistAPIRemoveBlacklistWithBodyWithResponse request with arbitrary body returning *InventoryBlacklistAPIRemoveBlacklistResponse
func (c *ClientWithResponses) InventoryBlacklistAPIRemoveBlacklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*InventoryBlacklistAPIRemoveBlacklistResponse, error) {
	rsp, err := c.InventoryBlacklistAPIRemoveBlacklistWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseInventoryBlacklistAPIRemoveBlacklistResponse(rsp)
}

func (c *ClientWithResponses) InventoryBlacklistAPIRemoveBlacklistWithResponse(ctx context.Context, body InventoryBlacklistAPIRemoveBlacklistJSONRequestBody) (*InventoryBlacklistAPIRemoveBlacklistResponse, error) {
	rsp, err := c.InventoryBlacklistAPIRemoveBlacklist(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseInventoryBlacklistAPIRemoveBlacklistResponse(rsp)
}

// CreateInvitationWithBodyWithResponse request with arbitrary body returning *CreateInvitationResponse
func (c *ClientWithResponses) CreateInvitationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateInvitationResponse, error) {
	rsp, err := c.CreateInvitationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateInvitationResponse(rsp)
}

func (c *ClientWithResponses) CreateInvitationWithResponse(ctx context.Context, body CreateInvitationJSONRequestBody) (*CreateInvitationResponse, error) {
	rsp, err := c.CreateInvitation(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateInvitationResponse(rsp)
}

// ClaimInvitationWithBodyWithResponse request with arbitrary body returning *ClaimInvitationResponse
func (c *ClientWithResponses) ClaimInvitationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ClaimInvitationResponse, error) {
	rsp, err := c.ClaimInvitationWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseClaimInvitationResponse(rsp)
}

func (c *ClientWithResponses) ClaimInvitationWithResponse(ctx context.Context, id string, body ClaimInvitationJSONRequestBody) (*ClaimInvitationResponse, error) {
	rsp, err := c.ClaimInvitation(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseClaimInvitationResponse(rsp)
}

// ClusterActionsAPIPollClusterActionsWithResponse request returning *ClusterActionsAPIPollClusterActionsResponse
func (c *ClientWithResponses) ClusterActionsAPIPollClusterActionsWithResponse(ctx context.Context, clusterId string) (*ClusterActionsAPIPollClusterActionsResponse, error) {
	rsp, err := c.ClusterActionsAPIPollClusterActions(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIPollClusterActionsResponse(rsp)
}

// ClusterActionsAPIIngestLogsWithBodyWithResponse request with arbitrary body returning *ClusterActionsAPIIngestLogsResponse
func (c *ClientWithResponses) ClusterActionsAPIIngestLogsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ClusterActionsAPIIngestLogsResponse, error) {
	rsp, err := c.ClusterActionsAPIIngestLogsWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIIngestLogsResponse(rsp)
}

func (c *ClientWithResponses) ClusterActionsAPIIngestLogsWithResponse(ctx context.Context, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody) (*ClusterActionsAPIIngestLogsResponse, error) {
	rsp, err := c.ClusterActionsAPIIngestLogs(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIIngestLogsResponse(rsp)
}

// ClusterActionsAPIAckClusterActionWithBodyWithResponse request with arbitrary body returning *ClusterActionsAPIAckClusterActionResponse
func (c *ClientWithResponses) ClusterActionsAPIAckClusterActionWithBodyWithResponse(ctx context.Context, clusterId string, actionId string, contentType string, body io.Reader) (*ClusterActionsAPIAckClusterActionResponse, error) {
	rsp, err := c.ClusterActionsAPIAckClusterActionWithBody(ctx, clusterId, actionId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIAckClusterActionResponse(rsp)
}

func (c *ClientWithResponses) ClusterActionsAPIAckClusterActionWithResponse(ctx context.Context, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody) (*ClusterActionsAPIAckClusterActionResponse, error) {
	rsp, err := c.ClusterActionsAPIAckClusterAction(ctx, clusterId, actionId, body)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIAckClusterActionResponse(rsp)
}

// CostReportAPIGetClusterCostHistoryWithResponse request returning *CostReportAPIGetClusterCostHistoryResponse
func (c *ClientWithResponses) CostReportAPIGetClusterCostHistoryWithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostHistoryParams) (*CostReportAPIGetClusterCostHistoryResponse, error) {
	rsp, err := c.CostReportAPIGetClusterCostHistory(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIGetClusterCostHistoryResponse(rsp)
}

// CostReportAPIGetClusterCostReportWithResponse request returning *CostReportAPIGetClusterCostReportResponse
func (c *ClientWithResponses) CostReportAPIGetClusterCostReportWithResponse(ctx context.Context, clusterId string, params *CostReportAPIGetClusterCostReportParams) (*CostReportAPIGetClusterCostReportResponse, error) {
	rsp, err := c.CostReportAPIGetClusterCostReport(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIGetClusterCostReportResponse(rsp)
}

// CostReportAPIGetSavingsRecommendation2WithResponse request returning *CostReportAPIGetSavingsRecommendation2Response
func (c *ClientWithResponses) CostReportAPIGetSavingsRecommendation2WithResponse(ctx context.Context, clusterId string) (*CostReportAPIGetSavingsRecommendation2Response, error) {
	rsp, err := c.CostReportAPIGetSavingsRecommendation2(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIGetSavingsRecommendation2Response(rsp)
}

// NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse request with arbitrary body returning *NodeTemplatesAPIFilterInstanceTypesResponse
func (c *ClientWithResponses) NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*NodeTemplatesAPIFilterInstanceTypesResponse, error) {
	rsp, err := c.NodeTemplatesAPIFilterInstanceTypesWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIFilterInstanceTypesResponse(rsp)
}

func (c *ClientWithResponses) NodeTemplatesAPIFilterInstanceTypesWithResponse(ctx context.Context, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody) (*NodeTemplatesAPIFilterInstanceTypesResponse, error) {
	rsp, err := c.NodeTemplatesAPIFilterInstanceTypes(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIFilterInstanceTypesResponse(rsp)
}

// MetricsAPIGetCPUUsageMetricsWithResponse request returning *MetricsAPIGetCPUUsageMetricsResponse
func (c *ClientWithResponses) MetricsAPIGetCPUUsageMetricsWithResponse(ctx context.Context, clusterId string, params *MetricsAPIGetCPUUsageMetricsParams) (*MetricsAPIGetCPUUsageMetricsResponse, error) {
	rsp, err := c.MetricsAPIGetCPUUsageMetrics(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseMetricsAPIGetCPUUsageMetricsResponse(rsp)
}

// MetricsAPIGetGaugesMetricsWithResponse request returning *MetricsAPIGetGaugesMetricsResponse
func (c *ClientWithResponses) MetricsAPIGetGaugesMetricsWithResponse(ctx context.Context, clusterId string) (*MetricsAPIGetGaugesMetricsResponse, error) {
	rsp, err := c.MetricsAPIGetGaugesMetrics(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseMetricsAPIGetGaugesMetricsResponse(rsp)
}

// MetricsAPIGetMemoryUsageMetricsWithResponse request returning *MetricsAPIGetMemoryUsageMetricsResponse
func (c *ClientWithResponses) MetricsAPIGetMemoryUsageMetricsWithResponse(ctx context.Context, clusterId string, params *MetricsAPIGetMemoryUsageMetricsParams) (*MetricsAPIGetMemoryUsageMetricsResponse, error) {
	rsp, err := c.MetricsAPIGetMemoryUsageMetrics(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseMetricsAPIGetMemoryUsageMetricsResponse(rsp)
}

// NodeConfigurationAPIListConfigurationsWithResponse request returning *NodeConfigurationAPIListConfigurationsResponse
func (c *ClientWithResponses) NodeConfigurationAPIListConfigurationsWithResponse(ctx context.Context, clusterId string) (*NodeConfigurationAPIListConfigurationsResponse, error) {
	rsp, err := c.NodeConfigurationAPIListConfigurations(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIListConfigurationsResponse(rsp)
}

// NodeConfigurationAPICreateConfigurationWithBodyWithResponse request with arbitrary body returning *NodeConfigurationAPICreateConfigurationResponse
func (c *ClientWithResponses) NodeConfigurationAPICreateConfigurationWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*NodeConfigurationAPICreateConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPICreateConfigurationWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPICreateConfigurationResponse(rsp)
}

func (c *ClientWithResponses) NodeConfigurationAPICreateConfigurationWithResponse(ctx context.Context, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody) (*NodeConfigurationAPICreateConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPICreateConfiguration(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPICreateConfigurationResponse(rsp)
}

// NodeConfigurationAPIDeleteConfigurationWithResponse request returning *NodeConfigurationAPIDeleteConfigurationResponse
func (c *ClientWithResponses) NodeConfigurationAPIDeleteConfigurationWithResponse(ctx context.Context, clusterId string, id string) (*NodeConfigurationAPIDeleteConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPIDeleteConfiguration(ctx, clusterId, id)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIDeleteConfigurationResponse(rsp)
}

// NodeConfigurationAPIGetConfigurationWithResponse request returning *NodeConfigurationAPIGetConfigurationResponse
func (c *ClientWithResponses) NodeConfigurationAPIGetConfigurationWithResponse(ctx context.Context, clusterId string, id string) (*NodeConfigurationAPIGetConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPIGetConfiguration(ctx, clusterId, id)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIGetConfigurationResponse(rsp)
}

// NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse request with arbitrary body returning *NodeConfigurationAPIUpdateConfigurationResponse
func (c *ClientWithResponses) NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse(ctx context.Context, clusterId string, id string, contentType string, body io.Reader) (*NodeConfigurationAPIUpdateConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPIUpdateConfigurationWithBody(ctx, clusterId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIUpdateConfigurationResponse(rsp)
}

func (c *ClientWithResponses) NodeConfigurationAPIUpdateConfigurationWithResponse(ctx context.Context, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody) (*NodeConfigurationAPIUpdateConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPIUpdateConfiguration(ctx, clusterId, id, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIUpdateConfigurationResponse(rsp)
}

// NodeConfigurationAPISetDefaultWithResponse request returning *NodeConfigurationAPISetDefaultResponse
func (c *ClientWithResponses) NodeConfigurationAPISetDefaultWithResponse(ctx context.Context, clusterId string, id string) (*NodeConfigurationAPISetDefaultResponse, error) {
	rsp, err := c.NodeConfigurationAPISetDefault(ctx, clusterId, id)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPISetDefaultResponse(rsp)
}

// PoliciesAPIGetClusterNodeConstraintsWithResponse request returning *PoliciesAPIGetClusterNodeConstraintsResponse
func (c *ClientWithResponses) PoliciesAPIGetClusterNodeConstraintsWithResponse(ctx context.Context, clusterId string) (*PoliciesAPIGetClusterNodeConstraintsResponse, error) {
	rsp, err := c.PoliciesAPIGetClusterNodeConstraints(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesAPIGetClusterNodeConstraintsResponse(rsp)
}

// NodeTemplatesAPIListNodeTemplatesWithResponse request returning *NodeTemplatesAPIListNodeTemplatesResponse
func (c *ClientWithResponses) NodeTemplatesAPIListNodeTemplatesWithResponse(ctx context.Context, clusterId string) (*NodeTemplatesAPIListNodeTemplatesResponse, error) {
	rsp, err := c.NodeTemplatesAPIListNodeTemplates(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIListNodeTemplatesResponse(rsp)
}

// NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse request with arbitrary body returning *NodeTemplatesAPICreateNodeTemplateResponse
func (c *ClientWithResponses) NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*NodeTemplatesAPICreateNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPICreateNodeTemplateWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPICreateNodeTemplateResponse(rsp)
}

func (c *ClientWithResponses) NodeTemplatesAPICreateNodeTemplateWithResponse(ctx context.Context, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody) (*NodeTemplatesAPICreateNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPICreateNodeTemplate(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPICreateNodeTemplateResponse(rsp)
}

// NodeTemplatesAPIDeleteNodeTemplateWithResponse request returning *NodeTemplatesAPIDeleteNodeTemplateResponse
func (c *ClientWithResponses) NodeTemplatesAPIDeleteNodeTemplateWithResponse(ctx context.Context, clusterId string, nodeTemplateName string) (*NodeTemplatesAPIDeleteNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPIDeleteNodeTemplate(ctx, clusterId, nodeTemplateName)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIDeleteNodeTemplateResponse(rsp)
}

// NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse request with arbitrary body returning *NodeTemplatesAPIUpdateNodeTemplateResponse
func (c *ClientWithResponses) NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId string, nodeTemplateName string, contentType string, body io.Reader) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPIUpdateNodeTemplateWithBody(ctx, clusterId, nodeTemplateName, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIUpdateNodeTemplateResponse(rsp)
}

func (c *ClientWithResponses) NodeTemplatesAPIUpdateNodeTemplateWithResponse(ctx context.Context, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPIUpdateNodeTemplate(ctx, clusterId, nodeTemplateName, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIUpdateNodeTemplateResponse(rsp)
}

// PoliciesAPIGetClusterPoliciesWithResponse request returning *PoliciesAPIGetClusterPoliciesResponse
func (c *ClientWithResponses) PoliciesAPIGetClusterPoliciesWithResponse(ctx context.Context, clusterId string) (*PoliciesAPIGetClusterPoliciesResponse, error) {
	rsp, err := c.PoliciesAPIGetClusterPolicies(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesAPIGetClusterPoliciesResponse(rsp)
}

// PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse request with arbitrary body returning *PoliciesAPIUpsertClusterPoliciesResponse
func (c *ClientWithResponses) PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*PoliciesAPIUpsertClusterPoliciesResponse, error) {
	rsp, err := c.PoliciesAPIUpsertClusterPoliciesWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesAPIUpsertClusterPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PoliciesAPIUpsertClusterPoliciesWithResponse(ctx context.Context, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody) (*PoliciesAPIUpsertClusterPoliciesResponse, error) {
	rsp, err := c.PoliciesAPIUpsertClusterPolicies(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesAPIUpsertClusterPoliciesResponse(rsp)
}

// GetProblematicWorkloadsWithResponse request returning *GetProblematicWorkloadsResponse
func (c *ClientWithResponses) GetProblematicWorkloadsWithResponse(ctx context.Context, clusterId ClusterId) (*GetProblematicWorkloadsResponse, error) {
	rsp, err := c.GetProblematicWorkloads(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetProblematicWorkloadsResponse(rsp)
}

// GetRebalancedWorkloadsWithResponse request returning *GetRebalancedWorkloadsResponse
func (c *ClientWithResponses) GetRebalancedWorkloadsWithResponse(ctx context.Context, clusterId ClusterId) (*GetRebalancedWorkloadsResponse, error) {
	rsp, err := c.GetRebalancedWorkloads(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetRebalancedWorkloadsResponse(rsp)
}

// ListRebalancingPlansWithResponse request returning *ListRebalancingPlansResponse
func (c *ClientWithResponses) ListRebalancingPlansWithResponse(ctx context.Context, clusterId ClusterId, params *ListRebalancingPlansParams) (*ListRebalancingPlansResponse, error) {
	rsp, err := c.ListRebalancingPlans(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseListRebalancingPlansResponse(rsp)
}

// RebalanceWithBodyWithResponse request with arbitrary body returning *RebalanceResponse
func (c *ClientWithResponses) RebalanceWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*RebalanceResponse, error) {
	rsp, err := c.RebalanceWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRebalanceResponse(rsp)
}

func (c *ClientWithResponses) RebalanceWithResponse(ctx context.Context, clusterId ClusterId, body RebalanceJSONRequestBody) (*RebalanceResponse, error) {
	rsp, err := c.Rebalance(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseRebalanceResponse(rsp)
}

// GetRebalancingPlanWithResponse request returning *GetRebalancingPlanResponse
func (c *ClientWithResponses) GetRebalancingPlanWithResponse(ctx context.Context, clusterId ClusterId, rebalancingPlanId string) (*GetRebalancingPlanResponse, error) {
	rsp, err := c.GetRebalancingPlan(ctx, clusterId, rebalancingPlanId)
	if err != nil {
		return nil, err
	}
	return ParseGetRebalancingPlanResponse(rsp)
}

// ExecuteRebalancingPlanWithBodyWithResponse request with arbitrary body returning *ExecuteRebalancingPlanResponse
func (c *ClientWithResponses) ExecuteRebalancingPlanWithBodyWithResponse(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, contentType string, body io.Reader) (*ExecuteRebalancingPlanResponse, error) {
	rsp, err := c.ExecuteRebalancingPlanWithBody(ctx, clusterId, rebalancingPlanId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExecuteRebalancingPlanResponse(rsp)
}

func (c *ClientWithResponses) ExecuteRebalancingPlanWithResponse(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, body ExecuteRebalancingPlanJSONRequestBody) (*ExecuteRebalancingPlanResponse, error) {
	rsp, err := c.ExecuteRebalancingPlan(ctx, clusterId, rebalancingPlanId, body)
	if err != nil {
		return nil, err
	}
	return ParseExecuteRebalancingPlanResponse(rsp)
}

// GetWorkloadsWithResponse request returning *GetWorkloadsResponse
func (c *ClientWithResponses) GetWorkloadsWithResponse(ctx context.Context, clusterId ClusterId) (*GetWorkloadsResponse, error) {
	rsp, err := c.GetWorkloads(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkloadsResponse(rsp)
}

// ExternalClusterAPIListClustersWithResponse request returning *ExternalClusterAPIListClustersResponse
func (c *ClientWithResponses) ExternalClusterAPIListClustersWithResponse(ctx context.Context, params *ExternalClusterAPIListClustersParams) (*ExternalClusterAPIListClustersResponse, error) {
	rsp, err := c.ExternalClusterAPIListClusters(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIListClustersResponse(rsp)
}

// ExternalClusterAPIRegisterClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIRegisterClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIRegisterClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ExternalClusterAPIRegisterClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIRegisterClusterWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIRegisterClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIRegisterClusterWithResponse(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody) (*ExternalClusterAPIRegisterClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIRegisterCluster(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIRegisterClusterResponse(rsp)
}

// GetExternalClusterOperationWithResponse request returning *GetExternalClusterOperationResponse
func (c *ClientWithResponses) GetExternalClusterOperationWithResponse(ctx context.Context, id string) (*GetExternalClusterOperationResponse, error) {
	rsp, err := c.GetExternalClusterOperation(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetExternalClusterOperationResponse(rsp)
}

// ExternalClusterAPIDeleteClusterWithResponse request returning *ExternalClusterAPIDeleteClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIDeleteClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDeleteClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDeleteCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDeleteClusterResponse(rsp)
}

// ExternalClusterAPIGetClusterWithResponse request returning *ExternalClusterAPIGetClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIGetClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetClusterResponse(rsp)
}

// ExternalClusterAPIUpdateClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIUpdateClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIUpdateClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateClusterWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody) (*ExternalClusterAPIUpdateClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateCluster(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterResponse(rsp)
}

// ExternalClusterAPIGetAssumeRoleUserWithResponse request returning *ExternalClusterAPIGetAssumeRoleUserResponse
func (c *ClientWithResponses) ExternalClusterAPIGetAssumeRoleUserWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetAssumeRoleUserResponse, error) {
	rsp, err := c.ExternalClusterAPIGetAssumeRoleUser(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetAssumeRoleUserResponse(rsp)
}

// ExternalClusterAPIGetCredentialsScriptWithResponse request returning *ExternalClusterAPIGetCredentialsScriptResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCredentialsScriptWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams) (*ExternalClusterAPIGetCredentialsScriptResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCredentialsScript(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCredentialsScriptResponse(rsp)
}

// ExternalClusterAPIDisconnectClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIDisconnectClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIDisconnectClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDisconnectClusterWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDisconnectClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIDisconnectClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDisconnectCluster(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDisconnectClusterResponse(rsp)
}

// CostReportAPIGetSavingsRecommendationWithResponse request returning *CostReportAPIGetSavingsRecommendationResponse
func (c *ClientWithResponses) CostReportAPIGetSavingsRecommendationWithResponse(ctx context.Context, clusterId string) (*CostReportAPIGetSavingsRecommendationResponse, error) {
	rsp, err := c.CostReportAPIGetSavingsRecommendation(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseCostReportAPIGetSavingsRecommendationResponse(rsp)
}

// ExternalClusterAPIHandleCloudEventWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIHandleCloudEventResponse
func (c *ClientWithResponses) ExternalClusterAPIHandleCloudEventWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIHandleCloudEventResponse, error) {
	rsp, err := c.ExternalClusterAPIHandleCloudEventWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIHandleCloudEventResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIHandleCloudEventWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody) (*ExternalClusterAPIHandleCloudEventResponse, error) {
	rsp, err := c.ExternalClusterAPIHandleCloudEvent(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIHandleCloudEventResponse(rsp)
}

// ExternalClusterAPIListNodesWithResponse request returning *ExternalClusterAPIListNodesResponse
func (c *ClientWithResponses) ExternalClusterAPIListNodesWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams) (*ExternalClusterAPIListNodesResponse, error) {
	rsp, err := c.ExternalClusterAPIListNodes(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIListNodesResponse(rsp)
}

// ExternalClusterAPIAddNodeWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIAddNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIAddNodeWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIAddNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIAddNodeWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIAddNodeResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIAddNodeWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody) (*ExternalClusterAPIAddNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIAddNode(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIAddNodeResponse(rsp)
}

// ExternalClusterAPIDeleteNodeWithResponse request returning *ExternalClusterAPIDeleteNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIDeleteNodeWithResponse(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams) (*ExternalClusterAPIDeleteNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDeleteNode(ctx, clusterId, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDeleteNodeResponse(rsp)
}

// ExternalClusterAPIGetNodeWithResponse request returning *ExternalClusterAPIGetNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIGetNodeWithResponse(ctx context.Context, clusterId string, nodeId string) (*ExternalClusterAPIGetNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIGetNode(ctx, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetNodeResponse(rsp)
}

// ExternalClusterAPIDrainNodeWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIDrainNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIDrainNodeWithBodyWithResponse(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader) (*ExternalClusterAPIDrainNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDrainNodeWithBody(ctx, clusterId, nodeId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDrainNodeResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIDrainNodeWithResponse(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody) (*ExternalClusterAPIDrainNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDrainNode(ctx, clusterId, nodeId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDrainNodeResponse(rsp)
}

// ExternalClusterAPIPauseClusterWithResponse request returning *ExternalClusterAPIPauseClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIPauseClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIPauseClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIPauseCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIPauseClusterResponse(rsp)
}

// ExternalClusterAPIReconcileClusterWithResponse request returning *ExternalClusterAPIReconcileClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIReconcileClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIReconcileClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIReconcileCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIReconcileClusterResponse(rsp)
}

// ExternalClusterAPIResumeClusterWithResponse request returning *ExternalClusterAPIResumeClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIResumeClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIResumeClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIResumeCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIResumeClusterResponse(rsp)
}

// ExternalClusterAPICreateClusterTokenWithResponse request returning *ExternalClusterAPICreateClusterTokenResponse
func (c *ClientWithResponses) ExternalClusterAPICreateClusterTokenWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPICreateClusterTokenResponse, error) {
	rsp, err := c.ExternalClusterAPICreateClusterToken(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPICreateClusterTokenResponse(rsp)
}

// CurrentUserProfileWithResponse request returning *CurrentUserProfileResponse
func (c *ClientWithResponses) CurrentUserProfileWithResponse(ctx context.Context) (*CurrentUserProfileResponse, error) {
	rsp, err := c.CurrentUserProfile(ctx)
	if err != nil {
		return nil, err
	}
	return ParseCurrentUserProfileResponse(rsp)
}

// UpdateCurrentUserProfileWithBodyWithResponse request with arbitrary body returning *UpdateCurrentUserProfileResponse
func (c *ClientWithResponses) UpdateCurrentUserProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UpdateCurrentUserProfileResponse, error) {
	rsp, err := c.UpdateCurrentUserProfileWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCurrentUserProfileResponse(rsp)
}

func (c *ClientWithResponses) UpdateCurrentUserProfileWithResponse(ctx context.Context, body UpdateCurrentUserProfileJSONRequestBody) (*UpdateCurrentUserProfileResponse, error) {
	rsp, err := c.UpdateCurrentUserProfile(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCurrentUserProfileResponse(rsp)
}

// GetPromMetricsWithResponse request returning *GetPromMetricsResponse
func (c *ClientWithResponses) GetPromMetricsWithResponse(ctx context.Context, params *GetPromMetricsParams) (*GetPromMetricsResponse, error) {
	rsp, err := c.GetPromMetrics(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPromMetricsResponse(rsp)
}

// NotificationAPIListNotificationsWithResponse request returning *NotificationAPIListNotificationsResponse
func (c *ClientWithResponses) NotificationAPIListNotificationsWithResponse(ctx context.Context, params *NotificationAPIListNotificationsParams) (*NotificationAPIListNotificationsResponse, error) {
	rsp, err := c.NotificationAPIListNotifications(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIListNotificationsResponse(rsp)
}

// NotificationAPIAckNotificationsWithBodyWithResponse request with arbitrary body returning *NotificationAPIAckNotificationsResponse
func (c *ClientWithResponses) NotificationAPIAckNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*NotificationAPIAckNotificationsResponse, error) {
	rsp, err := c.NotificationAPIAckNotificationsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIAckNotificationsResponse(rsp)
}

func (c *ClientWithResponses) NotificationAPIAckNotificationsWithResponse(ctx context.Context, body NotificationAPIAckNotificationsJSONRequestBody) (*NotificationAPIAckNotificationsResponse, error) {
	rsp, err := c.NotificationAPIAckNotifications(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIAckNotificationsResponse(rsp)
}

// NotificationAPIListWebhookConfigsWithResponse request returning *NotificationAPIListWebhookConfigsResponse
func (c *ClientWithResponses) NotificationAPIListWebhookConfigsWithResponse(ctx context.Context, params *NotificationAPIListWebhookConfigsParams) (*NotificationAPIListWebhookConfigsResponse, error) {
	rsp, err := c.NotificationAPIListWebhookConfigs(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIListWebhookConfigsResponse(rsp)
}

// NotificationAPICreateWebhookConfigWithBodyWithResponse request with arbitrary body returning *NotificationAPICreateWebhookConfigResponse
func (c *ClientWithResponses) NotificationAPICreateWebhookConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*NotificationAPICreateWebhookConfigResponse, error) {
	rsp, err := c.NotificationAPICreateWebhookConfigWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPICreateWebhookConfigResponse(rsp)
}

func (c *ClientWithResponses) NotificationAPICreateWebhookConfigWithResponse(ctx context.Context, body NotificationAPICreateWebhookConfigJSONRequestBody) (*NotificationAPICreateWebhookConfigResponse, error) {
	rsp, err := c.NotificationAPICreateWebhookConfig(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPICreateWebhookConfigResponse(rsp)
}

// NotificationAPIDeleteWebhookConfigWithResponse request returning *NotificationAPIDeleteWebhookConfigResponse
func (c *ClientWithResponses) NotificationAPIDeleteWebhookConfigWithResponse(ctx context.Context, id string) (*NotificationAPIDeleteWebhookConfigResponse, error) {
	rsp, err := c.NotificationAPIDeleteWebhookConfig(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIDeleteWebhookConfigResponse(rsp)
}

// NotificationAPIGetWebhookConfigWithResponse request returning *NotificationAPIGetWebhookConfigResponse
func (c *ClientWithResponses) NotificationAPIGetWebhookConfigWithResponse(ctx context.Context, id string) (*NotificationAPIGetWebhookConfigResponse, error) {
	rsp, err := c.NotificationAPIGetWebhookConfig(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIGetWebhookConfigResponse(rsp)
}

// NotificationAPIUpdateWebhookConfigWithBodyWithResponse request with arbitrary body returning *NotificationAPIUpdateWebhookConfigResponse
func (c *ClientWithResponses) NotificationAPIUpdateWebhookConfigWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*NotificationAPIUpdateWebhookConfigResponse, error) {
	rsp, err := c.NotificationAPIUpdateWebhookConfigWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIUpdateWebhookConfigResponse(rsp)
}

func (c *ClientWithResponses) NotificationAPIUpdateWebhookConfigWithResponse(ctx context.Context, id string, body NotificationAPIUpdateWebhookConfigJSONRequestBody) (*NotificationAPIUpdateWebhookConfigResponse, error) {
	rsp, err := c.NotificationAPIUpdateWebhookConfig(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIUpdateWebhookConfigResponse(rsp)
}

// NotificationAPIGetNotificationWithResponse request returning *NotificationAPIGetNotificationResponse
func (c *ClientWithResponses) NotificationAPIGetNotificationWithResponse(ctx context.Context, id string) (*NotificationAPIGetNotificationResponse, error) {
	rsp, err := c.NotificationAPIGetNotification(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseNotificationAPIGetNotificationResponse(rsp)
}

// ListOrganizationsWithResponse request returning *ListOrganizationsResponse
func (c *ClientWithResponses) ListOrganizationsWithResponse(ctx context.Context) (*ListOrganizationsResponse, error) {
	rsp, err := c.ListOrganizations(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationsResponse(rsp)
}

// CreateOrganizationWithBodyWithResponse request with arbitrary body returning *CreateOrganizationResponse
func (c *ClientWithResponses) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganizationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganization(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

// DeleteOrganizationWithResponse request returning *DeleteOrganizationResponse
func (c *ClientWithResponses) DeleteOrganizationWithResponse(ctx context.Context, id string) (*DeleteOrganizationResponse, error) {
	rsp, err := c.DeleteOrganization(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationResponse(rsp)
}

// GetOrganizationWithResponse request returning *GetOrganizationResponse
func (c *ClientWithResponses) GetOrganizationWithResponse(ctx context.Context, id string) (*GetOrganizationResponse, error) {
	rsp, err := c.GetOrganization(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationResponse(rsp)
}

// UpdateOrganizationWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationResponse
func (c *ClientWithResponses) UpdateOrganizationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganizationWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationWithResponse(ctx context.Context, id string, body UpdateOrganizationJSONRequestBody) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganization(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

// GetOrganizationUsersWithResponse request returning *GetOrganizationUsersResponse
func (c *ClientWithResponses) GetOrganizationUsersWithResponse(ctx context.Context, id string) (*GetOrganizationUsersResponse, error) {
	rsp, err := c.GetOrganizationUsers(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationUsersResponse(rsp)
}

// CreateOrganizationUserWithBodyWithResponse request with arbitrary body returning *CreateOrganizationUserResponse
func (c *ClientWithResponses) CreateOrganizationUserWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*CreateOrganizationUserResponse, error) {
	rsp, err := c.CreateOrganizationUserWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationUserResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationUserWithResponse(ctx context.Context, id string, body CreateOrganizationUserJSONRequestBody) (*CreateOrganizationUserResponse, error) {
	rsp, err := c.CreateOrganizationUser(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationUserResponse(rsp)
}

// DeleteOrganizationUserWithResponse request returning *DeleteOrganizationUserResponse
func (c *ClientWithResponses) DeleteOrganizationUserWithResponse(ctx context.Context, id string, userId string) (*DeleteOrganizationUserResponse, error) {
	rsp, err := c.DeleteOrganizationUser(ctx, id, userId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationUserResponse(rsp)
}

// UpdateOrganizationUserWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationUserResponse
func (c *ClientWithResponses) UpdateOrganizationUserWithBodyWithResponse(ctx context.Context, id string, userId string, contentType string, body io.Reader) (*UpdateOrganizationUserResponse, error) {
	rsp, err := c.UpdateOrganizationUserWithBody(ctx, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationUserWithResponse(ctx context.Context, id string, userId string, body UpdateOrganizationUserJSONRequestBody) (*UpdateOrganizationUserResponse, error) {
	rsp, err := c.UpdateOrganizationUser(ctx, id, userId, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationUserResponse(rsp)
}

// GetUsageReportWithResponse request returning *GetUsageReportResponse
func (c *ClientWithResponses) GetUsageReportWithResponse(ctx context.Context, params *GetUsageReportParams) (*GetUsageReportResponse, error) {
	rsp, err := c.GetUsageReport(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetUsageReportResponse(rsp)
}

// ExternalClusterAPIGetCredentialsScriptTemplateWithResponse request returning *ExternalClusterAPIGetCredentialsScriptTemplateResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCredentialsScriptTemplateWithResponse(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCredentialsScriptTemplate(ctx, provider, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCredentialsScriptTemplateResponse(rsp)
}

// InsightsAPIGetBestPracticesReportWithResponse request returning *InsightsAPIGetBestPracticesReportResponse
func (c *ClientWithResponses) InsightsAPIGetBestPracticesReportWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesReportParams) (*InsightsAPIGetBestPracticesReportResponse, error) {
	rsp, err := c.InsightsAPIGetBestPracticesReport(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetBestPracticesReportResponse(rsp)
}

// InsightsAPIGetBestPracticesCheckDetailsWithResponse request returning *InsightsAPIGetBestPracticesCheckDetailsResponse
func (c *ClientWithResponses) InsightsAPIGetBestPracticesCheckDetailsWithResponse(ctx context.Context, ruleId string, params *InsightsAPIGetBestPracticesCheckDetailsParams) (*InsightsAPIGetBestPracticesCheckDetailsResponse, error) {
	rsp, err := c.InsightsAPIGetBestPracticesCheckDetails(ctx, ruleId, params)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetBestPracticesCheckDetailsResponse(rsp)
}

// InsightsAPIGetBestPracticesReportFiltersWithResponse request returning *InsightsAPIGetBestPracticesReportFiltersResponse
func (c *ClientWithResponses) InsightsAPIGetBestPracticesReportFiltersWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesReportFiltersParams) (*InsightsAPIGetBestPracticesReportFiltersResponse, error) {
	rsp, err := c.InsightsAPIGetBestPracticesReportFilters(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetBestPracticesReportFiltersResponse(rsp)
}

// InsightsAPIScheduleBestPracticesScanWithBodyWithResponse request with arbitrary body returning *InsightsAPIScheduleBestPracticesScanResponse
func (c *ClientWithResponses) InsightsAPIScheduleBestPracticesScanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*InsightsAPIScheduleBestPracticesScanResponse, error) {
	rsp, err := c.InsightsAPIScheduleBestPracticesScanWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIScheduleBestPracticesScanResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIScheduleBestPracticesScanWithResponse(ctx context.Context, body InsightsAPIScheduleBestPracticesScanJSONRequestBody) (*InsightsAPIScheduleBestPracticesScanResponse, error) {
	rsp, err := c.InsightsAPIScheduleBestPracticesScan(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIScheduleBestPracticesScanResponse(rsp)
}

// InsightsAPIGetBestPracticesReportSummaryWithResponse request returning *InsightsAPIGetBestPracticesReportSummaryResponse
func (c *ClientWithResponses) InsightsAPIGetBestPracticesReportSummaryWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesReportSummaryParams) (*InsightsAPIGetBestPracticesReportSummaryResponse, error) {
	rsp, err := c.InsightsAPIGetBestPracticesReportSummary(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetBestPracticesReportSummaryResponse(rsp)
}

// InsightsAPIGetBestPracticesOverviewWithResponse request returning *InsightsAPIGetBestPracticesOverviewResponse
func (c *ClientWithResponses) InsightsAPIGetBestPracticesOverviewWithResponse(ctx context.Context, params *InsightsAPIGetBestPracticesOverviewParams) (*InsightsAPIGetBestPracticesOverviewResponse, error) {
	rsp, err := c.InsightsAPIGetBestPracticesOverview(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetBestPracticesOverviewResponse(rsp)
}

// InsightsAPIGetOverviewSummaryWithResponse request returning *InsightsAPIGetOverviewSummaryResponse
func (c *ClientWithResponses) InsightsAPIGetOverviewSummaryWithResponse(ctx context.Context, params *InsightsAPIGetOverviewSummaryParams) (*InsightsAPIGetOverviewSummaryResponse, error) {
	rsp, err := c.InsightsAPIGetOverviewSummary(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetOverviewSummaryResponse(rsp)
}

// InsightsAPIGetVulnerabilitiesOverviewWithResponse request returning *InsightsAPIGetVulnerabilitiesOverviewResponse
func (c *ClientWithResponses) InsightsAPIGetVulnerabilitiesOverviewWithResponse(ctx context.Context, params *InsightsAPIGetVulnerabilitiesOverviewParams) (*InsightsAPIGetVulnerabilitiesOverviewResponse, error) {
	rsp, err := c.InsightsAPIGetVulnerabilitiesOverview(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetVulnerabilitiesOverviewResponse(rsp)
}

// InsightsAPIGetVulnerabilitiesReportWithResponse request returning *InsightsAPIGetVulnerabilitiesReportResponse
func (c *ClientWithResponses) InsightsAPIGetVulnerabilitiesReportWithResponse(ctx context.Context, params *InsightsAPIGetVulnerabilitiesReportParams) (*InsightsAPIGetVulnerabilitiesReportResponse, error) {
	rsp, err := c.InsightsAPIGetVulnerabilitiesReport(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetVulnerabilitiesReportResponse(rsp)
}

// InsightsAPIGetVulnerabilitiesDetailsWithResponse request returning *InsightsAPIGetVulnerabilitiesDetailsResponse
func (c *ClientWithResponses) InsightsAPIGetVulnerabilitiesDetailsWithResponse(ctx context.Context, objectId string) (*InsightsAPIGetVulnerabilitiesDetailsResponse, error) {
	rsp, err := c.InsightsAPIGetVulnerabilitiesDetails(ctx, objectId)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetVulnerabilitiesDetailsResponse(rsp)
}

// InsightsAPIGetVulnerabilitiesResourcesWithResponse request returning *InsightsAPIGetVulnerabilitiesResourcesResponse
func (c *ClientWithResponses) InsightsAPIGetVulnerabilitiesResourcesWithResponse(ctx context.Context, objectId string) (*InsightsAPIGetVulnerabilitiesResourcesResponse, error) {
	rsp, err := c.InsightsAPIGetVulnerabilitiesResources(ctx, objectId)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetVulnerabilitiesResourcesResponse(rsp)
}

// InsightsAPIGetPackageVulnerabilitiesWithResponse request returning *InsightsAPIGetPackageVulnerabilitiesResponse
func (c *ClientWithResponses) InsightsAPIGetPackageVulnerabilitiesWithResponse(ctx context.Context, objectId string, params *InsightsAPIGetPackageVulnerabilitiesParams) (*InsightsAPIGetPackageVulnerabilitiesResponse, error) {
	rsp, err := c.InsightsAPIGetPackageVulnerabilities(ctx, objectId, params)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetPackageVulnerabilitiesResponse(rsp)
}

// InsightsAPIGetResourceVulnerablePackagesWithResponse request returning *InsightsAPIGetResourceVulnerablePackagesResponse
func (c *ClientWithResponses) InsightsAPIGetResourceVulnerablePackagesWithResponse(ctx context.Context, objectId string) (*InsightsAPIGetResourceVulnerablePackagesResponse, error) {
	rsp, err := c.InsightsAPIGetResourceVulnerablePackages(ctx, objectId)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetResourceVulnerablePackagesResponse(rsp)
}

// InsightsAPIScheduleVulnerabilitiesScanWithBodyWithResponse request with arbitrary body returning *InsightsAPIScheduleVulnerabilitiesScanResponse
func (c *ClientWithResponses) InsightsAPIScheduleVulnerabilitiesScanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*InsightsAPIScheduleVulnerabilitiesScanResponse, error) {
	rsp, err := c.InsightsAPIScheduleVulnerabilitiesScanWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIScheduleVulnerabilitiesScanResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIScheduleVulnerabilitiesScanWithResponse(ctx context.Context, body InsightsAPIScheduleVulnerabilitiesScanJSONRequestBody) (*InsightsAPIScheduleVulnerabilitiesScanResponse, error) {
	rsp, err := c.InsightsAPIScheduleVulnerabilitiesScan(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIScheduleVulnerabilitiesScanResponse(rsp)
}

// InsightsAPIGetVulnerabilitiesReportSummaryWithResponse request returning *InsightsAPIGetVulnerabilitiesReportSummaryResponse
func (c *ClientWithResponses) InsightsAPIGetVulnerabilitiesReportSummaryWithResponse(ctx context.Context, params *InsightsAPIGetVulnerabilitiesReportSummaryParams) (*InsightsAPIGetVulnerabilitiesReportSummaryResponse, error) {
	rsp, err := c.InsightsAPIGetVulnerabilitiesReportSummary(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetVulnerabilitiesReportSummaryResponse(rsp)
}

// InsightsAPIDisconnectAgentWithResponse request returning *InsightsAPIDisconnectAgentResponse
func (c *ClientWithResponses) InsightsAPIDisconnectAgentWithResponse(ctx context.Context, clusterId string) (*InsightsAPIDisconnectAgentResponse, error) {
	rsp, err := c.InsightsAPIDisconnectAgent(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIDisconnectAgentResponse(rsp)
}

// InsightsAPIIngestAgentLogWithBodyWithResponse request with arbitrary body returning *InsightsAPIIngestAgentLogResponse
func (c *ClientWithResponses) InsightsAPIIngestAgentLogWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*InsightsAPIIngestAgentLogResponse, error) {
	rsp, err := c.InsightsAPIIngestAgentLogWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIIngestAgentLogResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIIngestAgentLogWithResponse(ctx context.Context, clusterId string, body InsightsAPIIngestAgentLogJSONRequestBody) (*InsightsAPIIngestAgentLogResponse, error) {
	rsp, err := c.InsightsAPIIngestAgentLog(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIIngestAgentLogResponse(rsp)
}

// InsightsAPIPostAgentTelemetryWithBodyWithResponse request with arbitrary body returning *InsightsAPIPostAgentTelemetryResponse
func (c *ClientWithResponses) InsightsAPIPostAgentTelemetryWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*InsightsAPIPostAgentTelemetryResponse, error) {
	rsp, err := c.InsightsAPIPostAgentTelemetryWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIPostAgentTelemetryResponse(rsp)
}

func (c *ClientWithResponses) InsightsAPIPostAgentTelemetryWithResponse(ctx context.Context, clusterId string, body InsightsAPIPostAgentTelemetryJSONRequestBody) (*InsightsAPIPostAgentTelemetryResponse, error) {
	rsp, err := c.InsightsAPIPostAgentTelemetry(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIPostAgentTelemetryResponse(rsp)
}

// InsightsAPIGetAgentInstallScriptWithResponse request returning *InsightsAPIGetAgentInstallScriptResponse
func (c *ClientWithResponses) InsightsAPIGetAgentInstallScriptWithResponse(ctx context.Context, clusterId string, params *InsightsAPIGetAgentInstallScriptParams) (*InsightsAPIGetAgentInstallScriptResponse, error) {
	rsp, err := c.InsightsAPIGetAgentInstallScript(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetAgentInstallScriptResponse(rsp)
}

// InsightsAPIGetAgentCloudScriptWithResponse request returning *InsightsAPIGetAgentCloudScriptResponse
func (c *ClientWithResponses) InsightsAPIGetAgentCloudScriptWithResponse(ctx context.Context, provider string) (*InsightsAPIGetAgentCloudScriptResponse, error) {
	rsp, err := c.InsightsAPIGetAgentCloudScript(ctx, provider)
	if err != nil {
		return nil, err
	}
	return ParseInsightsAPIGetAgentCloudScriptResponse(rsp)
}

// ParseGetAgentInstallScriptResponse parses an HTTP response from a GetAgentInstallScriptWithResponse call
func ParseGetAgentInstallScriptResponse(rsp *http.Response) (*GetAgentInstallScriptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAgentInstallScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListAuditEventsResponse parses an HTTP response from a ListAuditEventsWithResponse call
func ParseListAuditEventsResponse(rsp *http.Response) (*ListAuditEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAuditEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuditEventList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAuthTokensResponse parses an HTTP response from a ListAuthTokensWithResponse call
func ParseListAuthTokensResponse(rsp *http.Response) (*ListAuthTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAuthTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthTokenList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAuthTokenResponse parses an HTTP response from a CreateAuthTokenWithResponse call
func ParseCreateAuthTokenResponse(rsp *http.Response) (*CreateAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthTokenCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAuthTokenResponse parses an HTTP response from a DeleteAuthTokenWithResponse call
func ParseDeleteAuthTokenResponse(rsp *http.Response) (*DeleteAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthTokenResponse parses an HTTP response from a GetAuthTokenWithResponse call
func ParseGetAuthTokenResponse(rsp *http.Response) (*GetAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAuthTokenResponse parses an HTTP response from a UpdateAuthTokenWithResponse call
func ParseUpdateAuthTokenResponse(rsp *http.Response) (*UpdateAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCostReportAPIListAllocationGroupsResponse parses an HTTP response from a CostReportAPIListAllocationGroupsWithResponse call
func ParseCostReportAPIListAllocationGroupsResponse(rsp *http.Response) (*CostReportAPIListAllocationGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CostReportAPIListAllocationGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1ListAllocationGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCostReportAPICreateAllocationGroupResponse parses an HTTP response from a CostReportAPICreateAllocationGroupWithResponse call
func ParseCostReportAPICreateAllocationGroupResponse(rsp *http.Response) (*CostReportAPICreateAllocationGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CostReportAPICreateAllocationGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1AllocationGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCostReportAPIDeleteAllocationGroupResponse parses an HTTP response from a CostReportAPIDeleteAllocationGroupWithResponse call
func ParseCostReportAPIDeleteAllocationGroupResponse(rsp *http.Response) (*CostReportAPIDeleteAllocationGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CostReportAPIDeleteAllocationGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1DeleteAllocationGroupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCostReportAPIUpdateAllocationGroupResponse parses an HTTP response from a CostReportAPIUpdateAllocationGroupWithResponse call
func ParseCostReportAPIUpdateAllocationGroupResponse(rsp *http.Response) (*CostReportAPIUpdateAllocationGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CostReportAPIUpdateAllocationGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1AllocationGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCostReportAPIGetClusterCostHistory2Response parses an HTTP response from a CostReportAPIGetClusterCostHistory2WithResponse call
func ParseCostReportAPIGetClusterCostHistory2Response(rsp *http.Response) (*CostReportAPIGetClusterCostHistory2Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CostReportAPIGetClusterCostHistory2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterCostHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCostReportAPIGetClusterCostReport2Response parses an HTTP response from a CostReportAPIGetClusterCostReport2WithResponse call
func ParseCostReportAPIGetClusterCostReport2Response(rsp *http.Response) (*CostReportAPIGetClusterCostReport2Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CostReportAPIGetClusterCostReport2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterCostReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCostReportAPIGetClusterWorkloadReportResponse parses an HTTP response from a CostReportAPIGetClusterWorkloadReportWithResponse call
func ParseCostReportAPIGetClusterWorkloadReportResponse(rsp *http.Response) (*CostReportAPIGetClusterWorkloadReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CostReportAPIGetClusterWorkloadReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterWorkloadReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCostReportAPIGetClusterWorkloadReport2Response parses an HTTP response from a CostReportAPIGetClusterWorkloadReport2WithResponse call
func ParseCostReportAPIGetClusterWorkloadReport2Response(rsp *http.Response) (*CostReportAPIGetClusterWorkloadReport2Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CostReportAPIGetClusterWorkloadReport2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterWorkloadReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCostReportAPIGetClusterWorkloadLabelsResponse parses an HTTP response from a CostReportAPIGetClusterWorkloadLabelsWithResponse call
func ParseCostReportAPIGetClusterWorkloadLabelsResponse(rsp *http.Response) (*CostReportAPIGetClusterWorkloadLabelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CostReportAPIGetClusterWorkloadLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterWorkloadLabelsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCostReportAPIGetClustersCostReportResponse parses an HTTP response from a CostReportAPIGetClustersCostReportWithResponse call
func ParseCostReportAPIGetClustersCostReportResponse(rsp *http.Response) (*CostReportAPIGetClustersCostReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CostReportAPIGetClustersCostReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClustersCostReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCloudCredentialsResponse parses an HTTP response from a ListCloudCredentialsWithResponse call
func ParseListCloudCredentialsResponse(rsp *http.Response) (*ListCloudCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListCloudCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudCredentialsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCloudCredentialsResponse parses an HTTP response from a CreateCloudCredentialsWithResponse call
func ParseCreateCloudCredentialsResponse(rsp *http.Response) (*CreateCloudCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateCloudCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CloudCredentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCloudCredentialsResponse parses an HTTP response from a DeleteCloudCredentialsWithResponse call
func ParseDeleteCloudCredentialsResponse(rsp *http.Response) (*DeleteCloudCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCloudCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCloudCredentialsResponse parses an HTTP response from a GetCloudCredentialsWithResponse call
func ParseGetCloudCredentialsResponse(rsp *http.Response) (*GetCloudCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCloudCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudCredentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryBlacklistAPIListBlacklistsResponse parses an HTTP response from a InventoryBlacklistAPIListBlacklistsWithResponse call
func ParseInventoryBlacklistAPIListBlacklistsResponse(rsp *http.Response) (*InventoryBlacklistAPIListBlacklistsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InventoryBlacklistAPIListBlacklistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryblacklistV1ListBlacklistsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryBlacklistAPIAddBlacklistResponse parses an HTTP response from a InventoryBlacklistAPIAddBlacklistWithResponse call
func ParseInventoryBlacklistAPIAddBlacklistResponse(rsp *http.Response) (*InventoryBlacklistAPIAddBlacklistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InventoryBlacklistAPIAddBlacklistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryblacklistV1AddBlacklistResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryBlacklistAPIRemoveBlacklistResponse parses an HTTP response from a InventoryBlacklistAPIRemoveBlacklistWithResponse call
func ParseInventoryBlacklistAPIRemoveBlacklistResponse(rsp *http.Response) (*InventoryBlacklistAPIRemoveBlacklistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InventoryBlacklistAPIRemoveBlacklistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InventoryblacklistV1RemoveBlacklistResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateInvitationResponse parses an HTTP response from a CreateInvitationWithResponse call
func ParseCreateInvitationResponse(rsp *http.Response) (*CreateInvitationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NewInvitationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClaimInvitationResponse parses an HTTP response from a ClaimInvitationWithResponse call
func ParseClaimInvitationResponse(rsp *http.Response) (*ClaimInvitationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClaimInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterActionsAPIPollClusterActionsResponse parses an HTTP response from a ClusterActionsAPIPollClusterActionsWithResponse call
func ParseClusterActionsAPIPollClusterActionsResponse(rsp *http.Response) (*ClusterActionsAPIPollClusterActionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterActionsAPIPollClusterActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusteractionsV1PollClusterActionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterActionsAPIIngestLogsResponse parses an HTTP response from a ClusterActionsAPIIngestLogsWithResponse call
func ParseClusterActionsAPIIngestLogsResponse(rsp *http.Response) (*ClusterActionsAPIIngestLogsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterActionsAPIIngestLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusteractionsV1IngestLogsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterActionsAPIAckClusterActionResponse parses an HTTP response from a ClusterActionsAPIAckClusterActionWithResponse call
func ParseClusterActionsAPIAckClusterActionResponse(rsp *http.Response) (*ClusterActionsAPIAckClusterActionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterActionsAPIAckClusterActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusteractionsV1AckClusterActionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCostReportAPIGetClusterCostHistoryResponse parses an HTTP response from a CostReportAPIGetClusterCostHistoryWithResponse call
func ParseCostReportAPIGetClusterCostHistoryResponse(rsp *http.Response) (*CostReportAPIGetClusterCostHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CostReportAPIGetClusterCostHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterCostHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCostReportAPIGetClusterCostReportResponse parses an HTTP response from a CostReportAPIGetClusterCostReportWithResponse call
func ParseCostReportAPIGetClusterCostReportResponse(rsp *http.Response) (*CostReportAPIGetClusterCostReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CostReportAPIGetClusterCostReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetClusterCostReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCostReportAPIGetSavingsRecommendation2Response parses an HTTP response from a CostReportAPIGetSavingsRecommendation2WithResponse call
func ParseCostReportAPIGetSavingsRecommendation2Response(rsp *http.Response) (*CostReportAPIGetSavingsRecommendation2Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CostReportAPIGetSavingsRecommendation2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetSavingsRecommendationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPIFilterInstanceTypesResponse parses an HTTP response from a NodeTemplatesAPIFilterInstanceTypesWithResponse call
func ParseNodeTemplatesAPIFilterInstanceTypesResponse(rsp *http.Response) (*NodeTemplatesAPIFilterInstanceTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPIFilterInstanceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1FilterInstanceTypesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMetricsAPIGetCPUUsageMetricsResponse parses an HTTP response from a MetricsAPIGetCPUUsageMetricsWithResponse call
func ParseMetricsAPIGetCPUUsageMetricsResponse(rsp *http.Response) (*MetricsAPIGetCPUUsageMetricsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &MetricsAPIGetCPUUsageMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiMetricsV1beta1GetCPUUsageMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMetricsAPIGetGaugesMetricsResponse parses an HTTP response from a MetricsAPIGetGaugesMetricsWithResponse call
func ParseMetricsAPIGetGaugesMetricsResponse(rsp *http.Response) (*MetricsAPIGetGaugesMetricsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &MetricsAPIGetGaugesMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiMetricsV1beta1GetGaugesMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMetricsAPIGetMemoryUsageMetricsResponse parses an HTTP response from a MetricsAPIGetMemoryUsageMetricsWithResponse call
func ParseMetricsAPIGetMemoryUsageMetricsResponse(rsp *http.Response) (*MetricsAPIGetMemoryUsageMetricsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &MetricsAPIGetMemoryUsageMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiMetricsV1beta1GetMemoryUsageMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIListConfigurationsResponse parses an HTTP response from a NodeConfigurationAPIListConfigurationsWithResponse call
func ParseNodeConfigurationAPIListConfigurationsResponse(rsp *http.Response) (*NodeConfigurationAPIListConfigurationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIListConfigurationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1ListConfigurationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPICreateConfigurationResponse parses an HTTP response from a NodeConfigurationAPICreateConfigurationWithResponse call
func ParseNodeConfigurationAPICreateConfigurationResponse(rsp *http.Response) (*NodeConfigurationAPICreateConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPICreateConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1NodeConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIDeleteConfigurationResponse parses an HTTP response from a NodeConfigurationAPIDeleteConfigurationWithResponse call
func ParseNodeConfigurationAPIDeleteConfigurationResponse(rsp *http.Response) (*NodeConfigurationAPIDeleteConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIDeleteConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1DeleteConfigurationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIGetConfigurationResponse parses an HTTP response from a NodeConfigurationAPIGetConfigurationWithResponse call
func ParseNodeConfigurationAPIGetConfigurationResponse(rsp *http.Response) (*NodeConfigurationAPIGetConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIGetConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1NodeConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIUpdateConfigurationResponse parses an HTTP response from a NodeConfigurationAPIUpdateConfigurationWithResponse call
func ParseNodeConfigurationAPIUpdateConfigurationResponse(rsp *http.Response) (*NodeConfigurationAPIUpdateConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIUpdateConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1NodeConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPISetDefaultResponse parses an HTTP response from a NodeConfigurationAPISetDefaultWithResponse call
func ParseNodeConfigurationAPISetDefaultResponse(rsp *http.Response) (*NodeConfigurationAPISetDefaultResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPISetDefaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1NodeConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePoliciesAPIGetClusterNodeConstraintsResponse parses an HTTP response from a PoliciesAPIGetClusterNodeConstraintsWithResponse call
func ParsePoliciesAPIGetClusterNodeConstraintsResponse(rsp *http.Response) (*PoliciesAPIGetClusterNodeConstraintsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PoliciesAPIGetClusterNodeConstraintsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoliciesV1GetClusterNodeConstraintsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPIListNodeTemplatesResponse parses an HTTP response from a NodeTemplatesAPIListNodeTemplatesWithResponse call
func ParseNodeTemplatesAPIListNodeTemplatesResponse(rsp *http.Response) (*NodeTemplatesAPIListNodeTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPIListNodeTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1ListNodeTemplatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPICreateNodeTemplateResponse parses an HTTP response from a NodeTemplatesAPICreateNodeTemplateWithResponse call
func ParseNodeTemplatesAPICreateNodeTemplateResponse(rsp *http.Response) (*NodeTemplatesAPICreateNodeTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPICreateNodeTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1NodeTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPIDeleteNodeTemplateResponse parses an HTTP response from a NodeTemplatesAPIDeleteNodeTemplateWithResponse call
func ParseNodeTemplatesAPIDeleteNodeTemplateResponse(rsp *http.Response) (*NodeTemplatesAPIDeleteNodeTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPIDeleteNodeTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1DeleteNodeTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPIUpdateNodeTemplateResponse parses an HTTP response from a NodeTemplatesAPIUpdateNodeTemplateWithResponse call
func ParseNodeTemplatesAPIUpdateNodeTemplateResponse(rsp *http.Response) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPIUpdateNodeTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1NodeTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePoliciesAPIGetClusterPoliciesResponse parses an HTTP response from a PoliciesAPIGetClusterPoliciesWithResponse call
func ParsePoliciesAPIGetClusterPoliciesResponse(rsp *http.Response) (*PoliciesAPIGetClusterPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PoliciesAPIGetClusterPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoliciesV1Policies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePoliciesAPIUpsertClusterPoliciesResponse parses an HTTP response from a PoliciesAPIUpsertClusterPoliciesWithResponse call
func ParsePoliciesAPIUpsertClusterPoliciesResponse(rsp *http.Response) (*PoliciesAPIUpsertClusterPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PoliciesAPIUpsertClusterPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoliciesV1Policies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProblematicWorkloadsResponse parses an HTTP response from a GetProblematicWorkloadsWithResponse call
func ParseGetProblematicWorkloadsResponse(rsp *http.Response) (*GetProblematicWorkloadsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProblematicWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterProblematicWorkloads
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRebalancedWorkloadsResponse parses an HTTP response from a GetRebalancedWorkloadsWithResponse call
func ParseGetRebalancedWorkloadsResponse(rsp *http.Response) (*GetRebalancedWorkloadsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRebalancedWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RebalancedWorkloads
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRebalancingPlansResponse parses an HTTP response from a ListRebalancingPlansWithResponse call
func ParseListRebalancingPlansResponse(rsp *http.Response) (*ListRebalancingPlansResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListRebalancingPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RebalancingPlansResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRebalanceResponse parses an HTTP response from a RebalanceWithResponse call
func ParseRebalanceResponse(rsp *http.Response) (*RebalanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RebalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest RebalancingAccepted
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetRebalancingPlanResponse parses an HTTP response from a GetRebalancingPlanWithResponse call
func ParseGetRebalancingPlanResponse(rsp *http.Response) (*GetRebalancingPlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRebalancingPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RebalancingPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExecuteRebalancingPlanResponse parses an HTTP response from a ExecuteRebalancingPlanWithResponse call
func ParseExecuteRebalancingPlanResponse(rsp *http.Response) (*ExecuteRebalancingPlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExecuteRebalancingPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RebalancingPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkloadsResponse parses an HTTP response from a GetWorkloadsWithResponse call
func ParseGetWorkloadsResponse(rsp *http.Response) (*GetWorkloadsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterWorkloads
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIListClustersResponse parses an HTTP response from a ExternalClusterAPIListClustersWithResponse call
func ParseExternalClusterAPIListClustersResponse(rsp *http.Response) (*ExternalClusterAPIListClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIListClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1ListClustersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIRegisterClusterResponse parses an HTTP response from a ExternalClusterAPIRegisterClusterWithResponse call
func ParseExternalClusterAPIRegisterClusterResponse(rsp *http.Response) (*ExternalClusterAPIRegisterClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIRegisterClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExternalClusterOperationResponse parses an HTTP response from a GetExternalClusterOperationWithResponse call
func ParseGetExternalClusterOperationResponse(rsp *http.Response) (*GetExternalClusterOperationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetExternalClusterOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDeleteClusterResponse parses an HTTP response from a ExternalClusterAPIDeleteClusterWithResponse call
func ParseExternalClusterAPIDeleteClusterResponse(rsp *http.Response) (*ExternalClusterAPIDeleteClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExternalClusterAPIGetClusterResponse parses an HTTP response from a ExternalClusterAPIGetClusterWithResponse call
func ParseExternalClusterAPIGetClusterResponse(rsp *http.Response) (*ExternalClusterAPIGetClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIUpdateClusterResponse parses an HTTP response from a ExternalClusterAPIUpdateClusterWithResponse call
func ParseExternalClusterAPIUpdateClusterResponse(rsp *http.Response) (*ExternalClusterAPIUpdateClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIUpdateClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetAssumeRoleUserResponse parses an HTTP response from a ExternalClusterAPIGetAssumeRoleUserWithResponse call
func ParseExternalClusterAPIGetAssumeRoleUserResponse(rsp *http.Response) (*ExternalClusterAPIGetAssumeRoleUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetAssumeRoleUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetAssumeRoleUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetCredentialsScriptResponse parses an HTTP response from a ExternalClusterAPIGetCredentialsScriptWithResponse call
func ParseExternalClusterAPIGetCredentialsScriptResponse(rsp *http.Response) (*ExternalClusterAPIGetCredentialsScriptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCredentialsScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetCredentialsScriptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDisconnectClusterResponse parses an HTTP response from a ExternalClusterAPIDisconnectClusterWithResponse call
func ParseExternalClusterAPIDisconnectClusterResponse(rsp *http.Response) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDisconnectClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCostReportAPIGetSavingsRecommendationResponse parses an HTTP response from a CostReportAPIGetSavingsRecommendationWithResponse call
func ParseCostReportAPIGetSavingsRecommendationResponse(rsp *http.Response) (*CostReportAPIGetSavingsRecommendationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CostReportAPIGetSavingsRecommendationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CostreportV1beta1GetSavingsRecommendationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIHandleCloudEventResponse parses an HTTP response from a ExternalClusterAPIHandleCloudEventWithResponse call
func ParseExternalClusterAPIHandleCloudEventResponse(rsp *http.Response) (*ExternalClusterAPIHandleCloudEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIHandleCloudEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1HandleCloudEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIListNodesResponse parses an HTTP response from a ExternalClusterAPIListNodesWithResponse call
func ParseExternalClusterAPIListNodesResponse(rsp *http.Response) (*ExternalClusterAPIListNodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIListNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1ListNodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIAddNodeResponse parses an HTTP response from a ExternalClusterAPIAddNodeWithResponse call
func ParseExternalClusterAPIAddNodeResponse(rsp *http.Response) (*ExternalClusterAPIAddNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIAddNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1AddNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDeleteNodeResponse parses an HTTP response from a ExternalClusterAPIDeleteNodeWithResponse call
func ParseExternalClusterAPIDeleteNodeResponse(rsp *http.Response) (*ExternalClusterAPIDeleteNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDeleteNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DeleteNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetNodeResponse parses an HTTP response from a ExternalClusterAPIGetNodeWithResponse call
func ParseExternalClusterAPIGetNodeResponse(rsp *http.Response) (*ExternalClusterAPIGetNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDrainNodeResponse parses an HTTP response from a ExternalClusterAPIDrainNodeWithResponse call
func ParseExternalClusterAPIDrainNodeResponse(rsp *http.Response) (*ExternalClusterAPIDrainNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDrainNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DrainNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIPauseClusterResponse parses an HTTP response from a ExternalClusterAPIPauseClusterWithResponse call
func ParseExternalClusterAPIPauseClusterResponse(rsp *http.Response) (*ExternalClusterAPIPauseClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIPauseClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIReconcileClusterResponse parses an HTTP response from a ExternalClusterAPIReconcileClusterWithResponse call
func ParseExternalClusterAPIReconcileClusterResponse(rsp *http.Response) (*ExternalClusterAPIReconcileClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIReconcileClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1ReconcileClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIResumeClusterResponse parses an HTTP response from a ExternalClusterAPIResumeClusterWithResponse call
func ParseExternalClusterAPIResumeClusterResponse(rsp *http.Response) (*ExternalClusterAPIResumeClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIResumeClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPICreateClusterTokenResponse parses an HTTP response from a ExternalClusterAPICreateClusterTokenWithResponse call
func ParseExternalClusterAPICreateClusterTokenResponse(rsp *http.Response) (*ExternalClusterAPICreateClusterTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPICreateClusterTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1CreateClusterTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCurrentUserProfileResponse parses an HTTP response from a CurrentUserProfileWithResponse call
func ParseCurrentUserProfileResponse(rsp *http.Response) (*CurrentUserProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CurrentUserProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCurrentUserProfileResponse parses an HTTP response from a UpdateCurrentUserProfileWithResponse call
func ParseUpdateCurrentUserProfileResponse(rsp *http.Response) (*UpdateCurrentUserProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateCurrentUserProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPromMetricsResponse parses an HTTP response from a GetPromMetricsWithResponse call
func ParseGetPromMetricsResponse(rsp *http.Response) (*GetPromMetricsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPromMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseNotificationAPIListNotificationsResponse parses an HTTP response from a NotificationAPIListNotificationsWithResponse call
func ParseNotificationAPIListNotificationsResponse(rsp *http.Response) (*NotificationAPIListNotificationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIListNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1ListNotificationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPIAckNotificationsResponse parses an HTTP response from a NotificationAPIAckNotificationsWithResponse call
func ParseNotificationAPIAckNotificationsResponse(rsp *http.Response) (*NotificationAPIAckNotificationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIAckNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1AckNotificationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPIListWebhookConfigsResponse parses an HTTP response from a NotificationAPIListWebhookConfigsWithResponse call
func ParseNotificationAPIListWebhookConfigsResponse(rsp *http.Response) (*NotificationAPIListWebhookConfigsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIListWebhookConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1ListWebhookConfigsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPICreateWebhookConfigResponse parses an HTTP response from a NotificationAPICreateWebhookConfigWithResponse call
func ParseNotificationAPICreateWebhookConfigResponse(rsp *http.Response) (*NotificationAPICreateWebhookConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPICreateWebhookConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1WebhookConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPIDeleteWebhookConfigResponse parses an HTTP response from a NotificationAPIDeleteWebhookConfigWithResponse call
func ParseNotificationAPIDeleteWebhookConfigResponse(rsp *http.Response) (*NotificationAPIDeleteWebhookConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIDeleteWebhookConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1DeleteWebhookConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPIGetWebhookConfigResponse parses an HTTP response from a NotificationAPIGetWebhookConfigWithResponse call
func ParseNotificationAPIGetWebhookConfigResponse(rsp *http.Response) (*NotificationAPIGetWebhookConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIGetWebhookConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1WebhookConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPIUpdateWebhookConfigResponse parses an HTTP response from a NotificationAPIUpdateWebhookConfigWithResponse call
func ParseNotificationAPIUpdateWebhookConfigResponse(rsp *http.Response) (*NotificationAPIUpdateWebhookConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIUpdateWebhookConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1WebhookConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNotificationAPIGetNotificationResponse parses an HTTP response from a NotificationAPIGetNotificationWithResponse call
func ParseNotificationAPIGetNotificationResponse(rsp *http.Response) (*NotificationAPIGetNotificationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NotificationAPIGetNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiNotificationsV1beta1Notification
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListOrganizationsResponse parses an HTTP response from a ListOrganizationsWithResponse call
func ParseListOrganizationsResponse(rsp *http.Response) (*ListOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationResponse parses an HTTP response from a CreateOrganizationWithResponse call
func ParseCreateOrganizationResponse(rsp *http.Response) (*CreateOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationResponse parses an HTTP response from a DeleteOrganizationWithResponse call
func ParseDeleteOrganizationResponse(rsp *http.Response) (*DeleteOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationResponse parses an HTTP response from a GetOrganizationWithResponse call
func ParseGetOrganizationResponse(rsp *http.Response) (*GetOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationResponse parses an HTTP response from a UpdateOrganizationWithResponse call
func ParseUpdateOrganizationResponse(rsp *http.Response) (*UpdateOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationUsersResponse parses an HTTP response from a GetOrganizationUsersWithResponse call
func ParseGetOrganizationUsersResponse(rsp *http.Response) (*GetOrganizationUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUsersList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationUserResponse parses an HTTP response from a CreateOrganizationUserWithResponse call
func ParseCreateOrganizationUserResponse(rsp *http.Response) (*CreateOrganizationUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationUserResponse parses an HTTP response from a DeleteOrganizationUserWithResponse call
func ParseDeleteOrganizationUserResponse(rsp *http.Response) (*DeleteOrganizationUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationUserResponse parses an HTTP response from a UpdateOrganizationUserWithResponse call
func ParseUpdateOrganizationUserResponse(rsp *http.Response) (*UpdateOrganizationUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsageReportResponse parses an HTTP response from a GetUsageReportWithResponse call
func ParseGetUsageReportResponse(rsp *http.Response) (*GetUsageReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUsageReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceUsageReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParseExternalClusterAPIGetCredentialsScriptTemplateResponse parses an HTTP response from a ExternalClusterAPIGetCredentialsScriptTemplateWithResponse call
func ParseExternalClusterAPIGetCredentialsScriptTemplateResponse(rsp *http.Response) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCredentialsScriptTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInsightsAPIGetBestPracticesReportResponse parses an HTTP response from a InsightsAPIGetBestPracticesReportWithResponse call
func ParseInsightsAPIGetBestPracticesReportResponse(rsp *http.Response) (*InsightsAPIGetBestPracticesReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetBestPracticesReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetBestPracticesReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetBestPracticesCheckDetailsResponse parses an HTTP response from a InsightsAPIGetBestPracticesCheckDetailsWithResponse call
func ParseInsightsAPIGetBestPracticesCheckDetailsResponse(rsp *http.Response) (*InsightsAPIGetBestPracticesCheckDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetBestPracticesCheckDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetBestPracticesCheckDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetBestPracticesReportFiltersResponse parses an HTTP response from a InsightsAPIGetBestPracticesReportFiltersWithResponse call
func ParseInsightsAPIGetBestPracticesReportFiltersResponse(rsp *http.Response) (*InsightsAPIGetBestPracticesReportFiltersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetBestPracticesReportFiltersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetBestPracticesReportFiltersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIScheduleBestPracticesScanResponse parses an HTTP response from a InsightsAPIScheduleBestPracticesScanWithResponse call
func ParseInsightsAPIScheduleBestPracticesScanResponse(rsp *http.Response) (*InsightsAPIScheduleBestPracticesScanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIScheduleBestPracticesScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1ScheduleBestPracticesScanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetBestPracticesReportSummaryResponse parses an HTTP response from a InsightsAPIGetBestPracticesReportSummaryWithResponse call
func ParseInsightsAPIGetBestPracticesReportSummaryResponse(rsp *http.Response) (*InsightsAPIGetBestPracticesReportSummaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetBestPracticesReportSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetBestPracticesReportSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetBestPracticesOverviewResponse parses an HTTP response from a InsightsAPIGetBestPracticesOverviewWithResponse call
func ParseInsightsAPIGetBestPracticesOverviewResponse(rsp *http.Response) (*InsightsAPIGetBestPracticesOverviewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetBestPracticesOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetBestPracticesOverviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetOverviewSummaryResponse parses an HTTP response from a InsightsAPIGetOverviewSummaryWithResponse call
func ParseInsightsAPIGetOverviewSummaryResponse(rsp *http.Response) (*InsightsAPIGetOverviewSummaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetOverviewSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetOverviewSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetVulnerabilitiesOverviewResponse parses an HTTP response from a InsightsAPIGetVulnerabilitiesOverviewWithResponse call
func ParseInsightsAPIGetVulnerabilitiesOverviewResponse(rsp *http.Response) (*InsightsAPIGetVulnerabilitiesOverviewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetVulnerabilitiesOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetVulnerabilitiesOverviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetVulnerabilitiesReportResponse parses an HTTP response from a InsightsAPIGetVulnerabilitiesReportWithResponse call
func ParseInsightsAPIGetVulnerabilitiesReportResponse(rsp *http.Response) (*InsightsAPIGetVulnerabilitiesReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetVulnerabilitiesReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetVulnerabilitiesReportResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetVulnerabilitiesDetailsResponse parses an HTTP response from a InsightsAPIGetVulnerabilitiesDetailsWithResponse call
func ParseInsightsAPIGetVulnerabilitiesDetailsResponse(rsp *http.Response) (*InsightsAPIGetVulnerabilitiesDetailsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetVulnerabilitiesDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetVulnerabilitiesDetailsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetVulnerabilitiesResourcesResponse parses an HTTP response from a InsightsAPIGetVulnerabilitiesResourcesWithResponse call
func ParseInsightsAPIGetVulnerabilitiesResourcesResponse(rsp *http.Response) (*InsightsAPIGetVulnerabilitiesResourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetVulnerabilitiesResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetVulnerabilitiesResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetPackageVulnerabilitiesResponse parses an HTTP response from a InsightsAPIGetPackageVulnerabilitiesWithResponse call
func ParseInsightsAPIGetPackageVulnerabilitiesResponse(rsp *http.Response) (*InsightsAPIGetPackageVulnerabilitiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetPackageVulnerabilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetPackageVulnerabilitiesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetResourceVulnerablePackagesResponse parses an HTTP response from a InsightsAPIGetResourceVulnerablePackagesWithResponse call
func ParseInsightsAPIGetResourceVulnerablePackagesResponse(rsp *http.Response) (*InsightsAPIGetResourceVulnerablePackagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetResourceVulnerablePackagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetResourceVulnerablePackagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIScheduleVulnerabilitiesScanResponse parses an HTTP response from a InsightsAPIScheduleVulnerabilitiesScanWithResponse call
func ParseInsightsAPIScheduleVulnerabilitiesScanResponse(rsp *http.Response) (*InsightsAPIScheduleVulnerabilitiesScanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIScheduleVulnerabilitiesScanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1ScheduleVulnerabilitiesScanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetVulnerabilitiesReportSummaryResponse parses an HTTP response from a InsightsAPIGetVulnerabilitiesReportSummaryWithResponse call
func ParseInsightsAPIGetVulnerabilitiesReportSummaryResponse(rsp *http.Response) (*InsightsAPIGetVulnerabilitiesReportSummaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetVulnerabilitiesReportSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1GetVulnerabilitiesReportSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIDisconnectAgentResponse parses an HTTP response from a InsightsAPIDisconnectAgentWithResponse call
func ParseInsightsAPIDisconnectAgentResponse(rsp *http.Response) (*InsightsAPIDisconnectAgentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIDisconnectAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1DisconnectAgentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIIngestAgentLogResponse parses an HTTP response from a InsightsAPIIngestAgentLogWithResponse call
func ParseInsightsAPIIngestAgentLogResponse(rsp *http.Response) (*InsightsAPIIngestAgentLogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIIngestAgentLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1IngestAgentLogResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIPostAgentTelemetryResponse parses an HTTP response from a InsightsAPIPostAgentTelemetryWithResponse call
func ParseInsightsAPIPostAgentTelemetryResponse(rsp *http.Response) (*InsightsAPIPostAgentTelemetryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIPostAgentTelemetryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightsV1PostAgentTelemetryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInsightsAPIGetAgentInstallScriptResponse parses an HTTP response from a InsightsAPIGetAgentInstallScriptWithResponse call
func ParseInsightsAPIGetAgentInstallScriptResponse(rsp *http.Response) (*InsightsAPIGetAgentInstallScriptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetAgentInstallScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseInsightsAPIGetAgentCloudScriptResponse parses an HTTP response from a InsightsAPIGetAgentCloudScriptWithResponse call
func ParseInsightsAPIGetAgentCloudScriptResponse(rsp *http.Response) (*InsightsAPIGetAgentCloudScriptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InsightsAPIGetAgentCloudScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
