// Package sdk provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package sdk

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListAddons request
	ListAddons(ctx context.Context, params *ListAddonsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentInstallScript request
	GetAgentInstallScript(ctx context.Context, params *GetAgentInstallScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAuditEvents request
	ListAuditEvents(ctx context.Context, params *ListAuditEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAuthTokens request
	ListAuthTokens(ctx context.Context, params *ListAuthTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthToken request  with any body
	CreateAuthTokenWithBody(ctx context.Context, params *CreateAuthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthToken(ctx context.Context, params *CreateAuthTokenParams, body CreateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthToken request
	DeleteAuthToken(ctx context.Context, authTokenId AuthTokenId, params *DeleteAuthTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthToken request
	GetAuthToken(ctx context.Context, authTokenId AuthTokenId, params *GetAuthTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAuthToken request  with any body
	UpdateAuthTokenWithBody(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAuthToken(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, body UpdateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlanClusterPrice request  with any body
	PlanClusterPriceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PlanClusterPrice(ctx context.Context, body PlanClusterPriceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCloudCredentials request
	ListCloudCredentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCloudCredentials request  with any body
	CreateCloudCredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCloudCredentials(ctx context.Context, body CreateCloudCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCloudCredentials request
	DeleteCloudCredentials(ctx context.Context, credentialsId CredentialsId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudCredentials request
	GetCloudCredentials(ctx context.Context, credentialsId CredentialsId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGslb request  with any body
	DeleteGslbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteGslb(ctx context.Context, body DeleteGslbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateGslb request  with any body
	CreateOrUpdateGslbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdateGslb(ctx context.Context, body CreateOrUpdateGslbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstanceTypes request
	GetInstanceTypes(ctx context.Context, params *GetInstanceTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInvitation request  with any body
	CreateInvitationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInvitation(ctx context.Context, body CreateInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClaimInvitation request  with any body
	ClaimInvitationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClaimInvitation(ctx context.Context, id string, body ClaimInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListKubernetesClusters request
	ListKubernetesClusters(ctx context.Context, params *ListKubernetesClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNewCluster request  with any body
	CreateNewClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNewCluster(ctx context.Context, body CreateNewClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PrometheusRawMetrics request
	PrometheusRawMetrics(ctx context.Context, params *PrometheusRawMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCluster request
	DeleteCluster(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCluster request
	GetCluster(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCluster request  with any body
	UpdateClusterWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCluster(ctx context.Context, clusterId ClusterId, body UpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterActionsAPIPollClusterActions request
	ClusterActionsAPIPollClusterActions(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterActionsAPIIngestLogs request  with any body
	ClusterActionsAPIIngestLogsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClusterActionsAPIIngestLogs(ctx context.Context, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClusterActionsAPIAckClusterAction request  with any body
	ClusterActionsAPIAckClusterActionWithBody(ctx context.Context, clusterId string, actionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClusterActionsAPIAckClusterAction(ctx context.Context, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterAddons request
	GetClusterAddons(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstallClusterAddon request  with any body
	InstallClusterAddonWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstallClusterAddon(ctx context.Context, clusterId string, body InstallClusterAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClusterAddon request
	DeleteClusterAddon(ctx context.Context, clusterId string, repository string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterAddon request
	GetClusterAddon(ctx context.Context, clusterId string, repository string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateClusterAddon request  with any body
	UpdateClusterAddonWithBody(ctx context.Context, clusterId string, repository string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateClusterAddon(ctx context.Context, clusterId string, repository string, name string, body UpdateClusterAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveCluster request
	ArchiveCluster(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCostHistory request
	GetCostHistory(ctx context.Context, clusterId ClusterId, params *GetCostHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardMetricsCommonStats request
	GetDashboardMetricsCommonStats(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardMetricsCpuUsage request
	GetDashboardMetricsCpuUsage(ctx context.Context, clusterId ClusterId, params *GetDashboardMetricsCpuUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardMetricsMemoryUsage request
	GetDashboardMetricsMemoryUsage(ctx context.Context, clusterId ClusterId, params *GetDashboardMetricsMemoryUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterFeedbackEvents request
	GetClusterFeedbackEvents(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterHealth request
	GetClusterHealth(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterIngressController request
	GetClusterIngressController(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterKubeconfig request
	GetClusterKubeconfig(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLegacyClusterAddons request
	GetLegacyClusterAddons(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfigureClusterAddons request  with any body
	ConfigureClusterAddonsWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConfigureClusterAddons(ctx context.Context, clusterId ClusterId, body ConfigureClusterAddonsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterMetrics request
	GetClusterMetrics(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterMetricsCpuUsage request
	GetClusterMetricsCpuUsage(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsCpuUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterMetricsGauges request
	GetClusterMetricsGauges(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterMetricsMemoryUsage request
	GetClusterMetricsMemoryUsage(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsMemoryUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNodeConstraints request
	GetNodeConstraints(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterNodes request
	GetClusterNodes(ctx context.Context, clusterId ClusterId, params *GetClusterNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddClusterNode request  with any body
	AddClusterNodeWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddClusterNode(ctx context.Context, clusterId ClusterId, body AddClusterNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClusterNode request
	DeleteClusterNode(ctx context.Context, clusterId ClusterId, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterNode request
	GetClusterNode(ctx context.Context, clusterId ClusterId, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloseNodeSsh request
	CloseNodeSsh(ctx context.Context, clusterId ClusterId, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InterruptClusterNode request
	InterruptClusterNode(ctx context.Context, clusterId ClusterId, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetupNodeSsh request  with any body
	SetupNodeSshWithBody(ctx context.Context, clusterId ClusterId, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetupNodeSsh(ctx context.Context, clusterId ClusterId, nodeId string, body SetupNodeSshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNodeList request  with any body
	UpdateNodeListWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNodeList(ctx context.Context, clusterId ClusterId, body UpdateNodeListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PauseCluster request  with any body
	PauseClusterWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PauseCluster(ctx context.Context, clusterId ClusterId, body PauseClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PauseClusterReconcile request
	PauseClusterReconcile(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClusterPauseSchedule request
	DeleteClusterPauseSchedule(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClusterPauseSchedule request
	GetClusterPauseSchedule(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetClusterPauseSchedule request  with any body
	SetClusterPauseScheduleWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetClusterPauseSchedule(ctx context.Context, clusterId ClusterId, body SetClusterPauseScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicies request
	GetPolicies(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertPolicies request  with any body
	UpsertPoliciesWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertPolicies(ctx context.Context, clusterId ClusterId, body UpsertPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProblematicWorkloads request
	GetProblematicWorkloads(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRebalancedWorkloads request
	GetRebalancedWorkloads(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRebalancingPlans request
	ListRebalancingPlans(ctx context.Context, clusterId ClusterId, params *ListRebalancingPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Rebalance request  with any body
	RebalanceWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Rebalance(ctx context.Context, clusterId ClusterId, body RebalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRebalancingPlan request
	GetRebalancingPlan(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExecuteRebalancingPlan request  with any body
	ExecuteRebalancingPlanWithBody(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecuteRebalancingPlan(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, body ExecuteRebalancingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResumeCluster request
	ResumeCluster(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResumeClusterReconcile request
	ResumeClusterReconcile(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TriggerClusterReconcile request
	TriggerClusterReconcile(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkloads request
	GetWorkloads(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIListClusters request
	ExternalClusterAPIListClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIRegisterCluster request  with any body
	ExternalClusterAPIRegisterClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIRegisterCluster(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExternalClusterOperation request
	GetExternalClusterOperation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDeleteCluster request
	ExternalClusterAPIDeleteCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCluster request
	ExternalClusterAPIGetCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIUpdateCluster request  with any body
	ExternalClusterAPIUpdateClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIUpdateCluster(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCredentialsScript request
	ExternalClusterAPIGetCredentialsScript(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDisconnectCluster request  with any body
	ExternalClusterAPIDisconnectClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIDisconnectCluster(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEstimatedSavings request
	GetEstimatedSavings(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetKubeconfig request
	ExternalClusterAPIGetKubeconfig(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetMetrics request
	ExternalClusterAPIGetMetrics(ctx context.Context, clusterId string, params *ExternalClusterAPIGetMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIListNodes request
	ExternalClusterAPIListNodes(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIAddNode request  with any body
	ExternalClusterAPIAddNodeWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIAddNode(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDeleteNode request
	ExternalClusterAPIDeleteNode(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetNode request
	ExternalClusterAPIGetNode(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDrainNode request  with any body
	ExternalClusterAPIDrainNodeWithBody(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIDrainNode(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIPauseCluster request
	ExternalClusterAPIPauseCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIResumeCluster request
	ExternalClusterAPIResumeCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPICreateClusterToken request
	ExternalClusterAPICreateClusterToken(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOperation request
	GetOperation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CurrentUserProfile request
	CurrentUserProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCurrentUserProfile request  with any body
	UpdateCurrentUserProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCurrentUserProfile(ctx context.Context, body UpdateCurrentUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPromMetrics request
	GetPromMetrics(ctx context.Context, params *GetPromMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizations request
	ListOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganization request  with any body
	CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganization request
	DeleteOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganization request
	GetOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganization request  with any body
	UpdateOrganizationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganization(ctx context.Context, id string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationUsers request
	GetOrganizationUsers(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationUser request  with any body
	CreateOrganizationUserWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationUser(ctx context.Context, id string, body CreateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationUser request
	DeleteOrganizationUser(ctx context.Context, id string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationUser request  with any body
	UpdateOrganizationUserWithBody(ctx context.Context, id string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganizationUser(ctx context.Context, id string, userId string, body UpdateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRegions request
	ListRegions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsageReport request
	GetUsageReport(ctx context.Context, params *GetUsageReportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCredentialsScriptTemplate request
	ExternalClusterAPIGetCredentialsScriptTemplate(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListAddons(ctx context.Context, params *ListAddonsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAddonsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentInstallScript(ctx context.Context, params *GetAgentInstallScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentInstallScriptRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAuditEvents(ctx context.Context, params *ListAuditEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAuditEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAuthTokens(ctx context.Context, params *ListAuthTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAuthTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthTokenWithBody(ctx context.Context, params *CreateAuthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthTokenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthToken(ctx context.Context, params *CreateAuthTokenParams, body CreateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthTokenRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthToken(ctx context.Context, authTokenId AuthTokenId, params *DeleteAuthTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthTokenRequest(c.Server, authTokenId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthToken(ctx context.Context, authTokenId AuthTokenId, params *GetAuthTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthTokenRequest(c.Server, authTokenId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthTokenWithBody(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthTokenRequestWithBody(c.Server, authTokenId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAuthToken(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, body UpdateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAuthTokenRequest(c.Server, authTokenId, params, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanClusterPriceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanClusterPriceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlanClusterPrice(ctx context.Context, body PlanClusterPriceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlanClusterPriceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCloudCredentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCloudCredentialsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCloudCredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCloudCredentialsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCloudCredentials(ctx context.Context, body CreateCloudCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCloudCredentialsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCloudCredentials(ctx context.Context, credentialsId CredentialsId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCloudCredentialsRequest(c.Server, credentialsId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudCredentials(ctx context.Context, credentialsId CredentialsId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudCredentialsRequest(c.Server, credentialsId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGslbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGslbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGslb(ctx context.Context, body DeleteGslbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGslbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateGslbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateGslbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateGslb(ctx context.Context, body CreateOrUpdateGslbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateGslbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstanceTypes(ctx context.Context, params *GetInstanceTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstanceTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInvitationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInvitationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInvitation(ctx context.Context, body CreateInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInvitationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClaimInvitationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClaimInvitationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClaimInvitation(ctx context.Context, id string, body ClaimInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClaimInvitationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListKubernetesClusters(ctx context.Context, params *ListKubernetesClustersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListKubernetesClustersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNewClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNewCluster(ctx context.Context, body CreateNewClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PrometheusRawMetrics(ctx context.Context, params *PrometheusRawMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPrometheusRawMetricsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCluster(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCluster(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateClusterWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCluster(ctx context.Context, clusterId ClusterId, body UpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIPollClusterActions(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIPollClusterActionsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIIngestLogsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIIngestLogsRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIIngestLogs(ctx context.Context, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIIngestLogsRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIAckClusterActionWithBody(ctx context.Context, clusterId string, actionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIAckClusterActionRequestWithBody(c.Server, clusterId, actionId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClusterActionsAPIAckClusterAction(ctx context.Context, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClusterActionsAPIAckClusterActionRequest(c.Server, clusterId, actionId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterAddons(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterAddonsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallClusterAddonWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallClusterAddonRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallClusterAddon(ctx context.Context, clusterId string, body InstallClusterAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallClusterAddonRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClusterAddon(ctx context.Context, clusterId string, repository string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterAddonRequest(c.Server, clusterId, repository, name)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterAddon(ctx context.Context, clusterId string, repository string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterAddonRequest(c.Server, clusterId, repository, name)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateClusterAddonWithBody(ctx context.Context, clusterId string, repository string, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClusterAddonRequestWithBody(c.Server, clusterId, repository, name, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateClusterAddon(ctx context.Context, clusterId string, repository string, name string, body UpdateClusterAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateClusterAddonRequest(c.Server, clusterId, repository, name, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveCluster(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCostHistory(ctx context.Context, clusterId ClusterId, params *GetCostHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCostHistoryRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardMetricsCommonStats(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardMetricsCommonStatsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardMetricsCpuUsage(ctx context.Context, clusterId ClusterId, params *GetDashboardMetricsCpuUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardMetricsCpuUsageRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardMetricsMemoryUsage(ctx context.Context, clusterId ClusterId, params *GetDashboardMetricsMemoryUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardMetricsMemoryUsageRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterFeedbackEvents(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterFeedbackEventsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterHealth(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterHealthRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterIngressController(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterIngressControllerRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterKubeconfig(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterKubeconfigRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLegacyClusterAddons(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLegacyClusterAddonsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigureClusterAddonsWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigureClusterAddonsRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfigureClusterAddons(ctx context.Context, clusterId ClusterId, body ConfigureClusterAddonsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfigureClusterAddonsRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterMetrics(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterMetricsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterMetricsCpuUsage(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsCpuUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterMetricsCpuUsageRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterMetricsGauges(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterMetricsGaugesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterMetricsMemoryUsage(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsMemoryUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterMetricsMemoryUsageRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodeConstraints(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodeConstraintsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterNodes(ctx context.Context, clusterId ClusterId, params *GetClusterNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterNodesRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddClusterNodeWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddClusterNodeRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddClusterNode(ctx context.Context, clusterId ClusterId, body AddClusterNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddClusterNodeRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClusterNode(ctx context.Context, clusterId ClusterId, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterNodeRequest(c.Server, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterNode(ctx context.Context, clusterId ClusterId, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterNodeRequest(c.Server, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloseNodeSsh(ctx context.Context, clusterId ClusterId, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloseNodeSshRequest(c.Server, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InterruptClusterNode(ctx context.Context, clusterId ClusterId, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInterruptClusterNodeRequest(c.Server, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupNodeSshWithBody(ctx context.Context, clusterId ClusterId, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupNodeSshRequestWithBody(c.Server, clusterId, nodeId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetupNodeSsh(ctx context.Context, clusterId ClusterId, nodeId string, body SetupNodeSshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetupNodeSshRequest(c.Server, clusterId, nodeId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNodeListWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNodeListRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNodeList(ctx context.Context, clusterId ClusterId, body UpdateNodeListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNodeListRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PauseClusterWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPauseClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PauseCluster(ctx context.Context, clusterId ClusterId, body PauseClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPauseClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PauseClusterReconcile(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPauseClusterReconcileRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClusterPauseSchedule(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClusterPauseScheduleRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClusterPauseSchedule(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClusterPauseScheduleRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetClusterPauseScheduleWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetClusterPauseScheduleRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetClusterPauseSchedule(ctx context.Context, clusterId ClusterId, body SetClusterPauseScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetClusterPauseScheduleRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicies(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPoliciesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertPoliciesWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertPoliciesRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertPolicies(ctx context.Context, clusterId ClusterId, body UpsertPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertPoliciesRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProblematicWorkloads(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProblematicWorkloadsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRebalancedWorkloads(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRebalancedWorkloadsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRebalancingPlans(ctx context.Context, clusterId ClusterId, params *ListRebalancingPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRebalancingPlansRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RebalanceWithBody(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRebalanceRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Rebalance(ctx context.Context, clusterId ClusterId, body RebalanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRebalanceRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRebalancingPlan(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRebalancingPlanRequest(c.Server, clusterId, rebalancingPlanId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteRebalancingPlanWithBody(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteRebalancingPlanRequestWithBody(c.Server, clusterId, rebalancingPlanId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteRebalancingPlan(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, body ExecuteRebalancingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteRebalancingPlanRequest(c.Server, clusterId, rebalancingPlanId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResumeCluster(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResumeClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResumeClusterReconcile(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResumeClusterReconcileRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TriggerClusterReconcile(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTriggerClusterReconcileRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkloads(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkloadsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIListClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIListClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIRegisterClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIRegisterClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIRegisterCluster(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIRegisterClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExternalClusterOperation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExternalClusterOperationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDeleteCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDeleteClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateCluster(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCredentialsScript(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCredentialsScriptRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDisconnectClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDisconnectClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDisconnectCluster(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDisconnectClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEstimatedSavings(ctx context.Context, clusterId ClusterId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEstimatedSavingsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetKubeconfig(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetKubeconfigRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetMetrics(ctx context.Context, clusterId string, params *ExternalClusterAPIGetMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetMetricsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIListNodes(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIListNodesRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIAddNodeWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIAddNodeRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIAddNode(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIAddNodeRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDeleteNode(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDeleteNodeRequest(c.Server, clusterId, nodeId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetNode(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetNodeRequest(c.Server, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDrainNodeWithBody(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDrainNodeRequestWithBody(c.Server, clusterId, nodeId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDrainNode(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDrainNodeRequest(c.Server, clusterId, nodeId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIPauseCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIPauseClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIResumeCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIResumeClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPICreateClusterToken(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPICreateClusterTokenRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOperation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOperationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CurrentUserProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCurrentUserProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCurrentUserProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCurrentUserProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCurrentUserProfile(ctx context.Context, body UpdateCurrentUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCurrentUserProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromMetrics(ctx context.Context, params *GetPromMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromMetricsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganization(ctx context.Context, id string, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationUsers(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationUsersRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationUserWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationUser(ctx context.Context, id string, body CreateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationUserRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationUser(ctx context.Context, id string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationUserRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationUserWithBody(ctx context.Context, id string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationUserRequestWithBody(c.Server, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationUser(ctx context.Context, id string, userId string, body UpdateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationUserRequest(c.Server, id, userId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRegions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRegionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsageReport(ctx context.Context, params *GetUsageReportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsageReportRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCredentialsScriptTemplate(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCredentialsScriptTemplateRequest(c.Server, provider)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAddonsRequest generates requests for ListAddons
func NewListAddonsRequest(server string, params *ListAddonsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/addons")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Ids != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ids", *params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Names != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "names", *params.Names); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Versions != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "versions", *params.Versions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Repositories != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "repositories", *params.Repositories); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentInstallScriptRequest generates requests for GetAgentInstallScript
func NewGetAgentInstallScriptRequest(server string, params *GetAgentInstallScriptParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/agent.sh")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Provider != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "provider", *params.Provider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EksRegion != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "eks.region", *params.EksRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EksAccountId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "eks.accountId", *params.EksAccountId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EksClusterName != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "eks.clusterName", *params.EksClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GkeRegion != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "gke.region", *params.GkeRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GkeLocation != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "gke.location", *params.GkeLocation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GkeProjectId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "gke.projectId", *params.GkeProjectId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GkeClusterName != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "gke.clusterName", *params.GkeClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.KopsCsp != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "kops.csp", *params.KopsCsp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.KopsRegion != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "kops.region", *params.KopsRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.KopsClusterName != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "kops.clusterName", *params.KopsClusterName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.KopsStateStore != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "kops.stateStore", *params.KopsStateStore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AksLocation != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "aks.location", *params.AksLocation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AksNodeResourceGroup != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "aks.nodeResourceGroup", *params.AksNodeResourceGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AksSubscriptionId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "aks.subscriptionId", *params.AksSubscriptionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAuditEventsRequest generates requests for ListAuditEvents
func NewListAuditEventsRequest(server string, params *ListAuditEventsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/audit")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "cursor", *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "fromDate", *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "toDate", *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "clusterId", *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Label != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "label", *params.Label); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LabelValue != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "labelValue", *params.LabelValue); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAuthTokensRequest generates requests for ListAuthTokens
func NewListAuthTokensRequest(server string, params *ListAuthTokensParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/auth/tokens")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XCastAiOrganizationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-CastAi-Organization-Id", *params.XCastAiOrganizationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CastAi-Organization-Id", headerParam0)
	}

	return req, nil
}

// NewCreateAuthTokenRequest calls the generic CreateAuthToken builder with application/json body
func NewCreateAuthTokenRequest(server string, params *CreateAuthTokenParams, body CreateAuthTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthTokenRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateAuthTokenRequestWithBody generates requests for CreateAuthToken with any type of body
func NewCreateAuthTokenRequestWithBody(server string, params *CreateAuthTokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/auth/tokens")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCastAiOrganizationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-CastAi-Organization-Id", *params.XCastAiOrganizationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CastAi-Organization-Id", headerParam0)
	}

	return req, nil
}

// NewDeleteAuthTokenRequest generates requests for DeleteAuthToken
func NewDeleteAuthTokenRequest(server string, authTokenId AuthTokenId, params *DeleteAuthTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "authTokenId", authTokenId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XCastAiOrganizationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-CastAi-Organization-Id", *params.XCastAiOrganizationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CastAi-Organization-Id", headerParam0)
	}

	return req, nil
}

// NewGetAuthTokenRequest generates requests for GetAuthToken
func NewGetAuthTokenRequest(server string, authTokenId AuthTokenId, params *GetAuthTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "authTokenId", authTokenId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XCastAiOrganizationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-CastAi-Organization-Id", *params.XCastAiOrganizationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CastAi-Organization-Id", headerParam0)
	}

	return req, nil
}

// NewUpdateAuthTokenRequest calls the generic UpdateAuthToken builder with application/json body
func NewUpdateAuthTokenRequest(server string, authTokenId AuthTokenId, params *UpdateAuthTokenParams, body UpdateAuthTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAuthTokenRequestWithBody(server, authTokenId, params, "application/json", bodyReader)
}

// NewUpdateAuthTokenRequestWithBody generates requests for UpdateAuthToken with any type of body
func NewUpdateAuthTokenRequestWithBody(server string, authTokenId AuthTokenId, params *UpdateAuthTokenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "authTokenId", authTokenId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XCastAiOrganizationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-CastAi-Organization-Id", *params.XCastAiOrganizationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CastAi-Organization-Id", headerParam0)
	}

	return req, nil
}

// NewPlanClusterPriceRequest calls the generic PlanClusterPrice builder with application/json body
func NewPlanClusterPriceRequest(server string, body PlanClusterPriceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPlanClusterPriceRequestWithBody(server, "application/json", bodyReader)
}

// NewPlanClusterPriceRequestWithBody generates requests for PlanClusterPrice with any type of body
func NewPlanClusterPriceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/cluster-price-plan")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCloudCredentialsRequest generates requests for ListCloudCredentials
func NewListCloudCredentialsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/credentials")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCloudCredentialsRequest calls the generic CreateCloudCredentials builder with application/json body
func NewCreateCloudCredentialsRequest(server string, body CreateCloudCredentialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCloudCredentialsRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCloudCredentialsRequestWithBody generates requests for CreateCloudCredentials with any type of body
func NewCreateCloudCredentialsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/credentials")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCloudCredentialsRequest generates requests for DeleteCloudCredentials
func NewDeleteCloudCredentialsRequest(server string, credentialsId CredentialsId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "credentialsId", credentialsId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/credentials/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCloudCredentialsRequest generates requests for GetCloudCredentials
func NewGetCloudCredentialsRequest(server string, credentialsId CredentialsId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "credentialsId", credentialsId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/credentials/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGslbRequest calls the generic DeleteGslb builder with application/json body
func NewDeleteGslbRequest(server string, body DeleteGslbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteGslbRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteGslbRequestWithBody generates requests for DeleteGslb with any type of body
func NewDeleteGslbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/gslb")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrUpdateGslbRequest calls the generic CreateOrUpdateGslb builder with application/json body
func NewCreateOrUpdateGslbRequest(server string, body CreateOrUpdateGslbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateGslbRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrUpdateGslbRequestWithBody generates requests for CreateOrUpdateGslb with any type of body
func NewCreateOrUpdateGslbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/gslb")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInstanceTypesRequest generates requests for GetInstanceTypes
func NewGetInstanceTypesRequest(server string, params *GetInstanceTypesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/inventory/instance-types")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Provider != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "provider", *params.Provider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Region != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "region", *params.Region); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ZoneId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "zoneId", *params.ZoneId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InstanceType != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "instanceType", *params.InstanceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SpotInstances != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "spotInstances", *params.SpotInstances); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageLimit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page.limit", *params.PageLimit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageCursor != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page.cursor", *params.PageCursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInvitationRequest calls the generic CreateInvitation builder with application/json body
func NewCreateInvitationRequest(server string, body CreateInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInvitationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateInvitationRequestWithBody generates requests for CreateInvitation with any type of body
func NewCreateInvitationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/invitations")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClaimInvitationRequest calls the generic ClaimInvitation builder with application/json body
func NewClaimInvitationRequest(server string, id string, body ClaimInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClaimInvitationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewClaimInvitationRequestWithBody generates requests for ClaimInvitation with any type of body
func NewClaimInvitationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/invitations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListKubernetesClustersRequest generates requests for ListKubernetesClusters
func NewListKubernetesClustersRequest(server string, params *ListKubernetesClustersParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.CredentialsId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "credentialsId", *params.CredentialsId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNewClusterRequest calls the generic CreateNewCluster builder with application/json body
func NewCreateNewClusterRequest(server string, body CreateNewClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNewClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNewClusterRequestWithBody generates requests for CreateNewCluster with any type of body
func NewCreateNewClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPrometheusRawMetricsRequest generates requests for PrometheusRawMetrics
func NewPrometheusRawMetricsRequest(server string, params *PrometheusRawMetricsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/prometheus-raw-metrics")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XCastAiOrganizationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-CastAi-Organization-Id", *params.XCastAiOrganizationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CastAi-Organization-Id", headerParam0)
	}

	return req, nil
}

// NewDeleteClusterRequest generates requests for DeleteCluster
func NewDeleteClusterRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterRequest generates requests for GetCluster
func NewGetClusterRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateClusterRequest calls the generic UpdateCluster builder with application/json body
func NewUpdateClusterRequest(server string, clusterId ClusterId, body UpdateClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewUpdateClusterRequestWithBody generates requests for UpdateCluster with any type of body
func NewUpdateClusterRequestWithBody(server string, clusterId ClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClusterActionsAPIPollClusterActionsRequest generates requests for ClusterActionsAPIPollClusterActions
func NewClusterActionsAPIPollClusterActionsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/actions", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClusterActionsAPIIngestLogsRequest calls the generic ClusterActionsAPIIngestLogs builder with application/json body
func NewClusterActionsAPIIngestLogsRequest(server string, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClusterActionsAPIIngestLogsRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewClusterActionsAPIIngestLogsRequestWithBody generates requests for ClusterActionsAPIIngestLogs with any type of body
func NewClusterActionsAPIIngestLogsRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/actions/logs", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClusterActionsAPIAckClusterActionRequest calls the generic ClusterActionsAPIAckClusterAction builder with application/json body
func NewClusterActionsAPIAckClusterActionRequest(server string, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClusterActionsAPIAckClusterActionRequestWithBody(server, clusterId, actionId, "application/json", bodyReader)
}

// NewClusterActionsAPIAckClusterActionRequestWithBody generates requests for ClusterActionsAPIAckClusterAction with any type of body
func NewClusterActionsAPIAckClusterActionRequestWithBody(server string, clusterId string, actionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "actionId", actionId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/actions/%s/ack", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClusterAddonsRequest generates requests for GetClusterAddons
func NewGetClusterAddonsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/addons", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstallClusterAddonRequest calls the generic InstallClusterAddon builder with application/json body
func NewInstallClusterAddonRequest(server string, clusterId string, body InstallClusterAddonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstallClusterAddonRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewInstallClusterAddonRequestWithBody generates requests for InstallClusterAddon with any type of body
func NewInstallClusterAddonRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/addons", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClusterAddonRequest generates requests for DeleteClusterAddon
func NewDeleteClusterAddonRequest(server string, clusterId string, repository string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "repository", repository)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "name", name)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/addons/%s/%s", pathParam0, pathParam1, pathParam2)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterAddonRequest generates requests for GetClusterAddon
func NewGetClusterAddonRequest(server string, clusterId string, repository string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "repository", repository)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "name", name)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/addons/%s/%s", pathParam0, pathParam1, pathParam2)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateClusterAddonRequest calls the generic UpdateClusterAddon builder with application/json body
func NewUpdateClusterAddonRequest(server string, clusterId string, repository string, name string, body UpdateClusterAddonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateClusterAddonRequestWithBody(server, clusterId, repository, name, "application/json", bodyReader)
}

// NewUpdateClusterAddonRequestWithBody generates requests for UpdateClusterAddon with any type of body
func NewUpdateClusterAddonRequestWithBody(server string, clusterId string, repository string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "repository", repository)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "name", name)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/addons/%s/%s", pathParam0, pathParam1, pathParam2)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveClusterRequest generates requests for ArchiveCluster
func NewArchiveClusterRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/archive", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCostHistoryRequest generates requests for GetCostHistory
func NewGetCostHistoryRequest(server string, clusterId ClusterId, params *GetCostHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/cost-history", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "fromDate", *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "toDate", *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardMetricsCommonStatsRequest generates requests for GetDashboardMetricsCommonStats
func NewGetDashboardMetricsCommonStatsRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/dashboard-metrics", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardMetricsCpuUsageRequest generates requests for GetDashboardMetricsCpuUsage
func NewGetDashboardMetricsCpuUsageRequest(server string, clusterId ClusterId, params *GetDashboardMetricsCpuUsageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/dashboard-metrics/cpu-usage", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PeriodHours != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "periodHours", *params.PeriodHours); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "startTime", *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "endTime", *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StepSeconds != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "stepSeconds", *params.StepSeconds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardMetricsMemoryUsageRequest generates requests for GetDashboardMetricsMemoryUsage
func NewGetDashboardMetricsMemoryUsageRequest(server string, clusterId ClusterId, params *GetDashboardMetricsMemoryUsageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/dashboard-metrics/memory-usage", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PeriodHours != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "periodHours", *params.PeriodHours); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "startTime", *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "endTime", *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StepSeconds != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "stepSeconds", *params.StepSeconds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterFeedbackEventsRequest generates requests for GetClusterFeedbackEvents
func NewGetClusterFeedbackEventsRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/feedbackevents", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterHealthRequest generates requests for GetClusterHealth
func NewGetClusterHealthRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/health", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterIngressControllerRequest generates requests for GetClusterIngressController
func NewGetClusterIngressControllerRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/ingress-controller", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterKubeconfigRequest generates requests for GetClusterKubeconfig
func NewGetClusterKubeconfigRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/kubeconfig", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLegacyClusterAddonsRequest generates requests for GetLegacyClusterAddons
func NewGetLegacyClusterAddonsRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/legacy-addons", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfigureClusterAddonsRequest calls the generic ConfigureClusterAddons builder with application/json body
func NewConfigureClusterAddonsRequest(server string, clusterId ClusterId, body ConfigureClusterAddonsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConfigureClusterAddonsRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewConfigureClusterAddonsRequestWithBody generates requests for ConfigureClusterAddons with any type of body
func NewConfigureClusterAddonsRequestWithBody(server string, clusterId ClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/legacy-addons", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClusterMetricsRequest generates requests for GetClusterMetrics
func NewGetClusterMetricsRequest(server string, clusterId ClusterId, params *GetClusterMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/legacy-metrics", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "metricType", params.MetricType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterMetricsCpuUsageRequest generates requests for GetClusterMetricsCpuUsage
func NewGetClusterMetricsCpuUsageRequest(server string, clusterId ClusterId, params *GetClusterMetricsCpuUsageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/metrics/cpu-usage", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PeriodHours != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "periodHours", *params.PeriodHours); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "startTime", *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "endTime", *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StepSeconds != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "stepSeconds", *params.StepSeconds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterMetricsGaugesRequest generates requests for GetClusterMetricsGauges
func NewGetClusterMetricsGaugesRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/metrics/gauges", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterMetricsMemoryUsageRequest generates requests for GetClusterMetricsMemoryUsage
func NewGetClusterMetricsMemoryUsageRequest(server string, clusterId ClusterId, params *GetClusterMetricsMemoryUsageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/metrics/memory-usage", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PeriodHours != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "periodHours", *params.PeriodHours); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "startTime", *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "endTime", *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StepSeconds != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "stepSeconds", *params.StepSeconds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNodeConstraintsRequest generates requests for GetNodeConstraints
func NewGetNodeConstraintsRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-constraints", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterNodesRequest generates requests for GetClusterNodes
func NewGetClusterNodesRequest(server string, clusterId ClusterId, params *GetClusterNodesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/nodes", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageLimit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page.limit", *params.PageLimit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageCursor != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page.cursor", *params.PageCursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XCastAiOrganizationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-CastAi-Organization-Id", *params.XCastAiOrganizationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CastAi-Organization-Id", headerParam0)
	}

	return req, nil
}

// NewAddClusterNodeRequest calls the generic AddClusterNode builder with application/json body
func NewAddClusterNodeRequest(server string, clusterId ClusterId, body AddClusterNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddClusterNodeRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewAddClusterNodeRequestWithBody generates requests for AddClusterNode with any type of body
func NewAddClusterNodeRequestWithBody(server string, clusterId ClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/nodes", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteClusterNodeRequest generates requests for DeleteClusterNode
func NewDeleteClusterNodeRequest(server string, clusterId ClusterId, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "nodeId", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/nodes/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterNodeRequest generates requests for GetClusterNode
func NewGetClusterNodeRequest(server string, clusterId ClusterId, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "nodeId", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/nodes/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCloseNodeSshRequest generates requests for CloseNodeSsh
func NewCloseNodeSshRequest(server string, clusterId ClusterId, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "nodeId", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/nodes/%s/close-ssh", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInterruptClusterNodeRequest generates requests for InterruptClusterNode
func NewInterruptClusterNodeRequest(server string, clusterId ClusterId, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "nodeId", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/nodes/%s/interrupt", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetupNodeSshRequest calls the generic SetupNodeSsh builder with application/json body
func NewSetupNodeSshRequest(server string, clusterId ClusterId, nodeId string, body SetupNodeSshJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetupNodeSshRequestWithBody(server, clusterId, nodeId, "application/json", bodyReader)
}

// NewSetupNodeSshRequestWithBody generates requests for SetupNodeSsh with any type of body
func NewSetupNodeSshRequestWithBody(server string, clusterId ClusterId, nodeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "nodeId", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/nodes/%s/setup-ssh", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateNodeListRequest calls the generic UpdateNodeList builder with application/json body
func NewUpdateNodeListRequest(server string, clusterId ClusterId, body UpdateNodeListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNodeListRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewUpdateNodeListRequestWithBody generates requests for UpdateNodeList with any type of body
func NewUpdateNodeListRequestWithBody(server string, clusterId ClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/nodes:update", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPauseClusterRequest calls the generic PauseCluster builder with application/json body
func NewPauseClusterRequest(server string, clusterId ClusterId, body PauseClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPauseClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPauseClusterRequestWithBody generates requests for PauseCluster with any type of body
func NewPauseClusterRequestWithBody(server string, clusterId ClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/pause", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPauseClusterReconcileRequest generates requests for PauseClusterReconcile
func NewPauseClusterReconcileRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/pause-reconcile", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteClusterPauseScheduleRequest generates requests for DeleteClusterPauseSchedule
func NewDeleteClusterPauseScheduleRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/pause-schedule", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClusterPauseScheduleRequest generates requests for GetClusterPauseSchedule
func NewGetClusterPauseScheduleRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/pause-schedule", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetClusterPauseScheduleRequest calls the generic SetClusterPauseSchedule builder with application/json body
func NewSetClusterPauseScheduleRequest(server string, clusterId ClusterId, body SetClusterPauseScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetClusterPauseScheduleRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewSetClusterPauseScheduleRequestWithBody generates requests for SetClusterPauseSchedule with any type of body
func NewSetClusterPauseScheduleRequestWithBody(server string, clusterId ClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/pause-schedule", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPoliciesRequest generates requests for GetPolicies
func NewGetPoliciesRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/policies", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpsertPoliciesRequest calls the generic UpsertPolicies builder with application/json body
func NewUpsertPoliciesRequest(server string, clusterId ClusterId, body UpsertPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertPoliciesRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewUpsertPoliciesRequestWithBody generates requests for UpsertPolicies with any type of body
func NewUpsertPoliciesRequestWithBody(server string, clusterId ClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/policies", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProblematicWorkloadsRequest generates requests for GetProblematicWorkloads
func NewGetProblematicWorkloadsRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/problematic-workloads", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRebalancedWorkloadsRequest generates requests for GetRebalancedWorkloads
func NewGetRebalancedWorkloadsRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalanced-workloads", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRebalancingPlansRequest generates requests for ListRebalancingPlans
func NewListRebalancingPlansRequest(server string, clusterId ClusterId, params *ListRebalancingPlansParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "cursor", *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRebalanceRequest calls the generic Rebalance builder with application/json body
func NewRebalanceRequest(server string, clusterId ClusterId, body RebalanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRebalanceRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewRebalanceRequestWithBody generates requests for Rebalance with any type of body
func NewRebalanceRequestWithBody(server string, clusterId ClusterId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRebalancingPlanRequest generates requests for GetRebalancingPlan
func NewGetRebalancingPlanRequest(server string, clusterId ClusterId, rebalancingPlanId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "rebalancingPlanId", rebalancingPlanId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExecuteRebalancingPlanRequest calls the generic ExecuteRebalancingPlan builder with application/json body
func NewExecuteRebalancingPlanRequest(server string, clusterId ClusterId, rebalancingPlanId string, body ExecuteRebalancingPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecuteRebalancingPlanRequestWithBody(server, clusterId, rebalancingPlanId, "application/json", bodyReader)
}

// NewExecuteRebalancingPlanRequestWithBody generates requests for ExecuteRebalancingPlan with any type of body
func NewExecuteRebalancingPlanRequestWithBody(server string, clusterId ClusterId, rebalancingPlanId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "rebalancingPlanId", rebalancingPlanId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-plans/%s/execute", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResumeClusterRequest generates requests for ResumeCluster
func NewResumeClusterRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/resume", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResumeClusterReconcileRequest generates requests for ResumeClusterReconcile
func NewResumeClusterReconcileRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/resume-reconcile", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTriggerClusterReconcileRequest generates requests for TriggerClusterReconcile
func NewTriggerClusterReconcileRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/trigger-reconcile", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkloadsRequest generates requests for GetWorkloads
func NewGetWorkloadsRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/clusters/%s/workloads", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIListClustersRequest generates requests for ExternalClusterAPIListClusters
func NewExternalClusterAPIListClustersRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIRegisterClusterRequest calls the generic ExternalClusterAPIRegisterCluster builder with application/json body
func NewExternalClusterAPIRegisterClusterRequest(server string, body ExternalClusterAPIRegisterClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIRegisterClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewExternalClusterAPIRegisterClusterRequestWithBody generates requests for ExternalClusterAPIRegisterCluster with any type of body
func NewExternalClusterAPIRegisterClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetExternalClusterOperationRequest generates requests for GetExternalClusterOperation
func NewGetExternalClusterOperationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/operations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDeleteClusterRequest generates requests for ExternalClusterAPIDeleteCluster
func NewExternalClusterAPIDeleteClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetClusterRequest generates requests for ExternalClusterAPIGetCluster
func NewExternalClusterAPIGetClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIUpdateClusterRequest calls the generic ExternalClusterAPIUpdateCluster builder with application/json body
func NewExternalClusterAPIUpdateClusterRequest(server string, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIUpdateClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIUpdateClusterRequestWithBody generates requests for ExternalClusterAPIUpdateCluster with any type of body
func NewExternalClusterAPIUpdateClusterRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIGetCredentialsScriptRequest generates requests for ExternalClusterAPIGetCredentialsScript
func NewExternalClusterAPIGetCredentialsScriptRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/credentials-script", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDisconnectClusterRequest calls the generic ExternalClusterAPIDisconnectCluster builder with application/json body
func NewExternalClusterAPIDisconnectClusterRequest(server string, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIDisconnectClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIDisconnectClusterRequestWithBody generates requests for ExternalClusterAPIDisconnectCluster with any type of body
func NewExternalClusterAPIDisconnectClusterRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/disconnect", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEstimatedSavingsRequest generates requests for GetEstimatedSavings
func NewGetEstimatedSavingsRequest(server string, clusterId ClusterId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/estimated-savings", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetKubeconfigRequest generates requests for ExternalClusterAPIGetKubeconfig
func NewExternalClusterAPIGetKubeconfigRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/kubeconfig", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetMetricsRequest generates requests for ExternalClusterAPIGetMetrics
func NewExternalClusterAPIGetMetricsRequest(server string, clusterId string, params *ExternalClusterAPIGetMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/metrics", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.MetricType != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "metricType", *params.MetricType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIListNodesRequest generates requests for ExternalClusterAPIListNodes
func NewExternalClusterAPIListNodesRequest(server string, clusterId string, params *ExternalClusterAPIListNodesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.PageLimit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page.limit", *params.PageLimit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageCursor != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "page.cursor", *params.PageCursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIAddNodeRequest calls the generic ExternalClusterAPIAddNode builder with application/json body
func NewExternalClusterAPIAddNodeRequest(server string, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIAddNodeRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIAddNodeRequestWithBody generates requests for ExternalClusterAPIAddNode with any type of body
func NewExternalClusterAPIAddNodeRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIDeleteNodeRequest generates requests for ExternalClusterAPIDeleteNode
func NewExternalClusterAPIDeleteNodeRequest(server string, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "nodeId", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.DrainTimeout != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "drainTimeout", *params.DrainTimeout); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ForceDelete != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "forceDelete", *params.ForceDelete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetNodeRequest generates requests for ExternalClusterAPIGetNode
func NewExternalClusterAPIGetNodeRequest(server string, clusterId string, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "nodeId", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDrainNodeRequest calls the generic ExternalClusterAPIDrainNode builder with application/json body
func NewExternalClusterAPIDrainNodeRequest(server string, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIDrainNodeRequestWithBody(server, clusterId, nodeId, "application/json", bodyReader)
}

// NewExternalClusterAPIDrainNodeRequestWithBody generates requests for ExternalClusterAPIDrainNode with any type of body
func NewExternalClusterAPIDrainNodeRequestWithBody(server string, clusterId string, nodeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "nodeId", nodeId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s/drain", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIPauseClusterRequest generates requests for ExternalClusterAPIPauseCluster
func NewExternalClusterAPIPauseClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/pause", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIResumeClusterRequest generates requests for ExternalClusterAPIResumeCluster
func NewExternalClusterAPIResumeClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/resume", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPICreateClusterTokenRequest generates requests for ExternalClusterAPICreateClusterToken
func NewExternalClusterAPICreateClusterTokenRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clusterId", clusterId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/token", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOperationRequest generates requests for GetOperation
func NewGetOperationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/kubernetes/operations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCurrentUserProfileRequest generates requests for CurrentUserProfile
func NewCurrentUserProfileRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/me")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCurrentUserProfileRequest calls the generic UpdateCurrentUserProfile builder with application/json body
func NewUpdateCurrentUserProfileRequest(server string, body UpdateCurrentUserProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCurrentUserProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateCurrentUserProfileRequestWithBody generates requests for UpdateCurrentUserProfile with any type of body
func NewUpdateCurrentUserProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/me")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPromMetricsRequest generates requests for GetPromMetrics
func NewGetPromMetricsRequest(server string, params *GetPromMetricsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/metrics/prom")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.ClusterNames != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "clusterNames", *params.ClusterNames); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.XCastAiOrganizationId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-CastAi-Organization-Id", *params.XCastAiOrganizationId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-CastAi-Organization-Id", headerParam0)
	}

	return req, nil
}

// NewListOrganizationsRequest generates requests for ListOrganizations
func NewListOrganizationsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/organizations")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRequest calls the generic CreateOrganization builder with application/json body
func NewCreateOrganizationRequest(server string, body CreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationRequestWithBody generates requests for CreateOrganization with any type of body
func NewCreateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/organizations")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationRequest generates requests for DeleteOrganization
func NewDeleteOrganizationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/organizations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationRequest generates requests for GetOrganization
func NewGetOrganizationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/organizations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationRequest calls the generic UpdateOrganization builder with application/json body
func NewUpdateOrganizationRequest(server string, id string, body UpdateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateOrganizationRequestWithBody generates requests for UpdateOrganization with any type of body
func NewUpdateOrganizationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/organizations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationUsersRequest generates requests for GetOrganizationUsers
func NewGetOrganizationUsersRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/organizations/%s/users", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationUserRequest calls the generic CreateOrganizationUser builder with application/json body
func NewCreateOrganizationUserRequest(server string, id string, body CreateOrganizationUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationUserRequestWithBody(server, id, "application/json", bodyReader)
}

// NewCreateOrganizationUserRequestWithBody generates requests for CreateOrganizationUser with any type of body
func NewCreateOrganizationUserRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/organizations/%s/users", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationUserRequest generates requests for DeleteOrganizationUser
func NewDeleteOrganizationUserRequest(server string, id string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/organizations/%s/users/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationUserRequest calls the generic UpdateOrganizationUser builder with application/json body
func NewUpdateOrganizationUserRequest(server string, id string, userId string, body UpdateOrganizationUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationUserRequestWithBody(server, id, userId, "application/json", bodyReader)
}

// NewUpdateOrganizationUserRequestWithBody generates requests for UpdateOrganizationUser with any type of body
func NewUpdateOrganizationUserRequestWithBody(server string, id string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/organizations/%s/users/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRegionsRequest generates requests for ListRegions
func NewListRegionsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/regions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsageReportRequest generates requests for GetUsageReport
func NewGetUsageReportRequest(server string, params *GetUsageReportParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/report/usage/daily")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "clusterId", *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "fromDate", *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "toDate", *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCredentialsScriptTemplateRequest generates requests for ExternalClusterAPIGetCredentialsScriptTemplate
func NewExternalClusterAPIGetCredentialsScriptTemplateRequest(server string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "provider", provider)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/v1/scripts/%s/onboarding.sh", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	req = req.WithContext(ctx)
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAddons request
	ListAddonsWithResponse(ctx context.Context, params *ListAddonsParams) (*ListAddonsResponse, error)

	// GetAgentInstallScript request
	GetAgentInstallScriptWithResponse(ctx context.Context, params *GetAgentInstallScriptParams) (*GetAgentInstallScriptResponse, error)

	// ListAuditEvents request
	ListAuditEventsWithResponse(ctx context.Context, params *ListAuditEventsParams) (*ListAuditEventsResponse, error)

	// ListAuthTokens request
	ListAuthTokensWithResponse(ctx context.Context, params *ListAuthTokensParams) (*ListAuthTokensResponse, error)

	// CreateAuthToken request  with any body
	CreateAuthTokenWithBodyWithResponse(ctx context.Context, params *CreateAuthTokenParams, contentType string, body io.Reader) (*CreateAuthTokenResponse, error)

	CreateAuthTokenWithResponse(ctx context.Context, params *CreateAuthTokenParams, body CreateAuthTokenJSONRequestBody) (*CreateAuthTokenResponse, error)

	// DeleteAuthToken request
	DeleteAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId, params *DeleteAuthTokenParams) (*DeleteAuthTokenResponse, error)

	// GetAuthToken request
	GetAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId, params *GetAuthTokenParams) (*GetAuthTokenResponse, error)

	// UpdateAuthToken request  with any body
	UpdateAuthTokenWithBodyWithResponse(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, contentType string, body io.Reader) (*UpdateAuthTokenResponse, error)

	UpdateAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, body UpdateAuthTokenJSONRequestBody) (*UpdateAuthTokenResponse, error)

	// PlanClusterPrice request  with any body
	PlanClusterPriceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PlanClusterPriceResponse, error)

	PlanClusterPriceWithResponse(ctx context.Context, body PlanClusterPriceJSONRequestBody) (*PlanClusterPriceResponse, error)

	// ListCloudCredentials request
	ListCloudCredentialsWithResponse(ctx context.Context) (*ListCloudCredentialsResponse, error)

	// CreateCloudCredentials request  with any body
	CreateCloudCredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateCloudCredentialsResponse, error)

	CreateCloudCredentialsWithResponse(ctx context.Context, body CreateCloudCredentialsJSONRequestBody) (*CreateCloudCredentialsResponse, error)

	// DeleteCloudCredentials request
	DeleteCloudCredentialsWithResponse(ctx context.Context, credentialsId CredentialsId) (*DeleteCloudCredentialsResponse, error)

	// GetCloudCredentials request
	GetCloudCredentialsWithResponse(ctx context.Context, credentialsId CredentialsId) (*GetCloudCredentialsResponse, error)

	// DeleteGslb request  with any body
	DeleteGslbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*DeleteGslbResponse, error)

	DeleteGslbWithResponse(ctx context.Context, body DeleteGslbJSONRequestBody) (*DeleteGslbResponse, error)

	// CreateOrUpdateGslb request  with any body
	CreateOrUpdateGslbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateOrUpdateGslbResponse, error)

	CreateOrUpdateGslbWithResponse(ctx context.Context, body CreateOrUpdateGslbJSONRequestBody) (*CreateOrUpdateGslbResponse, error)

	// GetInstanceTypes request
	GetInstanceTypesWithResponse(ctx context.Context, params *GetInstanceTypesParams) (*GetInstanceTypesResponse, error)

	// CreateInvitation request  with any body
	CreateInvitationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateInvitationResponse, error)

	CreateInvitationWithResponse(ctx context.Context, body CreateInvitationJSONRequestBody) (*CreateInvitationResponse, error)

	// ClaimInvitation request  with any body
	ClaimInvitationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ClaimInvitationResponse, error)

	ClaimInvitationWithResponse(ctx context.Context, id string, body ClaimInvitationJSONRequestBody) (*ClaimInvitationResponse, error)

	// ListKubernetesClusters request
	ListKubernetesClustersWithResponse(ctx context.Context, params *ListKubernetesClustersParams) (*ListKubernetesClustersResponse, error)

	// CreateNewCluster request  with any body
	CreateNewClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateNewClusterResponse, error)

	CreateNewClusterWithResponse(ctx context.Context, body CreateNewClusterJSONRequestBody) (*CreateNewClusterResponse, error)

	// PrometheusRawMetrics request
	PrometheusRawMetricsWithResponse(ctx context.Context, params *PrometheusRawMetricsParams) (*PrometheusRawMetricsResponse, error)

	// DeleteCluster request
	DeleteClusterWithResponse(ctx context.Context, clusterId ClusterId) (*DeleteClusterResponse, error)

	// GetCluster request
	GetClusterWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterResponse, error)

	// UpdateCluster request  with any body
	UpdateClusterWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*UpdateClusterResponse, error)

	UpdateClusterWithResponse(ctx context.Context, clusterId ClusterId, body UpdateClusterJSONRequestBody) (*UpdateClusterResponse, error)

	// ClusterActionsAPIPollClusterActions request
	ClusterActionsAPIPollClusterActionsWithResponse(ctx context.Context, clusterId string) (*ClusterActionsAPIPollClusterActionsResponse, error)

	// ClusterActionsAPIIngestLogs request  with any body
	ClusterActionsAPIIngestLogsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ClusterActionsAPIIngestLogsResponse, error)

	ClusterActionsAPIIngestLogsWithResponse(ctx context.Context, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody) (*ClusterActionsAPIIngestLogsResponse, error)

	// ClusterActionsAPIAckClusterAction request  with any body
	ClusterActionsAPIAckClusterActionWithBodyWithResponse(ctx context.Context, clusterId string, actionId string, contentType string, body io.Reader) (*ClusterActionsAPIAckClusterActionResponse, error)

	ClusterActionsAPIAckClusterActionWithResponse(ctx context.Context, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody) (*ClusterActionsAPIAckClusterActionResponse, error)

	// GetClusterAddons request
	GetClusterAddonsWithResponse(ctx context.Context, clusterId string) (*GetClusterAddonsResponse, error)

	// InstallClusterAddon request  with any body
	InstallClusterAddonWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*InstallClusterAddonResponse, error)

	InstallClusterAddonWithResponse(ctx context.Context, clusterId string, body InstallClusterAddonJSONRequestBody) (*InstallClusterAddonResponse, error)

	// DeleteClusterAddon request
	DeleteClusterAddonWithResponse(ctx context.Context, clusterId string, repository string, name string) (*DeleteClusterAddonResponse, error)

	// GetClusterAddon request
	GetClusterAddonWithResponse(ctx context.Context, clusterId string, repository string, name string) (*GetClusterAddonResponse, error)

	// UpdateClusterAddon request  with any body
	UpdateClusterAddonWithBodyWithResponse(ctx context.Context, clusterId string, repository string, name string, contentType string, body io.Reader) (*UpdateClusterAddonResponse, error)

	UpdateClusterAddonWithResponse(ctx context.Context, clusterId string, repository string, name string, body UpdateClusterAddonJSONRequestBody) (*UpdateClusterAddonResponse, error)

	// ArchiveCluster request
	ArchiveClusterWithResponse(ctx context.Context, clusterId ClusterId) (*ArchiveClusterResponse, error)

	// GetCostHistory request
	GetCostHistoryWithResponse(ctx context.Context, clusterId ClusterId, params *GetCostHistoryParams) (*GetCostHistoryResponse, error)

	// GetDashboardMetricsCommonStats request
	GetDashboardMetricsCommonStatsWithResponse(ctx context.Context, clusterId ClusterId) (*GetDashboardMetricsCommonStatsResponse, error)

	// GetDashboardMetricsCpuUsage request
	GetDashboardMetricsCpuUsageWithResponse(ctx context.Context, clusterId ClusterId, params *GetDashboardMetricsCpuUsageParams) (*GetDashboardMetricsCpuUsageResponse, error)

	// GetDashboardMetricsMemoryUsage request
	GetDashboardMetricsMemoryUsageWithResponse(ctx context.Context, clusterId ClusterId, params *GetDashboardMetricsMemoryUsageParams) (*GetDashboardMetricsMemoryUsageResponse, error)

	// GetClusterFeedbackEvents request
	GetClusterFeedbackEventsWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterFeedbackEventsResponse, error)

	// GetClusterHealth request
	GetClusterHealthWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterHealthResponse, error)

	// GetClusterIngressController request
	GetClusterIngressControllerWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterIngressControllerResponse, error)

	// GetClusterKubeconfig request
	GetClusterKubeconfigWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterKubeconfigResponse, error)

	// GetLegacyClusterAddons request
	GetLegacyClusterAddonsWithResponse(ctx context.Context, clusterId ClusterId) (*GetLegacyClusterAddonsResponse, error)

	// ConfigureClusterAddons request  with any body
	ConfigureClusterAddonsWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*ConfigureClusterAddonsResponse, error)

	ConfigureClusterAddonsWithResponse(ctx context.Context, clusterId ClusterId, body ConfigureClusterAddonsJSONRequestBody) (*ConfigureClusterAddonsResponse, error)

	// GetClusterMetrics request
	GetClusterMetricsWithResponse(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsParams) (*GetClusterMetricsResponse, error)

	// GetClusterMetricsCpuUsage request
	GetClusterMetricsCpuUsageWithResponse(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsCpuUsageParams) (*GetClusterMetricsCpuUsageResponse, error)

	// GetClusterMetricsGauges request
	GetClusterMetricsGaugesWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterMetricsGaugesResponse, error)

	// GetClusterMetricsMemoryUsage request
	GetClusterMetricsMemoryUsageWithResponse(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsMemoryUsageParams) (*GetClusterMetricsMemoryUsageResponse, error)

	// GetNodeConstraints request
	GetNodeConstraintsWithResponse(ctx context.Context, clusterId ClusterId) (*GetNodeConstraintsResponse, error)

	// GetClusterNodes request
	GetClusterNodesWithResponse(ctx context.Context, clusterId ClusterId, params *GetClusterNodesParams) (*GetClusterNodesResponse, error)

	// AddClusterNode request  with any body
	AddClusterNodeWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*AddClusterNodeResponse, error)

	AddClusterNodeWithResponse(ctx context.Context, clusterId ClusterId, body AddClusterNodeJSONRequestBody) (*AddClusterNodeResponse, error)

	// DeleteClusterNode request
	DeleteClusterNodeWithResponse(ctx context.Context, clusterId ClusterId, nodeId string) (*DeleteClusterNodeResponse, error)

	// GetClusterNode request
	GetClusterNodeWithResponse(ctx context.Context, clusterId ClusterId, nodeId string) (*GetClusterNodeResponse, error)

	// CloseNodeSsh request
	CloseNodeSshWithResponse(ctx context.Context, clusterId ClusterId, nodeId string) (*CloseNodeSshResponse, error)

	// InterruptClusterNode request
	InterruptClusterNodeWithResponse(ctx context.Context, clusterId ClusterId, nodeId string) (*InterruptClusterNodeResponse, error)

	// SetupNodeSsh request  with any body
	SetupNodeSshWithBodyWithResponse(ctx context.Context, clusterId ClusterId, nodeId string, contentType string, body io.Reader) (*SetupNodeSshResponse, error)

	SetupNodeSshWithResponse(ctx context.Context, clusterId ClusterId, nodeId string, body SetupNodeSshJSONRequestBody) (*SetupNodeSshResponse, error)

	// UpdateNodeList request  with any body
	UpdateNodeListWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*UpdateNodeListResponse, error)

	UpdateNodeListWithResponse(ctx context.Context, clusterId ClusterId, body UpdateNodeListJSONRequestBody) (*UpdateNodeListResponse, error)

	// PauseCluster request  with any body
	PauseClusterWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*PauseClusterResponse, error)

	PauseClusterWithResponse(ctx context.Context, clusterId ClusterId, body PauseClusterJSONRequestBody) (*PauseClusterResponse, error)

	// PauseClusterReconcile request
	PauseClusterReconcileWithResponse(ctx context.Context, clusterId ClusterId) (*PauseClusterReconcileResponse, error)

	// DeleteClusterPauseSchedule request
	DeleteClusterPauseScheduleWithResponse(ctx context.Context, clusterId ClusterId) (*DeleteClusterPauseScheduleResponse, error)

	// GetClusterPauseSchedule request
	GetClusterPauseScheduleWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterPauseScheduleResponse, error)

	// SetClusterPauseSchedule request  with any body
	SetClusterPauseScheduleWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*SetClusterPauseScheduleResponse, error)

	SetClusterPauseScheduleWithResponse(ctx context.Context, clusterId ClusterId, body SetClusterPauseScheduleJSONRequestBody) (*SetClusterPauseScheduleResponse, error)

	// GetPolicies request
	GetPoliciesWithResponse(ctx context.Context, clusterId ClusterId) (*GetPoliciesResponse, error)

	// UpsertPolicies request  with any body
	UpsertPoliciesWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*UpsertPoliciesResponse, error)

	UpsertPoliciesWithResponse(ctx context.Context, clusterId ClusterId, body UpsertPoliciesJSONRequestBody) (*UpsertPoliciesResponse, error)

	// GetProblematicWorkloads request
	GetProblematicWorkloadsWithResponse(ctx context.Context, clusterId ClusterId) (*GetProblematicWorkloadsResponse, error)

	// GetRebalancedWorkloads request
	GetRebalancedWorkloadsWithResponse(ctx context.Context, clusterId ClusterId) (*GetRebalancedWorkloadsResponse, error)

	// ListRebalancingPlans request
	ListRebalancingPlansWithResponse(ctx context.Context, clusterId ClusterId, params *ListRebalancingPlansParams) (*ListRebalancingPlansResponse, error)

	// Rebalance request  with any body
	RebalanceWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*RebalanceResponse, error)

	RebalanceWithResponse(ctx context.Context, clusterId ClusterId, body RebalanceJSONRequestBody) (*RebalanceResponse, error)

	// GetRebalancingPlan request
	GetRebalancingPlanWithResponse(ctx context.Context, clusterId ClusterId, rebalancingPlanId string) (*GetRebalancingPlanResponse, error)

	// ExecuteRebalancingPlan request  with any body
	ExecuteRebalancingPlanWithBodyWithResponse(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, contentType string, body io.Reader) (*ExecuteRebalancingPlanResponse, error)

	ExecuteRebalancingPlanWithResponse(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, body ExecuteRebalancingPlanJSONRequestBody) (*ExecuteRebalancingPlanResponse, error)

	// ResumeCluster request
	ResumeClusterWithResponse(ctx context.Context, clusterId ClusterId) (*ResumeClusterResponse, error)

	// ResumeClusterReconcile request
	ResumeClusterReconcileWithResponse(ctx context.Context, clusterId ClusterId) (*ResumeClusterReconcileResponse, error)

	// TriggerClusterReconcile request
	TriggerClusterReconcileWithResponse(ctx context.Context, clusterId ClusterId) (*TriggerClusterReconcileResponse, error)

	// GetWorkloads request
	GetWorkloadsWithResponse(ctx context.Context, clusterId ClusterId) (*GetWorkloadsResponse, error)

	// ExternalClusterAPIListClusters request
	ExternalClusterAPIListClustersWithResponse(ctx context.Context) (*ExternalClusterAPIListClustersResponse, error)

	// ExternalClusterAPIRegisterCluster request  with any body
	ExternalClusterAPIRegisterClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ExternalClusterAPIRegisterClusterResponse, error)

	ExternalClusterAPIRegisterClusterWithResponse(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody) (*ExternalClusterAPIRegisterClusterResponse, error)

	// GetExternalClusterOperation request
	GetExternalClusterOperationWithResponse(ctx context.Context, id string) (*GetExternalClusterOperationResponse, error)

	// ExternalClusterAPIDeleteCluster request
	ExternalClusterAPIDeleteClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDeleteClusterResponse, error)

	// ExternalClusterAPIGetCluster request
	ExternalClusterAPIGetClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetClusterResponse, error)

	// ExternalClusterAPIUpdateCluster request  with any body
	ExternalClusterAPIUpdateClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIUpdateClusterResponse, error)

	ExternalClusterAPIUpdateClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody) (*ExternalClusterAPIUpdateClusterResponse, error)

	// ExternalClusterAPIGetCredentialsScript request
	ExternalClusterAPIGetCredentialsScriptWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetCredentialsScriptResponse, error)

	// ExternalClusterAPIDisconnectCluster request  with any body
	ExternalClusterAPIDisconnectClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIDisconnectClusterResponse, error)

	ExternalClusterAPIDisconnectClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody) (*ExternalClusterAPIDisconnectClusterResponse, error)

	// GetEstimatedSavings request
	GetEstimatedSavingsWithResponse(ctx context.Context, clusterId ClusterId) (*GetEstimatedSavingsResponse, error)

	// ExternalClusterAPIGetKubeconfig request
	ExternalClusterAPIGetKubeconfigWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetKubeconfigResponse, error)

	// ExternalClusterAPIGetMetrics request
	ExternalClusterAPIGetMetricsWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIGetMetricsParams) (*ExternalClusterAPIGetMetricsResponse, error)

	// ExternalClusterAPIListNodes request
	ExternalClusterAPIListNodesWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams) (*ExternalClusterAPIListNodesResponse, error)

	// ExternalClusterAPIAddNode request  with any body
	ExternalClusterAPIAddNodeWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIAddNodeResponse, error)

	ExternalClusterAPIAddNodeWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody) (*ExternalClusterAPIAddNodeResponse, error)

	// ExternalClusterAPIDeleteNode request
	ExternalClusterAPIDeleteNodeWithResponse(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams) (*ExternalClusterAPIDeleteNodeResponse, error)

	// ExternalClusterAPIGetNode request
	ExternalClusterAPIGetNodeWithResponse(ctx context.Context, clusterId string, nodeId string) (*ExternalClusterAPIGetNodeResponse, error)

	// ExternalClusterAPIDrainNode request  with any body
	ExternalClusterAPIDrainNodeWithBodyWithResponse(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader) (*ExternalClusterAPIDrainNodeResponse, error)

	ExternalClusterAPIDrainNodeWithResponse(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody) (*ExternalClusterAPIDrainNodeResponse, error)

	// ExternalClusterAPIPauseCluster request
	ExternalClusterAPIPauseClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIPauseClusterResponse, error)

	// ExternalClusterAPIResumeCluster request
	ExternalClusterAPIResumeClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIResumeClusterResponse, error)

	// ExternalClusterAPICreateClusterToken request
	ExternalClusterAPICreateClusterTokenWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPICreateClusterTokenResponse, error)

	// GetOperation request
	GetOperationWithResponse(ctx context.Context, id string) (*GetOperationResponse, error)

	// CurrentUserProfile request
	CurrentUserProfileWithResponse(ctx context.Context) (*CurrentUserProfileResponse, error)

	// UpdateCurrentUserProfile request  with any body
	UpdateCurrentUserProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UpdateCurrentUserProfileResponse, error)

	UpdateCurrentUserProfileWithResponse(ctx context.Context, body UpdateCurrentUserProfileJSONRequestBody) (*UpdateCurrentUserProfileResponse, error)

	// GetPromMetrics request
	GetPromMetricsWithResponse(ctx context.Context, params *GetPromMetricsParams) (*GetPromMetricsResponse, error)

	// ListOrganizations request
	ListOrganizationsWithResponse(ctx context.Context) (*ListOrganizationsResponse, error)

	// CreateOrganization request  with any body
	CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateOrganizationResponse, error)

	CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody) (*CreateOrganizationResponse, error)

	// DeleteOrganization request
	DeleteOrganizationWithResponse(ctx context.Context, id string) (*DeleteOrganizationResponse, error)

	// GetOrganization request
	GetOrganizationWithResponse(ctx context.Context, id string) (*GetOrganizationResponse, error)

	// UpdateOrganization request  with any body
	UpdateOrganizationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateOrganizationResponse, error)

	UpdateOrganizationWithResponse(ctx context.Context, id string, body UpdateOrganizationJSONRequestBody) (*UpdateOrganizationResponse, error)

	// GetOrganizationUsers request
	GetOrganizationUsersWithResponse(ctx context.Context, id string) (*GetOrganizationUsersResponse, error)

	// CreateOrganizationUser request  with any body
	CreateOrganizationUserWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*CreateOrganizationUserResponse, error)

	CreateOrganizationUserWithResponse(ctx context.Context, id string, body CreateOrganizationUserJSONRequestBody) (*CreateOrganizationUserResponse, error)

	// DeleteOrganizationUser request
	DeleteOrganizationUserWithResponse(ctx context.Context, id string, userId string) (*DeleteOrganizationUserResponse, error)

	// UpdateOrganizationUser request  with any body
	UpdateOrganizationUserWithBodyWithResponse(ctx context.Context, id string, userId string, contentType string, body io.Reader) (*UpdateOrganizationUserResponse, error)

	UpdateOrganizationUserWithResponse(ctx context.Context, id string, userId string, body UpdateOrganizationUserJSONRequestBody) (*UpdateOrganizationUserResponse, error)

	// ListRegions request
	ListRegionsWithResponse(ctx context.Context) (*ListRegionsResponse, error)

	// GetUsageReport request
	GetUsageReportWithResponse(ctx context.Context, params *GetUsageReportParams) (*GetUsageReportResponse, error)

	// ExternalClusterAPIGetCredentialsScriptTemplate request
	ExternalClusterAPIGetCredentialsScriptTemplateWithResponse(ctx context.Context, provider string) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error)
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
type Response interface {
	Status() string
	StatusCode() int
	GetBody() []byte
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddonList
}

// Status returns HTTPResponse.Status
func (r ListAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListAddonsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetAgentInstallScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAgentInstallScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentInstallScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetAgentInstallScriptResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListAuditEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuditEventList
}

// Status returns HTTPResponse.Status
func (r ListAuditEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuditEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListAuditEventsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListAuthTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthTokenList
}

// Status returns HTTPResponse.Status
func (r ListAuthTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuthTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListAuthTokensResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthTokenCreateResponse
}

// Status returns HTTPResponse.Status
func (r CreateAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthToken
}

// Status returns HTTPResponse.Status
func (r GetAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UpdateAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthToken
}

// Status returns HTTPResponse.Status
func (r UpdateAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UpdateAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type PlanClusterPriceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterCostEstimate
}

// Status returns HTTPResponse.Status
func (r PlanClusterPriceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlanClusterPriceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r PlanClusterPriceResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListCloudCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudCredentialsList
}

// Status returns HTTPResponse.Status
func (r ListCloudCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCloudCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListCloudCredentialsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateCloudCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CloudCredentials
}

// Status returns HTTPResponse.Status
func (r CreateCloudCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCloudCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateCloudCredentialsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteCloudCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCloudCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCloudCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteCloudCredentialsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetCloudCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudCredentials
}

// Status returns HTTPResponse.Status
func (r GetCloudCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetCloudCredentialsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteGslbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteGslbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGslbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteGslbResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateOrUpdateGslbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GSLBResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateGslbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateGslbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateOrUpdateGslbResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetInstanceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceList
}

// Status returns HTTPResponse.Status
func (r GetInstanceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstanceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetInstanceTypesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NewInvitationsResponse
}

// Status returns HTTPResponse.Status
func (r CreateInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateInvitationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ClaimInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ClaimInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClaimInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ClaimInvitationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListKubernetesClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesClusterList
}

// Status returns HTTPResponse.Status
func (r ListKubernetesClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListKubernetesClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListKubernetesClustersResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateNewClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *KubernetesCluster
}

// Status returns HTTPResponse.Status
func (r CreateNewClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNewClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateNewClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type PrometheusRawMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PrometheusRawMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PrometheusRawMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r PrometheusRawMetricsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesCluster
}

// Status returns HTTPResponse.Status
func (r GetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UpdateClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesCluster
}

// Status returns HTTPResponse.Status
func (r UpdateClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UpdateClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ClusterActionsAPIPollClusterActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusteractionsV1PollClusterActionsResponse
}

// Status returns HTTPResponse.Status
func (r ClusterActionsAPIPollClusterActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterActionsAPIPollClusterActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ClusterActionsAPIPollClusterActionsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ClusterActionsAPIIngestLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusteractionsV1IngestLogsResponse
}

// Status returns HTTPResponse.Status
func (r ClusterActionsAPIIngestLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterActionsAPIIngestLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ClusterActionsAPIIngestLogsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ClusterActionsAPIAckClusterActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusteractionsV1AckClusterActionResponse
}

// Status returns HTTPResponse.Status
func (r ClusterActionsAPIAckClusterActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClusterActionsAPIAckClusterActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ClusterActionsAPIAckClusterActionResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterAddonsList
}

// Status returns HTTPResponse.Status
func (r GetClusterAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterAddonsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InstallClusterAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterAddon
}

// Status returns HTTPResponse.Status
func (r InstallClusterAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstallClusterAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InstallClusterAddonResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteClusterAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClusterAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteClusterAddonResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterAddon
}

// Status returns HTTPResponse.Status
func (r GetClusterAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterAddonResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UpdateClusterAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterAddon
}

// Status returns HTTPResponse.Status
func (r UpdateClusterAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateClusterAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UpdateClusterAddonResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ArchiveClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ArchiveClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ArchiveClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetCostHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterCostHistoryResponse
}

// Status returns HTTPResponse.Status
func (r GetCostHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCostHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetCostHistoryResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetDashboardMetricsCommonStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DashboardMetricsCommonStats
}

// Status returns HTTPResponse.Status
func (r GetDashboardMetricsCommonStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardMetricsCommonStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetDashboardMetricsCommonStatsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetDashboardMetricsCpuUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DashboardMetricsCPUUsage
}

// Status returns HTTPResponse.Status
func (r GetDashboardMetricsCpuUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardMetricsCpuUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetDashboardMetricsCpuUsageResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetDashboardMetricsMemoryUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DashboardMetricsMemoryUsage
}

// Status returns HTTPResponse.Status
func (r GetDashboardMetricsMemoryUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardMetricsMemoryUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetDashboardMetricsMemoryUsageResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterFeedbackEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesClusterFeedbackEventsList
}

// Status returns HTTPResponse.Status
func (r GetClusterFeedbackEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterFeedbackEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterFeedbackEventsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterHealth
}

// Status returns HTTPResponse.Status
func (r GetClusterHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterHealthResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterIngressControllerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesIngressController
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetClusterIngressControllerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterIngressControllerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterIngressControllerResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterKubeconfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetClusterKubeconfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterKubeconfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterKubeconfigResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetLegacyClusterAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddonsConfig
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetLegacyClusterAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLegacyClusterAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetLegacyClusterAddonsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ConfigureClusterAddonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddonsConfig
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ConfigureClusterAddonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfigureClusterAddonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ConfigureClusterAddonsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterMetrics
}

// Status returns HTTPResponse.Status
func (r GetClusterMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterMetricsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterMetricsCpuUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterMetricsCpuUsage
}

// Status returns HTTPResponse.Status
func (r GetClusterMetricsCpuUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterMetricsCpuUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterMetricsCpuUsageResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterMetricsGaugesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterMetricsGauges
}

// Status returns HTTPResponse.Status
func (r GetClusterMetricsGaugesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterMetricsGaugesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterMetricsGaugesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterMetricsMemoryUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterMetricsMemoryUsage
}

// Status returns HTTPResponse.Status
func (r GetClusterMetricsMemoryUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterMetricsMemoryUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterMetricsMemoryUsageResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetNodeConstraintsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ValidNodeConstraints
}

// Status returns HTTPResponse.Status
func (r GetNodeConstraintsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNodeConstraintsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetNodeConstraintsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeList
}

// Status returns HTTPResponse.Status
func (r GetClusterNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterNodesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AddClusterNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AddNodeResult
	JSON400      *ErrorResponse
	JSON412      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddClusterNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddClusterNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AddClusterNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteClusterNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DeleteNodeResult
	JSON400      *ErrorResponse
	JSON412      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteClusterNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteClusterNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Node
}

// Status returns HTTPResponse.Status
func (r GetClusterNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CloseNodeSshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CloseNodeSshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloseNodeSshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CloseNodeSshResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InterruptClusterNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InterruptClusterNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InterruptClusterNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InterruptClusterNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type SetupNodeSshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetupNodeSshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetupNodeSshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r SetupNodeSshResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UpdateNodeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeList
	JSON400      *ErrorResponse
	JSON412      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateNodeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNodeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UpdateNodeListResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type PauseClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesCluster
}

// Status returns HTTPResponse.Status
func (r PauseClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PauseClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r PauseClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type PauseClusterReconcileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesCluster
}

// Status returns HTTPResponse.Status
func (r PauseClusterReconcileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PauseClusterReconcileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r PauseClusterReconcileResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteClusterPauseScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PauseSchedule
}

// Status returns HTTPResponse.Status
func (r DeleteClusterPauseScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClusterPauseScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteClusterPauseScheduleResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetClusterPauseScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PauseSchedule
}

// Status returns HTTPResponse.Status
func (r GetClusterPauseScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClusterPauseScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetClusterPauseScheduleResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type SetClusterPauseScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PauseSchedule
}

// Status returns HTTPResponse.Status
func (r SetClusterPauseScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetClusterPauseScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r SetClusterPauseScheduleResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoliciesConfig
}

// Status returns HTTPResponse.Status
func (r GetPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetPoliciesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UpsertPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoliciesConfig
}

// Status returns HTTPResponse.Status
func (r UpsertPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UpsertPoliciesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetProblematicWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterProblematicWorkloads
}

// Status returns HTTPResponse.Status
func (r GetProblematicWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProblematicWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetProblematicWorkloadsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetRebalancedWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RebalancedWorkloads
}

// Status returns HTTPResponse.Status
func (r GetRebalancedWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRebalancedWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetRebalancedWorkloadsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListRebalancingPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RebalancingPlansResponse
}

// Status returns HTTPResponse.Status
func (r ListRebalancingPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRebalancingPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListRebalancingPlansResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type RebalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *RebalancingAccepted
}

// Status returns HTTPResponse.Status
func (r RebalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RebalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r RebalanceResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetRebalancingPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RebalancingPlan
}

// Status returns HTTPResponse.Status
func (r GetRebalancingPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRebalancingPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetRebalancingPlanResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExecuteRebalancingPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RebalancingPlan
}

// Status returns HTTPResponse.Status
func (r ExecuteRebalancingPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteRebalancingPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExecuteRebalancingPlanResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ResumeClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesCluster
}

// Status returns HTTPResponse.Status
func (r ResumeClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResumeClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ResumeClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ResumeClusterReconcileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KubernetesCluster
}

// Status returns HTTPResponse.Status
func (r ResumeClusterReconcileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResumeClusterReconcileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ResumeClusterReconcileResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type TriggerClusterReconcileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TriggerClusterReconcileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TriggerClusterReconcileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r TriggerClusterReconcileResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClusterWorkloads
}

// Status returns HTTPResponse.Status
func (r GetWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetWorkloadsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIListClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1ListClustersResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIListClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIListClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIListClustersResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIRegisterClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIRegisterClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIRegisterClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIRegisterClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetExternalClusterOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationResponse
}

// Status returns HTTPResponse.Status
func (r GetExternalClusterOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExternalClusterOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetExternalClusterOperationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDeleteClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIUpdateClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIUpdateClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIUpdateClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIUpdateClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetCredentialsScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetCredentialsScriptResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCredentialsScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCredentialsScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetCredentialsScriptResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDisconnectClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDisconnectClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDisconnectClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDisconnectClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetEstimatedSavingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EstimatedSavingsResponse
}

// Status returns HTTPResponse.Status
func (r GetEstimatedSavingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEstimatedSavingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetEstimatedSavingsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetKubeconfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetKubeconfigResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetKubeconfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetKubeconfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetKubeconfigResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiMetricsV1beta1GetClusterMetricsResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetMetricsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIListNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiClusterV1beta1ListNodesResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIListNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIListNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIListNodesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIAddNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1AddNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIAddNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIAddNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIAddNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDeleteNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DeleteNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDeleteNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDeleteNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDeleteNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiClusterV1beta1Node
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDrainNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DrainNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDrainNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDrainNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDrainNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIPauseClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIPauseClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIPauseClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIPauseClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIResumeClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIResumeClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIResumeClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIResumeClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPICreateClusterTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1CreateClusterTokenResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPICreateClusterTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPICreateClusterTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPICreateClusterTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationResponse
}

// Status returns HTTPResponse.Status
func (r GetOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetOperationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CurrentUserProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileResponse
}

// Status returns HTTPResponse.Status
func (r CurrentUserProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CurrentUserProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CurrentUserProfileResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UpdateCurrentUserProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfile
}

// Status returns HTTPResponse.Status
func (r UpdateCurrentUserProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCurrentUserProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UpdateCurrentUserProfileResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetPromMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPromMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPromMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetPromMetricsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationsList
}

// Status returns HTTPResponse.Status
func (r ListOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListOrganizationsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateOrganizationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteOrganizationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r GetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetOrganizationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UpdateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UpdateOrganizationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetOrganizationUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUsersList
}

// Status returns HTTPResponse.Status
func (r GetOrganizationUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetOrganizationUsersResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CreateOrganizationUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUser
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CreateOrganizationUserResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type DeleteOrganizationUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r DeleteOrganizationUserResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UpdateOrganizationUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUser
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UpdateOrganizationUserResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ListRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastRegionList
}

// Status returns HTTPResponse.Status
func (r ListRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ListRegionsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type GetUsageReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceUsageReport
}

// Status returns HTTPResponse.Status
func (r GetUsageReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsageReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r GetUsageReportResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetCredentialsScriptTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCredentialsScriptTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCredentialsScriptTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetCredentialsScriptTemplateResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

// ListAddonsWithResponse request returning *ListAddonsResponse
func (c *ClientWithResponses) ListAddonsWithResponse(ctx context.Context, params *ListAddonsParams) (*ListAddonsResponse, error) {
	rsp, err := c.ListAddons(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListAddonsResponse(rsp)
}

// GetAgentInstallScriptWithResponse request returning *GetAgentInstallScriptResponse
func (c *ClientWithResponses) GetAgentInstallScriptWithResponse(ctx context.Context, params *GetAgentInstallScriptParams) (*GetAgentInstallScriptResponse, error) {
	rsp, err := c.GetAgentInstallScript(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentInstallScriptResponse(rsp)
}

// ListAuditEventsWithResponse request returning *ListAuditEventsResponse
func (c *ClientWithResponses) ListAuditEventsWithResponse(ctx context.Context, params *ListAuditEventsParams) (*ListAuditEventsResponse, error) {
	rsp, err := c.ListAuditEvents(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListAuditEventsResponse(rsp)
}

// ListAuthTokensWithResponse request returning *ListAuthTokensResponse
func (c *ClientWithResponses) ListAuthTokensWithResponse(ctx context.Context, params *ListAuthTokensParams) (*ListAuthTokensResponse, error) {
	rsp, err := c.ListAuthTokens(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListAuthTokensResponse(rsp)
}

// CreateAuthTokenWithBodyWithResponse request with arbitrary body returning *CreateAuthTokenResponse
func (c *ClientWithResponses) CreateAuthTokenWithBodyWithResponse(ctx context.Context, params *CreateAuthTokenParams, contentType string, body io.Reader) (*CreateAuthTokenResponse, error) {
	rsp, err := c.CreateAuthTokenWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthTokenWithResponse(ctx context.Context, params *CreateAuthTokenParams, body CreateAuthTokenJSONRequestBody) (*CreateAuthTokenResponse, error) {
	rsp, err := c.CreateAuthToken(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthTokenResponse(rsp)
}

// DeleteAuthTokenWithResponse request returning *DeleteAuthTokenResponse
func (c *ClientWithResponses) DeleteAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId, params *DeleteAuthTokenParams) (*DeleteAuthTokenResponse, error) {
	rsp, err := c.DeleteAuthToken(ctx, authTokenId, params)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthTokenResponse(rsp)
}

// GetAuthTokenWithResponse request returning *GetAuthTokenResponse
func (c *ClientWithResponses) GetAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId, params *GetAuthTokenParams) (*GetAuthTokenResponse, error) {
	rsp, err := c.GetAuthToken(ctx, authTokenId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthTokenResponse(rsp)
}

// UpdateAuthTokenWithBodyWithResponse request with arbitrary body returning *UpdateAuthTokenResponse
func (c *ClientWithResponses) UpdateAuthTokenWithBodyWithResponse(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, contentType string, body io.Reader) (*UpdateAuthTokenResponse, error) {
	rsp, err := c.UpdateAuthTokenWithBody(ctx, authTokenId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthTokenResponse(rsp)
}

func (c *ClientWithResponses) UpdateAuthTokenWithResponse(ctx context.Context, authTokenId AuthTokenId, params *UpdateAuthTokenParams, body UpdateAuthTokenJSONRequestBody) (*UpdateAuthTokenResponse, error) {
	rsp, err := c.UpdateAuthToken(ctx, authTokenId, params, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAuthTokenResponse(rsp)
}

// PlanClusterPriceWithBodyWithResponse request with arbitrary body returning *PlanClusterPriceResponse
func (c *ClientWithResponses) PlanClusterPriceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PlanClusterPriceResponse, error) {
	rsp, err := c.PlanClusterPriceWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePlanClusterPriceResponse(rsp)
}

func (c *ClientWithResponses) PlanClusterPriceWithResponse(ctx context.Context, body PlanClusterPriceJSONRequestBody) (*PlanClusterPriceResponse, error) {
	rsp, err := c.PlanClusterPrice(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePlanClusterPriceResponse(rsp)
}

// ListCloudCredentialsWithResponse request returning *ListCloudCredentialsResponse
func (c *ClientWithResponses) ListCloudCredentialsWithResponse(ctx context.Context) (*ListCloudCredentialsResponse, error) {
	rsp, err := c.ListCloudCredentials(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListCloudCredentialsResponse(rsp)
}

// CreateCloudCredentialsWithBodyWithResponse request with arbitrary body returning *CreateCloudCredentialsResponse
func (c *ClientWithResponses) CreateCloudCredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateCloudCredentialsResponse, error) {
	rsp, err := c.CreateCloudCredentialsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateCloudCredentialsResponse(rsp)
}

func (c *ClientWithResponses) CreateCloudCredentialsWithResponse(ctx context.Context, body CreateCloudCredentialsJSONRequestBody) (*CreateCloudCredentialsResponse, error) {
	rsp, err := c.CreateCloudCredentials(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateCloudCredentialsResponse(rsp)
}

// DeleteCloudCredentialsWithResponse request returning *DeleteCloudCredentialsResponse
func (c *ClientWithResponses) DeleteCloudCredentialsWithResponse(ctx context.Context, credentialsId CredentialsId) (*DeleteCloudCredentialsResponse, error) {
	rsp, err := c.DeleteCloudCredentials(ctx, credentialsId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCloudCredentialsResponse(rsp)
}

// GetCloudCredentialsWithResponse request returning *GetCloudCredentialsResponse
func (c *ClientWithResponses) GetCloudCredentialsWithResponse(ctx context.Context, credentialsId CredentialsId) (*GetCloudCredentialsResponse, error) {
	rsp, err := c.GetCloudCredentials(ctx, credentialsId)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudCredentialsResponse(rsp)
}

// DeleteGslbWithBodyWithResponse request with arbitrary body returning *DeleteGslbResponse
func (c *ClientWithResponses) DeleteGslbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*DeleteGslbResponse, error) {
	rsp, err := c.DeleteGslbWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGslbResponse(rsp)
}

func (c *ClientWithResponses) DeleteGslbWithResponse(ctx context.Context, body DeleteGslbJSONRequestBody) (*DeleteGslbResponse, error) {
	rsp, err := c.DeleteGslb(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGslbResponse(rsp)
}

// CreateOrUpdateGslbWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateGslbResponse
func (c *ClientWithResponses) CreateOrUpdateGslbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateOrUpdateGslbResponse, error) {
	rsp, err := c.CreateOrUpdateGslbWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateGslbResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateGslbWithResponse(ctx context.Context, body CreateOrUpdateGslbJSONRequestBody) (*CreateOrUpdateGslbResponse, error) {
	rsp, err := c.CreateOrUpdateGslb(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateGslbResponse(rsp)
}

// GetInstanceTypesWithResponse request returning *GetInstanceTypesResponse
func (c *ClientWithResponses) GetInstanceTypesWithResponse(ctx context.Context, params *GetInstanceTypesParams) (*GetInstanceTypesResponse, error) {
	rsp, err := c.GetInstanceTypes(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetInstanceTypesResponse(rsp)
}

// CreateInvitationWithBodyWithResponse request with arbitrary body returning *CreateInvitationResponse
func (c *ClientWithResponses) CreateInvitationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateInvitationResponse, error) {
	rsp, err := c.CreateInvitationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateInvitationResponse(rsp)
}

func (c *ClientWithResponses) CreateInvitationWithResponse(ctx context.Context, body CreateInvitationJSONRequestBody) (*CreateInvitationResponse, error) {
	rsp, err := c.CreateInvitation(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateInvitationResponse(rsp)
}

// ClaimInvitationWithBodyWithResponse request with arbitrary body returning *ClaimInvitationResponse
func (c *ClientWithResponses) ClaimInvitationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ClaimInvitationResponse, error) {
	rsp, err := c.ClaimInvitationWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseClaimInvitationResponse(rsp)
}

func (c *ClientWithResponses) ClaimInvitationWithResponse(ctx context.Context, id string, body ClaimInvitationJSONRequestBody) (*ClaimInvitationResponse, error) {
	rsp, err := c.ClaimInvitation(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseClaimInvitationResponse(rsp)
}

// ListKubernetesClustersWithResponse request returning *ListKubernetesClustersResponse
func (c *ClientWithResponses) ListKubernetesClustersWithResponse(ctx context.Context, params *ListKubernetesClustersParams) (*ListKubernetesClustersResponse, error) {
	rsp, err := c.ListKubernetesClusters(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseListKubernetesClustersResponse(rsp)
}

// CreateNewClusterWithBodyWithResponse request with arbitrary body returning *CreateNewClusterResponse
func (c *ClientWithResponses) CreateNewClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateNewClusterResponse, error) {
	rsp, err := c.CreateNewClusterWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewClusterResponse(rsp)
}

func (c *ClientWithResponses) CreateNewClusterWithResponse(ctx context.Context, body CreateNewClusterJSONRequestBody) (*CreateNewClusterResponse, error) {
	rsp, err := c.CreateNewCluster(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewClusterResponse(rsp)
}

// PrometheusRawMetricsWithResponse request returning *PrometheusRawMetricsResponse
func (c *ClientWithResponses) PrometheusRawMetricsWithResponse(ctx context.Context, params *PrometheusRawMetricsParams) (*PrometheusRawMetricsResponse, error) {
	rsp, err := c.PrometheusRawMetrics(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParsePrometheusRawMetricsResponse(rsp)
}

// DeleteClusterWithResponse request returning *DeleteClusterResponse
func (c *ClientWithResponses) DeleteClusterWithResponse(ctx context.Context, clusterId ClusterId) (*DeleteClusterResponse, error) {
	rsp, err := c.DeleteCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterResponse(rsp)
}

// GetClusterWithResponse request returning *GetClusterResponse
func (c *ClientWithResponses) GetClusterWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterResponse, error) {
	rsp, err := c.GetCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterResponse(rsp)
}

// UpdateClusterWithBodyWithResponse request with arbitrary body returning *UpdateClusterResponse
func (c *ClientWithResponses) UpdateClusterWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*UpdateClusterResponse, error) {
	rsp, err := c.UpdateClusterWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClusterResponse(rsp)
}

func (c *ClientWithResponses) UpdateClusterWithResponse(ctx context.Context, clusterId ClusterId, body UpdateClusterJSONRequestBody) (*UpdateClusterResponse, error) {
	rsp, err := c.UpdateCluster(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClusterResponse(rsp)
}

// ClusterActionsAPIPollClusterActionsWithResponse request returning *ClusterActionsAPIPollClusterActionsResponse
func (c *ClientWithResponses) ClusterActionsAPIPollClusterActionsWithResponse(ctx context.Context, clusterId string) (*ClusterActionsAPIPollClusterActionsResponse, error) {
	rsp, err := c.ClusterActionsAPIPollClusterActions(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIPollClusterActionsResponse(rsp)
}

// ClusterActionsAPIIngestLogsWithBodyWithResponse request with arbitrary body returning *ClusterActionsAPIIngestLogsResponse
func (c *ClientWithResponses) ClusterActionsAPIIngestLogsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ClusterActionsAPIIngestLogsResponse, error) {
	rsp, err := c.ClusterActionsAPIIngestLogsWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIIngestLogsResponse(rsp)
}

func (c *ClientWithResponses) ClusterActionsAPIIngestLogsWithResponse(ctx context.Context, clusterId string, body ClusterActionsAPIIngestLogsJSONRequestBody) (*ClusterActionsAPIIngestLogsResponse, error) {
	rsp, err := c.ClusterActionsAPIIngestLogs(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIIngestLogsResponse(rsp)
}

// ClusterActionsAPIAckClusterActionWithBodyWithResponse request with arbitrary body returning *ClusterActionsAPIAckClusterActionResponse
func (c *ClientWithResponses) ClusterActionsAPIAckClusterActionWithBodyWithResponse(ctx context.Context, clusterId string, actionId string, contentType string, body io.Reader) (*ClusterActionsAPIAckClusterActionResponse, error) {
	rsp, err := c.ClusterActionsAPIAckClusterActionWithBody(ctx, clusterId, actionId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIAckClusterActionResponse(rsp)
}

func (c *ClientWithResponses) ClusterActionsAPIAckClusterActionWithResponse(ctx context.Context, clusterId string, actionId string, body ClusterActionsAPIAckClusterActionJSONRequestBody) (*ClusterActionsAPIAckClusterActionResponse, error) {
	rsp, err := c.ClusterActionsAPIAckClusterAction(ctx, clusterId, actionId, body)
	if err != nil {
		return nil, err
	}
	return ParseClusterActionsAPIAckClusterActionResponse(rsp)
}

// GetClusterAddonsWithResponse request returning *GetClusterAddonsResponse
func (c *ClientWithResponses) GetClusterAddonsWithResponse(ctx context.Context, clusterId string) (*GetClusterAddonsResponse, error) {
	rsp, err := c.GetClusterAddons(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterAddonsResponse(rsp)
}

// InstallClusterAddonWithBodyWithResponse request with arbitrary body returning *InstallClusterAddonResponse
func (c *ClientWithResponses) InstallClusterAddonWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*InstallClusterAddonResponse, error) {
	rsp, err := c.InstallClusterAddonWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseInstallClusterAddonResponse(rsp)
}

func (c *ClientWithResponses) InstallClusterAddonWithResponse(ctx context.Context, clusterId string, body InstallClusterAddonJSONRequestBody) (*InstallClusterAddonResponse, error) {
	rsp, err := c.InstallClusterAddon(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseInstallClusterAddonResponse(rsp)
}

// DeleteClusterAddonWithResponse request returning *DeleteClusterAddonResponse
func (c *ClientWithResponses) DeleteClusterAddonWithResponse(ctx context.Context, clusterId string, repository string, name string) (*DeleteClusterAddonResponse, error) {
	rsp, err := c.DeleteClusterAddon(ctx, clusterId, repository, name)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterAddonResponse(rsp)
}

// GetClusterAddonWithResponse request returning *GetClusterAddonResponse
func (c *ClientWithResponses) GetClusterAddonWithResponse(ctx context.Context, clusterId string, repository string, name string) (*GetClusterAddonResponse, error) {
	rsp, err := c.GetClusterAddon(ctx, clusterId, repository, name)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterAddonResponse(rsp)
}

// UpdateClusterAddonWithBodyWithResponse request with arbitrary body returning *UpdateClusterAddonResponse
func (c *ClientWithResponses) UpdateClusterAddonWithBodyWithResponse(ctx context.Context, clusterId string, repository string, name string, contentType string, body io.Reader) (*UpdateClusterAddonResponse, error) {
	rsp, err := c.UpdateClusterAddonWithBody(ctx, clusterId, repository, name, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClusterAddonResponse(rsp)
}

func (c *ClientWithResponses) UpdateClusterAddonWithResponse(ctx context.Context, clusterId string, repository string, name string, body UpdateClusterAddonJSONRequestBody) (*UpdateClusterAddonResponse, error) {
	rsp, err := c.UpdateClusterAddon(ctx, clusterId, repository, name, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateClusterAddonResponse(rsp)
}

// ArchiveClusterWithResponse request returning *ArchiveClusterResponse
func (c *ClientWithResponses) ArchiveClusterWithResponse(ctx context.Context, clusterId ClusterId) (*ArchiveClusterResponse, error) {
	rsp, err := c.ArchiveCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseArchiveClusterResponse(rsp)
}

// GetCostHistoryWithResponse request returning *GetCostHistoryResponse
func (c *ClientWithResponses) GetCostHistoryWithResponse(ctx context.Context, clusterId ClusterId, params *GetCostHistoryParams) (*GetCostHistoryResponse, error) {
	rsp, err := c.GetCostHistory(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCostHistoryResponse(rsp)
}

// GetDashboardMetricsCommonStatsWithResponse request returning *GetDashboardMetricsCommonStatsResponse
func (c *ClientWithResponses) GetDashboardMetricsCommonStatsWithResponse(ctx context.Context, clusterId ClusterId) (*GetDashboardMetricsCommonStatsResponse, error) {
	rsp, err := c.GetDashboardMetricsCommonStats(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardMetricsCommonStatsResponse(rsp)
}

// GetDashboardMetricsCpuUsageWithResponse request returning *GetDashboardMetricsCpuUsageResponse
func (c *ClientWithResponses) GetDashboardMetricsCpuUsageWithResponse(ctx context.Context, clusterId ClusterId, params *GetDashboardMetricsCpuUsageParams) (*GetDashboardMetricsCpuUsageResponse, error) {
	rsp, err := c.GetDashboardMetricsCpuUsage(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardMetricsCpuUsageResponse(rsp)
}

// GetDashboardMetricsMemoryUsageWithResponse request returning *GetDashboardMetricsMemoryUsageResponse
func (c *ClientWithResponses) GetDashboardMetricsMemoryUsageWithResponse(ctx context.Context, clusterId ClusterId, params *GetDashboardMetricsMemoryUsageParams) (*GetDashboardMetricsMemoryUsageResponse, error) {
	rsp, err := c.GetDashboardMetricsMemoryUsage(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardMetricsMemoryUsageResponse(rsp)
}

// GetClusterFeedbackEventsWithResponse request returning *GetClusterFeedbackEventsResponse
func (c *ClientWithResponses) GetClusterFeedbackEventsWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterFeedbackEventsResponse, error) {
	rsp, err := c.GetClusterFeedbackEvents(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterFeedbackEventsResponse(rsp)
}

// GetClusterHealthWithResponse request returning *GetClusterHealthResponse
func (c *ClientWithResponses) GetClusterHealthWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterHealthResponse, error) {
	rsp, err := c.GetClusterHealth(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterHealthResponse(rsp)
}

// GetClusterIngressControllerWithResponse request returning *GetClusterIngressControllerResponse
func (c *ClientWithResponses) GetClusterIngressControllerWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterIngressControllerResponse, error) {
	rsp, err := c.GetClusterIngressController(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterIngressControllerResponse(rsp)
}

// GetClusterKubeconfigWithResponse request returning *GetClusterKubeconfigResponse
func (c *ClientWithResponses) GetClusterKubeconfigWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterKubeconfigResponse, error) {
	rsp, err := c.GetClusterKubeconfig(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterKubeconfigResponse(rsp)
}

// GetLegacyClusterAddonsWithResponse request returning *GetLegacyClusterAddonsResponse
func (c *ClientWithResponses) GetLegacyClusterAddonsWithResponse(ctx context.Context, clusterId ClusterId) (*GetLegacyClusterAddonsResponse, error) {
	rsp, err := c.GetLegacyClusterAddons(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetLegacyClusterAddonsResponse(rsp)
}

// ConfigureClusterAddonsWithBodyWithResponse request with arbitrary body returning *ConfigureClusterAddonsResponse
func (c *ClientWithResponses) ConfigureClusterAddonsWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*ConfigureClusterAddonsResponse, error) {
	rsp, err := c.ConfigureClusterAddonsWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseConfigureClusterAddonsResponse(rsp)
}

func (c *ClientWithResponses) ConfigureClusterAddonsWithResponse(ctx context.Context, clusterId ClusterId, body ConfigureClusterAddonsJSONRequestBody) (*ConfigureClusterAddonsResponse, error) {
	rsp, err := c.ConfigureClusterAddons(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseConfigureClusterAddonsResponse(rsp)
}

// GetClusterMetricsWithResponse request returning *GetClusterMetricsResponse
func (c *ClientWithResponses) GetClusterMetricsWithResponse(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsParams) (*GetClusterMetricsResponse, error) {
	rsp, err := c.GetClusterMetrics(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterMetricsResponse(rsp)
}

// GetClusterMetricsCpuUsageWithResponse request returning *GetClusterMetricsCpuUsageResponse
func (c *ClientWithResponses) GetClusterMetricsCpuUsageWithResponse(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsCpuUsageParams) (*GetClusterMetricsCpuUsageResponse, error) {
	rsp, err := c.GetClusterMetricsCpuUsage(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterMetricsCpuUsageResponse(rsp)
}

// GetClusterMetricsGaugesWithResponse request returning *GetClusterMetricsGaugesResponse
func (c *ClientWithResponses) GetClusterMetricsGaugesWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterMetricsGaugesResponse, error) {
	rsp, err := c.GetClusterMetricsGauges(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterMetricsGaugesResponse(rsp)
}

// GetClusterMetricsMemoryUsageWithResponse request returning *GetClusterMetricsMemoryUsageResponse
func (c *ClientWithResponses) GetClusterMetricsMemoryUsageWithResponse(ctx context.Context, clusterId ClusterId, params *GetClusterMetricsMemoryUsageParams) (*GetClusterMetricsMemoryUsageResponse, error) {
	rsp, err := c.GetClusterMetricsMemoryUsage(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterMetricsMemoryUsageResponse(rsp)
}

// GetNodeConstraintsWithResponse request returning *GetNodeConstraintsResponse
func (c *ClientWithResponses) GetNodeConstraintsWithResponse(ctx context.Context, clusterId ClusterId) (*GetNodeConstraintsResponse, error) {
	rsp, err := c.GetNodeConstraints(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetNodeConstraintsResponse(rsp)
}

// GetClusterNodesWithResponse request returning *GetClusterNodesResponse
func (c *ClientWithResponses) GetClusterNodesWithResponse(ctx context.Context, clusterId ClusterId, params *GetClusterNodesParams) (*GetClusterNodesResponse, error) {
	rsp, err := c.GetClusterNodes(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterNodesResponse(rsp)
}

// AddClusterNodeWithBodyWithResponse request with arbitrary body returning *AddClusterNodeResponse
func (c *ClientWithResponses) AddClusterNodeWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*AddClusterNodeResponse, error) {
	rsp, err := c.AddClusterNodeWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAddClusterNodeResponse(rsp)
}

func (c *ClientWithResponses) AddClusterNodeWithResponse(ctx context.Context, clusterId ClusterId, body AddClusterNodeJSONRequestBody) (*AddClusterNodeResponse, error) {
	rsp, err := c.AddClusterNode(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseAddClusterNodeResponse(rsp)
}

// DeleteClusterNodeWithResponse request returning *DeleteClusterNodeResponse
func (c *ClientWithResponses) DeleteClusterNodeWithResponse(ctx context.Context, clusterId ClusterId, nodeId string) (*DeleteClusterNodeResponse, error) {
	rsp, err := c.DeleteClusterNode(ctx, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterNodeResponse(rsp)
}

// GetClusterNodeWithResponse request returning *GetClusterNodeResponse
func (c *ClientWithResponses) GetClusterNodeWithResponse(ctx context.Context, clusterId ClusterId, nodeId string) (*GetClusterNodeResponse, error) {
	rsp, err := c.GetClusterNode(ctx, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterNodeResponse(rsp)
}

// CloseNodeSshWithResponse request returning *CloseNodeSshResponse
func (c *ClientWithResponses) CloseNodeSshWithResponse(ctx context.Context, clusterId ClusterId, nodeId string) (*CloseNodeSshResponse, error) {
	rsp, err := c.CloseNodeSsh(ctx, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	return ParseCloseNodeSshResponse(rsp)
}

// InterruptClusterNodeWithResponse request returning *InterruptClusterNodeResponse
func (c *ClientWithResponses) InterruptClusterNodeWithResponse(ctx context.Context, clusterId ClusterId, nodeId string) (*InterruptClusterNodeResponse, error) {
	rsp, err := c.InterruptClusterNode(ctx, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	return ParseInterruptClusterNodeResponse(rsp)
}

// SetupNodeSshWithBodyWithResponse request with arbitrary body returning *SetupNodeSshResponse
func (c *ClientWithResponses) SetupNodeSshWithBodyWithResponse(ctx context.Context, clusterId ClusterId, nodeId string, contentType string, body io.Reader) (*SetupNodeSshResponse, error) {
	rsp, err := c.SetupNodeSshWithBody(ctx, clusterId, nodeId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSetupNodeSshResponse(rsp)
}

func (c *ClientWithResponses) SetupNodeSshWithResponse(ctx context.Context, clusterId ClusterId, nodeId string, body SetupNodeSshJSONRequestBody) (*SetupNodeSshResponse, error) {
	rsp, err := c.SetupNodeSsh(ctx, clusterId, nodeId, body)
	if err != nil {
		return nil, err
	}
	return ParseSetupNodeSshResponse(rsp)
}

// UpdateNodeListWithBodyWithResponse request with arbitrary body returning *UpdateNodeListResponse
func (c *ClientWithResponses) UpdateNodeListWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*UpdateNodeListResponse, error) {
	rsp, err := c.UpdateNodeListWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNodeListResponse(rsp)
}

func (c *ClientWithResponses) UpdateNodeListWithResponse(ctx context.Context, clusterId ClusterId, body UpdateNodeListJSONRequestBody) (*UpdateNodeListResponse, error) {
	rsp, err := c.UpdateNodeList(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNodeListResponse(rsp)
}

// PauseClusterWithBodyWithResponse request with arbitrary body returning *PauseClusterResponse
func (c *ClientWithResponses) PauseClusterWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*PauseClusterResponse, error) {
	rsp, err := c.PauseClusterWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePauseClusterResponse(rsp)
}

func (c *ClientWithResponses) PauseClusterWithResponse(ctx context.Context, clusterId ClusterId, body PauseClusterJSONRequestBody) (*PauseClusterResponse, error) {
	rsp, err := c.PauseCluster(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParsePauseClusterResponse(rsp)
}

// PauseClusterReconcileWithResponse request returning *PauseClusterReconcileResponse
func (c *ClientWithResponses) PauseClusterReconcileWithResponse(ctx context.Context, clusterId ClusterId) (*PauseClusterReconcileResponse, error) {
	rsp, err := c.PauseClusterReconcile(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParsePauseClusterReconcileResponse(rsp)
}

// DeleteClusterPauseScheduleWithResponse request returning *DeleteClusterPauseScheduleResponse
func (c *ClientWithResponses) DeleteClusterPauseScheduleWithResponse(ctx context.Context, clusterId ClusterId) (*DeleteClusterPauseScheduleResponse, error) {
	rsp, err := c.DeleteClusterPauseSchedule(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClusterPauseScheduleResponse(rsp)
}

// GetClusterPauseScheduleWithResponse request returning *GetClusterPauseScheduleResponse
func (c *ClientWithResponses) GetClusterPauseScheduleWithResponse(ctx context.Context, clusterId ClusterId) (*GetClusterPauseScheduleResponse, error) {
	rsp, err := c.GetClusterPauseSchedule(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetClusterPauseScheduleResponse(rsp)
}

// SetClusterPauseScheduleWithBodyWithResponse request with arbitrary body returning *SetClusterPauseScheduleResponse
func (c *ClientWithResponses) SetClusterPauseScheduleWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*SetClusterPauseScheduleResponse, error) {
	rsp, err := c.SetClusterPauseScheduleWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSetClusterPauseScheduleResponse(rsp)
}

func (c *ClientWithResponses) SetClusterPauseScheduleWithResponse(ctx context.Context, clusterId ClusterId, body SetClusterPauseScheduleJSONRequestBody) (*SetClusterPauseScheduleResponse, error) {
	rsp, err := c.SetClusterPauseSchedule(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseSetClusterPauseScheduleResponse(rsp)
}

// GetPoliciesWithResponse request returning *GetPoliciesResponse
func (c *ClientWithResponses) GetPoliciesWithResponse(ctx context.Context, clusterId ClusterId) (*GetPoliciesResponse, error) {
	rsp, err := c.GetPolicies(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetPoliciesResponse(rsp)
}

// UpsertPoliciesWithBodyWithResponse request with arbitrary body returning *UpsertPoliciesResponse
func (c *ClientWithResponses) UpsertPoliciesWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*UpsertPoliciesResponse, error) {
	rsp, err := c.UpsertPoliciesWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpsertPoliciesResponse(rsp)
}

func (c *ClientWithResponses) UpsertPoliciesWithResponse(ctx context.Context, clusterId ClusterId, body UpsertPoliciesJSONRequestBody) (*UpsertPoliciesResponse, error) {
	rsp, err := c.UpsertPolicies(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseUpsertPoliciesResponse(rsp)
}

// GetProblematicWorkloadsWithResponse request returning *GetProblematicWorkloadsResponse
func (c *ClientWithResponses) GetProblematicWorkloadsWithResponse(ctx context.Context, clusterId ClusterId) (*GetProblematicWorkloadsResponse, error) {
	rsp, err := c.GetProblematicWorkloads(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetProblematicWorkloadsResponse(rsp)
}

// GetRebalancedWorkloadsWithResponse request returning *GetRebalancedWorkloadsResponse
func (c *ClientWithResponses) GetRebalancedWorkloadsWithResponse(ctx context.Context, clusterId ClusterId) (*GetRebalancedWorkloadsResponse, error) {
	rsp, err := c.GetRebalancedWorkloads(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetRebalancedWorkloadsResponse(rsp)
}

// ListRebalancingPlansWithResponse request returning *ListRebalancingPlansResponse
func (c *ClientWithResponses) ListRebalancingPlansWithResponse(ctx context.Context, clusterId ClusterId, params *ListRebalancingPlansParams) (*ListRebalancingPlansResponse, error) {
	rsp, err := c.ListRebalancingPlans(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseListRebalancingPlansResponse(rsp)
}

// RebalanceWithBodyWithResponse request with arbitrary body returning *RebalanceResponse
func (c *ClientWithResponses) RebalanceWithBodyWithResponse(ctx context.Context, clusterId ClusterId, contentType string, body io.Reader) (*RebalanceResponse, error) {
	rsp, err := c.RebalanceWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRebalanceResponse(rsp)
}

func (c *ClientWithResponses) RebalanceWithResponse(ctx context.Context, clusterId ClusterId, body RebalanceJSONRequestBody) (*RebalanceResponse, error) {
	rsp, err := c.Rebalance(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseRebalanceResponse(rsp)
}

// GetRebalancingPlanWithResponse request returning *GetRebalancingPlanResponse
func (c *ClientWithResponses) GetRebalancingPlanWithResponse(ctx context.Context, clusterId ClusterId, rebalancingPlanId string) (*GetRebalancingPlanResponse, error) {
	rsp, err := c.GetRebalancingPlan(ctx, clusterId, rebalancingPlanId)
	if err != nil {
		return nil, err
	}
	return ParseGetRebalancingPlanResponse(rsp)
}

// ExecuteRebalancingPlanWithBodyWithResponse request with arbitrary body returning *ExecuteRebalancingPlanResponse
func (c *ClientWithResponses) ExecuteRebalancingPlanWithBodyWithResponse(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, contentType string, body io.Reader) (*ExecuteRebalancingPlanResponse, error) {
	rsp, err := c.ExecuteRebalancingPlanWithBody(ctx, clusterId, rebalancingPlanId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExecuteRebalancingPlanResponse(rsp)
}

func (c *ClientWithResponses) ExecuteRebalancingPlanWithResponse(ctx context.Context, clusterId ClusterId, rebalancingPlanId string, body ExecuteRebalancingPlanJSONRequestBody) (*ExecuteRebalancingPlanResponse, error) {
	rsp, err := c.ExecuteRebalancingPlan(ctx, clusterId, rebalancingPlanId, body)
	if err != nil {
		return nil, err
	}
	return ParseExecuteRebalancingPlanResponse(rsp)
}

// ResumeClusterWithResponse request returning *ResumeClusterResponse
func (c *ClientWithResponses) ResumeClusterWithResponse(ctx context.Context, clusterId ClusterId) (*ResumeClusterResponse, error) {
	rsp, err := c.ResumeCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseResumeClusterResponse(rsp)
}

// ResumeClusterReconcileWithResponse request returning *ResumeClusterReconcileResponse
func (c *ClientWithResponses) ResumeClusterReconcileWithResponse(ctx context.Context, clusterId ClusterId) (*ResumeClusterReconcileResponse, error) {
	rsp, err := c.ResumeClusterReconcile(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseResumeClusterReconcileResponse(rsp)
}

// TriggerClusterReconcileWithResponse request returning *TriggerClusterReconcileResponse
func (c *ClientWithResponses) TriggerClusterReconcileWithResponse(ctx context.Context, clusterId ClusterId) (*TriggerClusterReconcileResponse, error) {
	rsp, err := c.TriggerClusterReconcile(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseTriggerClusterReconcileResponse(rsp)
}

// GetWorkloadsWithResponse request returning *GetWorkloadsResponse
func (c *ClientWithResponses) GetWorkloadsWithResponse(ctx context.Context, clusterId ClusterId) (*GetWorkloadsResponse, error) {
	rsp, err := c.GetWorkloads(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkloadsResponse(rsp)
}

// ExternalClusterAPIListClustersWithResponse request returning *ExternalClusterAPIListClustersResponse
func (c *ClientWithResponses) ExternalClusterAPIListClustersWithResponse(ctx context.Context) (*ExternalClusterAPIListClustersResponse, error) {
	rsp, err := c.ExternalClusterAPIListClusters(ctx)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIListClustersResponse(rsp)
}

// ExternalClusterAPIRegisterClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIRegisterClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIRegisterClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ExternalClusterAPIRegisterClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIRegisterClusterWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIRegisterClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIRegisterClusterWithResponse(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody) (*ExternalClusterAPIRegisterClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIRegisterCluster(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIRegisterClusterResponse(rsp)
}

// GetExternalClusterOperationWithResponse request returning *GetExternalClusterOperationResponse
func (c *ClientWithResponses) GetExternalClusterOperationWithResponse(ctx context.Context, id string) (*GetExternalClusterOperationResponse, error) {
	rsp, err := c.GetExternalClusterOperation(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetExternalClusterOperationResponse(rsp)
}

// ExternalClusterAPIDeleteClusterWithResponse request returning *ExternalClusterAPIDeleteClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIDeleteClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDeleteClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDeleteCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDeleteClusterResponse(rsp)
}

// ExternalClusterAPIGetClusterWithResponse request returning *ExternalClusterAPIGetClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIGetClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetClusterResponse(rsp)
}

// ExternalClusterAPIUpdateClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIUpdateClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIUpdateClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateClusterWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody) (*ExternalClusterAPIUpdateClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateCluster(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterResponse(rsp)
}

// ExternalClusterAPIGetCredentialsScriptWithResponse request returning *ExternalClusterAPIGetCredentialsScriptResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCredentialsScriptWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetCredentialsScriptResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCredentialsScript(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCredentialsScriptResponse(rsp)
}

// ExternalClusterAPIDisconnectClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIDisconnectClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIDisconnectClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDisconnectClusterWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDisconnectClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIDisconnectClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDisconnectCluster(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDisconnectClusterResponse(rsp)
}

// GetEstimatedSavingsWithResponse request returning *GetEstimatedSavingsResponse
func (c *ClientWithResponses) GetEstimatedSavingsWithResponse(ctx context.Context, clusterId ClusterId) (*GetEstimatedSavingsResponse, error) {
	rsp, err := c.GetEstimatedSavings(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseGetEstimatedSavingsResponse(rsp)
}

// ExternalClusterAPIGetKubeconfigWithResponse request returning *ExternalClusterAPIGetKubeconfigResponse
func (c *ClientWithResponses) ExternalClusterAPIGetKubeconfigWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetKubeconfigResponse, error) {
	rsp, err := c.ExternalClusterAPIGetKubeconfig(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetKubeconfigResponse(rsp)
}

// ExternalClusterAPIGetMetricsWithResponse request returning *ExternalClusterAPIGetMetricsResponse
func (c *ClientWithResponses) ExternalClusterAPIGetMetricsWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIGetMetricsParams) (*ExternalClusterAPIGetMetricsResponse, error) {
	rsp, err := c.ExternalClusterAPIGetMetrics(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetMetricsResponse(rsp)
}

// ExternalClusterAPIListNodesWithResponse request returning *ExternalClusterAPIListNodesResponse
func (c *ClientWithResponses) ExternalClusterAPIListNodesWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams) (*ExternalClusterAPIListNodesResponse, error) {
	rsp, err := c.ExternalClusterAPIListNodes(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIListNodesResponse(rsp)
}

// ExternalClusterAPIAddNodeWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIAddNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIAddNodeWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIAddNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIAddNodeWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIAddNodeResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIAddNodeWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody) (*ExternalClusterAPIAddNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIAddNode(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIAddNodeResponse(rsp)
}

// ExternalClusterAPIDeleteNodeWithResponse request returning *ExternalClusterAPIDeleteNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIDeleteNodeWithResponse(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams) (*ExternalClusterAPIDeleteNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDeleteNode(ctx, clusterId, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDeleteNodeResponse(rsp)
}

// ExternalClusterAPIGetNodeWithResponse request returning *ExternalClusterAPIGetNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIGetNodeWithResponse(ctx context.Context, clusterId string, nodeId string) (*ExternalClusterAPIGetNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIGetNode(ctx, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetNodeResponse(rsp)
}

// ExternalClusterAPIDrainNodeWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIDrainNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIDrainNodeWithBodyWithResponse(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader) (*ExternalClusterAPIDrainNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDrainNodeWithBody(ctx, clusterId, nodeId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDrainNodeResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIDrainNodeWithResponse(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody) (*ExternalClusterAPIDrainNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDrainNode(ctx, clusterId, nodeId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDrainNodeResponse(rsp)
}

// ExternalClusterAPIPauseClusterWithResponse request returning *ExternalClusterAPIPauseClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIPauseClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIPauseClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIPauseCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIPauseClusterResponse(rsp)
}

// ExternalClusterAPIResumeClusterWithResponse request returning *ExternalClusterAPIResumeClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIResumeClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIResumeClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIResumeCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIResumeClusterResponse(rsp)
}

// ExternalClusterAPICreateClusterTokenWithResponse request returning *ExternalClusterAPICreateClusterTokenResponse
func (c *ClientWithResponses) ExternalClusterAPICreateClusterTokenWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPICreateClusterTokenResponse, error) {
	rsp, err := c.ExternalClusterAPICreateClusterToken(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPICreateClusterTokenResponse(rsp)
}

// GetOperationWithResponse request returning *GetOperationResponse
func (c *ClientWithResponses) GetOperationWithResponse(ctx context.Context, id string) (*GetOperationResponse, error) {
	rsp, err := c.GetOperation(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetOperationResponse(rsp)
}

// CurrentUserProfileWithResponse request returning *CurrentUserProfileResponse
func (c *ClientWithResponses) CurrentUserProfileWithResponse(ctx context.Context) (*CurrentUserProfileResponse, error) {
	rsp, err := c.CurrentUserProfile(ctx)
	if err != nil {
		return nil, err
	}
	return ParseCurrentUserProfileResponse(rsp)
}

// UpdateCurrentUserProfileWithBodyWithResponse request with arbitrary body returning *UpdateCurrentUserProfileResponse
func (c *ClientWithResponses) UpdateCurrentUserProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UpdateCurrentUserProfileResponse, error) {
	rsp, err := c.UpdateCurrentUserProfileWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCurrentUserProfileResponse(rsp)
}

func (c *ClientWithResponses) UpdateCurrentUserProfileWithResponse(ctx context.Context, body UpdateCurrentUserProfileJSONRequestBody) (*UpdateCurrentUserProfileResponse, error) {
	rsp, err := c.UpdateCurrentUserProfile(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCurrentUserProfileResponse(rsp)
}

// GetPromMetricsWithResponse request returning *GetPromMetricsResponse
func (c *ClientWithResponses) GetPromMetricsWithResponse(ctx context.Context, params *GetPromMetricsParams) (*GetPromMetricsResponse, error) {
	rsp, err := c.GetPromMetrics(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPromMetricsResponse(rsp)
}

// ListOrganizationsWithResponse request returning *ListOrganizationsResponse
func (c *ClientWithResponses) ListOrganizationsWithResponse(ctx context.Context) (*ListOrganizationsResponse, error) {
	rsp, err := c.ListOrganizations(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationsResponse(rsp)
}

// CreateOrganizationWithBodyWithResponse request with arbitrary body returning *CreateOrganizationResponse
func (c *ClientWithResponses) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganizationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganization(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

// DeleteOrganizationWithResponse request returning *DeleteOrganizationResponse
func (c *ClientWithResponses) DeleteOrganizationWithResponse(ctx context.Context, id string) (*DeleteOrganizationResponse, error) {
	rsp, err := c.DeleteOrganization(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationResponse(rsp)
}

// GetOrganizationWithResponse request returning *GetOrganizationResponse
func (c *ClientWithResponses) GetOrganizationWithResponse(ctx context.Context, id string) (*GetOrganizationResponse, error) {
	rsp, err := c.GetOrganization(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationResponse(rsp)
}

// UpdateOrganizationWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationResponse
func (c *ClientWithResponses) UpdateOrganizationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganizationWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationWithResponse(ctx context.Context, id string, body UpdateOrganizationJSONRequestBody) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganization(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationResponse(rsp)
}

// GetOrganizationUsersWithResponse request returning *GetOrganizationUsersResponse
func (c *ClientWithResponses) GetOrganizationUsersWithResponse(ctx context.Context, id string) (*GetOrganizationUsersResponse, error) {
	rsp, err := c.GetOrganizationUsers(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationUsersResponse(rsp)
}

// CreateOrganizationUserWithBodyWithResponse request with arbitrary body returning *CreateOrganizationUserResponse
func (c *ClientWithResponses) CreateOrganizationUserWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*CreateOrganizationUserResponse, error) {
	rsp, err := c.CreateOrganizationUserWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationUserResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationUserWithResponse(ctx context.Context, id string, body CreateOrganizationUserJSONRequestBody) (*CreateOrganizationUserResponse, error) {
	rsp, err := c.CreateOrganizationUser(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationUserResponse(rsp)
}

// DeleteOrganizationUserWithResponse request returning *DeleteOrganizationUserResponse
func (c *ClientWithResponses) DeleteOrganizationUserWithResponse(ctx context.Context, id string, userId string) (*DeleteOrganizationUserResponse, error) {
	rsp, err := c.DeleteOrganizationUser(ctx, id, userId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationUserResponse(rsp)
}

// UpdateOrganizationUserWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationUserResponse
func (c *ClientWithResponses) UpdateOrganizationUserWithBodyWithResponse(ctx context.Context, id string, userId string, contentType string, body io.Reader) (*UpdateOrganizationUserResponse, error) {
	rsp, err := c.UpdateOrganizationUserWithBody(ctx, id, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationUserWithResponse(ctx context.Context, id string, userId string, body UpdateOrganizationUserJSONRequestBody) (*UpdateOrganizationUserResponse, error) {
	rsp, err := c.UpdateOrganizationUser(ctx, id, userId, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationUserResponse(rsp)
}

// ListRegionsWithResponse request returning *ListRegionsResponse
func (c *ClientWithResponses) ListRegionsWithResponse(ctx context.Context) (*ListRegionsResponse, error) {
	rsp, err := c.ListRegions(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListRegionsResponse(rsp)
}

// GetUsageReportWithResponse request returning *GetUsageReportResponse
func (c *ClientWithResponses) GetUsageReportWithResponse(ctx context.Context, params *GetUsageReportParams) (*GetUsageReportResponse, error) {
	rsp, err := c.GetUsageReport(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetUsageReportResponse(rsp)
}

// ExternalClusterAPIGetCredentialsScriptTemplateWithResponse request returning *ExternalClusterAPIGetCredentialsScriptTemplateResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCredentialsScriptTemplateWithResponse(ctx context.Context, provider string) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCredentialsScriptTemplate(ctx, provider)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCredentialsScriptTemplateResponse(rsp)
}

// ParseListAddonsResponse parses an HTTP response from a ListAddonsWithResponse call
func ParseListAddonsResponse(rsp *http.Response) (*ListAddonsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddonList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentInstallScriptResponse parses an HTTP response from a GetAgentInstallScriptWithResponse call
func ParseGetAgentInstallScriptResponse(rsp *http.Response) (*GetAgentInstallScriptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAgentInstallScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListAuditEventsResponse parses an HTTP response from a ListAuditEventsWithResponse call
func ParseListAuditEventsResponse(rsp *http.Response) (*ListAuditEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAuditEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuditEventList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAuthTokensResponse parses an HTTP response from a ListAuthTokensWithResponse call
func ParseListAuthTokensResponse(rsp *http.Response) (*ListAuthTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListAuthTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthTokenList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAuthTokenResponse parses an HTTP response from a CreateAuthTokenWithResponse call
func ParseCreateAuthTokenResponse(rsp *http.Response) (*CreateAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthTokenCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAuthTokenResponse parses an HTTP response from a DeleteAuthTokenWithResponse call
func ParseDeleteAuthTokenResponse(rsp *http.Response) (*DeleteAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetAuthTokenResponse parses an HTTP response from a GetAuthTokenWithResponse call
func ParseGetAuthTokenResponse(rsp *http.Response) (*GetAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAuthTokenResponse parses an HTTP response from a UpdateAuthTokenWithResponse call
func ParseUpdateAuthTokenResponse(rsp *http.Response) (*UpdateAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlanClusterPriceResponse parses an HTTP response from a PlanClusterPriceWithResponse call
func ParsePlanClusterPriceResponse(rsp *http.Response) (*PlanClusterPriceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PlanClusterPriceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterCostEstimate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCloudCredentialsResponse parses an HTTP response from a ListCloudCredentialsWithResponse call
func ParseListCloudCredentialsResponse(rsp *http.Response) (*ListCloudCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListCloudCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudCredentialsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCloudCredentialsResponse parses an HTTP response from a CreateCloudCredentialsWithResponse call
func ParseCreateCloudCredentialsResponse(rsp *http.Response) (*CreateCloudCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateCloudCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CloudCredentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCloudCredentialsResponse parses an HTTP response from a DeleteCloudCredentialsWithResponse call
func ParseDeleteCloudCredentialsResponse(rsp *http.Response) (*DeleteCloudCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteCloudCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCloudCredentialsResponse parses an HTTP response from a GetCloudCredentialsWithResponse call
func ParseGetCloudCredentialsResponse(rsp *http.Response) (*GetCloudCredentialsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCloudCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudCredentials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteGslbResponse parses an HTTP response from a DeleteGslbWithResponse call
func ParseDeleteGslbResponse(rsp *http.Response) (*DeleteGslbResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteGslbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateOrUpdateGslbResponse parses an HTTP response from a CreateOrUpdateGslbWithResponse call
func ParseCreateOrUpdateGslbResponse(rsp *http.Response) (*CreateOrUpdateGslbResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateGslbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GSLBResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInstanceTypesResponse parses an HTTP response from a GetInstanceTypesWithResponse call
func ParseGetInstanceTypesResponse(rsp *http.Response) (*GetInstanceTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInstanceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateInvitationResponse parses an HTTP response from a CreateInvitationWithResponse call
func ParseCreateInvitationResponse(rsp *http.Response) (*CreateInvitationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NewInvitationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClaimInvitationResponse parses an HTTP response from a ClaimInvitationWithResponse call
func ParseClaimInvitationResponse(rsp *http.Response) (*ClaimInvitationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClaimInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListKubernetesClustersResponse parses an HTTP response from a ListKubernetesClustersWithResponse call
func ParseListKubernetesClustersResponse(rsp *http.Response) (*ListKubernetesClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListKubernetesClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesClusterList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateNewClusterResponse parses an HTTP response from a CreateNewClusterWithResponse call
func ParseCreateNewClusterResponse(rsp *http.Response) (*CreateNewClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateNewClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest KubernetesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePrometheusRawMetricsResponse parses an HTTP response from a PrometheusRawMetricsWithResponse call
func ParsePrometheusRawMetricsResponse(rsp *http.Response) (*PrometheusRawMetricsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PrometheusRawMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteClusterResponse parses an HTTP response from a DeleteClusterWithResponse call
func ParseDeleteClusterResponse(rsp *http.Response) (*DeleteClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClusterResponse parses an HTTP response from a GetClusterWithResponse call
func ParseGetClusterResponse(rsp *http.Response) (*GetClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateClusterResponse parses an HTTP response from a UpdateClusterWithResponse call
func ParseUpdateClusterResponse(rsp *http.Response) (*UpdateClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterActionsAPIPollClusterActionsResponse parses an HTTP response from a ClusterActionsAPIPollClusterActionsWithResponse call
func ParseClusterActionsAPIPollClusterActionsResponse(rsp *http.Response) (*ClusterActionsAPIPollClusterActionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterActionsAPIPollClusterActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusteractionsV1PollClusterActionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterActionsAPIIngestLogsResponse parses an HTTP response from a ClusterActionsAPIIngestLogsWithResponse call
func ParseClusterActionsAPIIngestLogsResponse(rsp *http.Response) (*ClusterActionsAPIIngestLogsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterActionsAPIIngestLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusteractionsV1IngestLogsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClusterActionsAPIAckClusterActionResponse parses an HTTP response from a ClusterActionsAPIAckClusterActionWithResponse call
func ParseClusterActionsAPIAckClusterActionResponse(rsp *http.Response) (*ClusterActionsAPIAckClusterActionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClusterActionsAPIAckClusterActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusteractionsV1AckClusterActionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterAddonsResponse parses an HTTP response from a GetClusterAddonsWithResponse call
func ParseGetClusterAddonsResponse(rsp *http.Response) (*GetClusterAddonsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterAddonsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInstallClusterAddonResponse parses an HTTP response from a InstallClusterAddonWithResponse call
func ParseInstallClusterAddonResponse(rsp *http.Response) (*InstallClusterAddonResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InstallClusterAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterAddon
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteClusterAddonResponse parses an HTTP response from a DeleteClusterAddonWithResponse call
func ParseDeleteClusterAddonResponse(rsp *http.Response) (*DeleteClusterAddonResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClusterAddonResponse parses an HTTP response from a GetClusterAddonWithResponse call
func ParseGetClusterAddonResponse(rsp *http.Response) (*GetClusterAddonResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterAddon
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateClusterAddonResponse parses an HTTP response from a UpdateClusterAddonWithResponse call
func ParseUpdateClusterAddonResponse(rsp *http.Response) (*UpdateClusterAddonResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateClusterAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterAddon
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseArchiveClusterResponse parses an HTTP response from a ArchiveClusterWithResponse call
func ParseArchiveClusterResponse(rsp *http.Response) (*ArchiveClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ArchiveClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCostHistoryResponse parses an HTTP response from a GetCostHistoryWithResponse call
func ParseGetCostHistoryResponse(rsp *http.Response) (*GetCostHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCostHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterCostHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardMetricsCommonStatsResponse parses an HTTP response from a GetDashboardMetricsCommonStatsWithResponse call
func ParseGetDashboardMetricsCommonStatsResponse(rsp *http.Response) (*GetDashboardMetricsCommonStatsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardMetricsCommonStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardMetricsCommonStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardMetricsCpuUsageResponse parses an HTTP response from a GetDashboardMetricsCpuUsageWithResponse call
func ParseGetDashboardMetricsCpuUsageResponse(rsp *http.Response) (*GetDashboardMetricsCpuUsageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardMetricsCpuUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardMetricsCPUUsage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardMetricsMemoryUsageResponse parses an HTTP response from a GetDashboardMetricsMemoryUsageWithResponse call
func ParseGetDashboardMetricsMemoryUsageResponse(rsp *http.Response) (*GetDashboardMetricsMemoryUsageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardMetricsMemoryUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardMetricsMemoryUsage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterFeedbackEventsResponse parses an HTTP response from a GetClusterFeedbackEventsWithResponse call
func ParseGetClusterFeedbackEventsResponse(rsp *http.Response) (*GetClusterFeedbackEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterFeedbackEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesClusterFeedbackEventsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterHealthResponse parses an HTTP response from a GetClusterHealthWithResponse call
func ParseGetClusterHealthResponse(rsp *http.Response) (*GetClusterHealthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterHealth
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterIngressControllerResponse parses an HTTP response from a GetClusterIngressControllerWithResponse call
func ParseGetClusterIngressControllerResponse(rsp *http.Response) (*GetClusterIngressControllerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterIngressControllerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesIngressController
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetClusterKubeconfigResponse parses an HTTP response from a GetClusterKubeconfigWithResponse call
func ParseGetClusterKubeconfigResponse(rsp *http.Response) (*GetClusterKubeconfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterKubeconfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetLegacyClusterAddonsResponse parses an HTTP response from a GetLegacyClusterAddonsWithResponse call
func ParseGetLegacyClusterAddonsResponse(rsp *http.Response) (*GetLegacyClusterAddonsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLegacyClusterAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddonsConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseConfigureClusterAddonsResponse parses an HTTP response from a ConfigureClusterAddonsWithResponse call
func ParseConfigureClusterAddonsResponse(rsp *http.Response) (*ConfigureClusterAddonsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ConfigureClusterAddonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddonsConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetClusterMetricsResponse parses an HTTP response from a GetClusterMetricsWithResponse call
func ParseGetClusterMetricsResponse(rsp *http.Response) (*GetClusterMetricsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterMetricsCpuUsageResponse parses an HTTP response from a GetClusterMetricsCpuUsageWithResponse call
func ParseGetClusterMetricsCpuUsageResponse(rsp *http.Response) (*GetClusterMetricsCpuUsageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterMetricsCpuUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterMetricsCpuUsage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterMetricsGaugesResponse parses an HTTP response from a GetClusterMetricsGaugesWithResponse call
func ParseGetClusterMetricsGaugesResponse(rsp *http.Response) (*GetClusterMetricsGaugesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterMetricsGaugesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterMetricsGauges
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterMetricsMemoryUsageResponse parses an HTTP response from a GetClusterMetricsMemoryUsageWithResponse call
func ParseGetClusterMetricsMemoryUsageResponse(rsp *http.Response) (*GetClusterMetricsMemoryUsageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterMetricsMemoryUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterMetricsMemoryUsage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNodeConstraintsResponse parses an HTTP response from a GetNodeConstraintsWithResponse call
func ParseGetNodeConstraintsResponse(rsp *http.Response) (*GetNodeConstraintsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNodeConstraintsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ValidNodeConstraints
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterNodesResponse parses an HTTP response from a GetClusterNodesWithResponse call
func ParseGetClusterNodesResponse(rsp *http.Response) (*GetClusterNodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddClusterNodeResponse parses an HTTP response from a AddClusterNodeWithResponse call
func ParseAddClusterNodeResponse(rsp *http.Response) (*AddClusterNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddClusterNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AddNodeResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	}

	return response, nil
}

// ParseDeleteClusterNodeResponse parses an HTTP response from a DeleteClusterNodeWithResponse call
func ParseDeleteClusterNodeResponse(rsp *http.Response) (*DeleteClusterNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DeleteNodeResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	}

	return response, nil
}

// ParseGetClusterNodeResponse parses an HTTP response from a GetClusterNodeWithResponse call
func ParseGetClusterNodeResponse(rsp *http.Response) (*GetClusterNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCloseNodeSshResponse parses an HTTP response from a CloseNodeSshWithResponse call
func ParseCloseNodeSshResponse(rsp *http.Response) (*CloseNodeSshResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CloseNodeSshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseInterruptClusterNodeResponse parses an HTTP response from a InterruptClusterNodeWithResponse call
func ParseInterruptClusterNodeResponse(rsp *http.Response) (*InterruptClusterNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InterruptClusterNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseSetupNodeSshResponse parses an HTTP response from a SetupNodeSshWithResponse call
func ParseSetupNodeSshResponse(rsp *http.Response) (*SetupNodeSshResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SetupNodeSshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUpdateNodeListResponse parses an HTTP response from a UpdateNodeListWithResponse call
func ParseUpdateNodeListResponse(rsp *http.Response) (*UpdateNodeListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateNodeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	}

	return response, nil
}

// ParsePauseClusterResponse parses an HTTP response from a PauseClusterWithResponse call
func ParsePauseClusterResponse(rsp *http.Response) (*PauseClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PauseClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePauseClusterReconcileResponse parses an HTTP response from a PauseClusterReconcileWithResponse call
func ParsePauseClusterReconcileResponse(rsp *http.Response) (*PauseClusterReconcileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PauseClusterReconcileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteClusterPauseScheduleResponse parses an HTTP response from a DeleteClusterPauseScheduleWithResponse call
func ParseDeleteClusterPauseScheduleResponse(rsp *http.Response) (*DeleteClusterPauseScheduleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClusterPauseScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PauseSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClusterPauseScheduleResponse parses an HTTP response from a GetClusterPauseScheduleWithResponse call
func ParseGetClusterPauseScheduleResponse(rsp *http.Response) (*GetClusterPauseScheduleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClusterPauseScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PauseSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetClusterPauseScheduleResponse parses an HTTP response from a SetClusterPauseScheduleWithResponse call
func ParseSetClusterPauseScheduleResponse(rsp *http.Response) (*SetClusterPauseScheduleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SetClusterPauseScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PauseSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPoliciesResponse parses an HTTP response from a GetPoliciesWithResponse call
func ParseGetPoliciesResponse(rsp *http.Response) (*GetPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoliciesConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpsertPoliciesResponse parses an HTTP response from a UpsertPoliciesWithResponse call
func ParseUpsertPoliciesResponse(rsp *http.Response) (*UpsertPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpsertPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoliciesConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProblematicWorkloadsResponse parses an HTTP response from a GetProblematicWorkloadsWithResponse call
func ParseGetProblematicWorkloadsResponse(rsp *http.Response) (*GetProblematicWorkloadsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProblematicWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterProblematicWorkloads
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRebalancedWorkloadsResponse parses an HTTP response from a GetRebalancedWorkloadsWithResponse call
func ParseGetRebalancedWorkloadsResponse(rsp *http.Response) (*GetRebalancedWorkloadsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRebalancedWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RebalancedWorkloads
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRebalancingPlansResponse parses an HTTP response from a ListRebalancingPlansWithResponse call
func ParseListRebalancingPlansResponse(rsp *http.Response) (*ListRebalancingPlansResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListRebalancingPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RebalancingPlansResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRebalanceResponse parses an HTTP response from a RebalanceWithResponse call
func ParseRebalanceResponse(rsp *http.Response) (*RebalanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RebalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest RebalancingAccepted
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetRebalancingPlanResponse parses an HTTP response from a GetRebalancingPlanWithResponse call
func ParseGetRebalancingPlanResponse(rsp *http.Response) (*GetRebalancingPlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRebalancingPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RebalancingPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExecuteRebalancingPlanResponse parses an HTTP response from a ExecuteRebalancingPlanWithResponse call
func ParseExecuteRebalancingPlanResponse(rsp *http.Response) (*ExecuteRebalancingPlanResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExecuteRebalancingPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RebalancingPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResumeClusterResponse parses an HTTP response from a ResumeClusterWithResponse call
func ParseResumeClusterResponse(rsp *http.Response) (*ResumeClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ResumeClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseResumeClusterReconcileResponse parses an HTTP response from a ResumeClusterReconcileWithResponse call
func ParseResumeClusterReconcileResponse(rsp *http.Response) (*ResumeClusterReconcileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ResumeClusterReconcileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KubernetesCluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTriggerClusterReconcileResponse parses an HTTP response from a TriggerClusterReconcileWithResponse call
func ParseTriggerClusterReconcileResponse(rsp *http.Response) (*TriggerClusterReconcileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TriggerClusterReconcileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetWorkloadsResponse parses an HTTP response from a GetWorkloadsWithResponse call
func ParseGetWorkloadsResponse(rsp *http.Response) (*GetWorkloadsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClusterWorkloads
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIListClustersResponse parses an HTTP response from a ExternalClusterAPIListClustersWithResponse call
func ParseExternalClusterAPIListClustersResponse(rsp *http.Response) (*ExternalClusterAPIListClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIListClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1ListClustersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIRegisterClusterResponse parses an HTTP response from a ExternalClusterAPIRegisterClusterWithResponse call
func ParseExternalClusterAPIRegisterClusterResponse(rsp *http.Response) (*ExternalClusterAPIRegisterClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIRegisterClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetExternalClusterOperationResponse parses an HTTP response from a GetExternalClusterOperationWithResponse call
func ParseGetExternalClusterOperationResponse(rsp *http.Response) (*GetExternalClusterOperationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetExternalClusterOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDeleteClusterResponse parses an HTTP response from a ExternalClusterAPIDeleteClusterWithResponse call
func ParseExternalClusterAPIDeleteClusterResponse(rsp *http.Response) (*ExternalClusterAPIDeleteClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseExternalClusterAPIGetClusterResponse parses an HTTP response from a ExternalClusterAPIGetClusterWithResponse call
func ParseExternalClusterAPIGetClusterResponse(rsp *http.Response) (*ExternalClusterAPIGetClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIUpdateClusterResponse parses an HTTP response from a ExternalClusterAPIUpdateClusterWithResponse call
func ParseExternalClusterAPIUpdateClusterResponse(rsp *http.Response) (*ExternalClusterAPIUpdateClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIUpdateClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetCredentialsScriptResponse parses an HTTP response from a ExternalClusterAPIGetCredentialsScriptWithResponse call
func ParseExternalClusterAPIGetCredentialsScriptResponse(rsp *http.Response) (*ExternalClusterAPIGetCredentialsScriptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCredentialsScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetCredentialsScriptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDisconnectClusterResponse parses an HTTP response from a ExternalClusterAPIDisconnectClusterWithResponse call
func ParseExternalClusterAPIDisconnectClusterResponse(rsp *http.Response) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDisconnectClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEstimatedSavingsResponse parses an HTTP response from a GetEstimatedSavingsWithResponse call
func ParseGetEstimatedSavingsResponse(rsp *http.Response) (*GetEstimatedSavingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEstimatedSavingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EstimatedSavingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetKubeconfigResponse parses an HTTP response from a ExternalClusterAPIGetKubeconfigWithResponse call
func ParseExternalClusterAPIGetKubeconfigResponse(rsp *http.Response) (*ExternalClusterAPIGetKubeconfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetKubeconfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetKubeconfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetMetricsResponse parses an HTTP response from a ExternalClusterAPIGetMetricsWithResponse call
func ParseExternalClusterAPIGetMetricsResponse(rsp *http.Response) (*ExternalClusterAPIGetMetricsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiMetricsV1beta1GetClusterMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIListNodesResponse parses an HTTP response from a ExternalClusterAPIListNodesWithResponse call
func ParseExternalClusterAPIListNodesResponse(rsp *http.Response) (*ExternalClusterAPIListNodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIListNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiClusterV1beta1ListNodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIAddNodeResponse parses an HTTP response from a ExternalClusterAPIAddNodeWithResponse call
func ParseExternalClusterAPIAddNodeResponse(rsp *http.Response) (*ExternalClusterAPIAddNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIAddNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1AddNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDeleteNodeResponse parses an HTTP response from a ExternalClusterAPIDeleteNodeWithResponse call
func ParseExternalClusterAPIDeleteNodeResponse(rsp *http.Response) (*ExternalClusterAPIDeleteNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDeleteNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DeleteNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetNodeResponse parses an HTTP response from a ExternalClusterAPIGetNodeWithResponse call
func ParseExternalClusterAPIGetNodeResponse(rsp *http.Response) (*ExternalClusterAPIGetNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiClusterV1beta1Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDrainNodeResponse parses an HTTP response from a ExternalClusterAPIDrainNodeWithResponse call
func ParseExternalClusterAPIDrainNodeResponse(rsp *http.Response) (*ExternalClusterAPIDrainNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDrainNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DrainNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIPauseClusterResponse parses an HTTP response from a ExternalClusterAPIPauseClusterWithResponse call
func ParseExternalClusterAPIPauseClusterResponse(rsp *http.Response) (*ExternalClusterAPIPauseClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIPauseClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIResumeClusterResponse parses an HTTP response from a ExternalClusterAPIResumeClusterWithResponse call
func ParseExternalClusterAPIResumeClusterResponse(rsp *http.Response) (*ExternalClusterAPIResumeClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIResumeClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPICreateClusterTokenResponse parses an HTTP response from a ExternalClusterAPICreateClusterTokenWithResponse call
func ParseExternalClusterAPICreateClusterTokenResponse(rsp *http.Response) (*ExternalClusterAPICreateClusterTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPICreateClusterTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1CreateClusterTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOperationResponse parses an HTTP response from a GetOperationWithResponse call
func ParseGetOperationResponse(rsp *http.Response) (*GetOperationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCurrentUserProfileResponse parses an HTTP response from a CurrentUserProfileWithResponse call
func ParseCurrentUserProfileResponse(rsp *http.Response) (*CurrentUserProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CurrentUserProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCurrentUserProfileResponse parses an HTTP response from a UpdateCurrentUserProfileWithResponse call
func ParseUpdateCurrentUserProfileResponse(rsp *http.Response) (*UpdateCurrentUserProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateCurrentUserProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPromMetricsResponse parses an HTTP response from a GetPromMetricsWithResponse call
func ParseGetPromMetricsResponse(rsp *http.Response) (*GetPromMetricsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPromMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseListOrganizationsResponse parses an HTTP response from a ListOrganizationsWithResponse call
func ParseListOrganizationsResponse(rsp *http.Response) (*ListOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationResponse parses an HTTP response from a CreateOrganizationWithResponse call
func ParseCreateOrganizationResponse(rsp *http.Response) (*CreateOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationResponse parses an HTTP response from a DeleteOrganizationWithResponse call
func ParseDeleteOrganizationResponse(rsp *http.Response) (*DeleteOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationResponse parses an HTTP response from a GetOrganizationWithResponse call
func ParseGetOrganizationResponse(rsp *http.Response) (*GetOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationResponse parses an HTTP response from a UpdateOrganizationWithResponse call
func ParseUpdateOrganizationResponse(rsp *http.Response) (*UpdateOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationUsersResponse parses an HTTP response from a GetOrganizationUsersWithResponse call
func ParseGetOrganizationUsersResponse(rsp *http.Response) (*GetOrganizationUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUsersList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationUserResponse parses an HTTP response from a CreateOrganizationUserWithResponse call
func ParseCreateOrganizationUserResponse(rsp *http.Response) (*CreateOrganizationUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationUserResponse parses an HTTP response from a DeleteOrganizationUserWithResponse call
func ParseDeleteOrganizationUserResponse(rsp *http.Response) (*DeleteOrganizationUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationUserResponse parses an HTTP response from a UpdateOrganizationUserWithResponse call
func ParseUpdateOrganizationUserResponse(rsp *http.Response) (*UpdateOrganizationUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRegionsResponse parses an HTTP response from a ListRegionsWithResponse call
func ParseListRegionsResponse(rsp *http.Response) (*ListRegionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastRegionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsageReportResponse parses an HTTP response from a GetUsageReportWithResponse call
func ParseGetUsageReportResponse(rsp *http.Response) (*GetUsageReportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUsageReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceUsageReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParseExternalClusterAPIGetCredentialsScriptTemplateResponse parses an HTTP response from a ExternalClusterAPIGetCredentialsScriptTemplateWithResponse call
func ParseExternalClusterAPIGetCredentialsScriptTemplateResponse(rsp *http.Response) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCredentialsScriptTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}
