// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package sdk

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AuthTokenAPIListAuthTokens request
	AuthTokenAPIListAuthTokens(ctx context.Context, params *AuthTokenAPIListAuthTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenAPICreateAuthToken request with any body
	AuthTokenAPICreateAuthTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthTokenAPICreateAuthToken(ctx context.Context, body AuthTokenAPICreateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenAPIDeleteAuthToken request
	AuthTokenAPIDeleteAuthToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenAPIGetAuthToken request
	AuthTokenAPIGetAuthToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTokenAPIUpdateAuthToken request with any body
	AuthTokenAPIUpdateAuthTokenWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthTokenAPIUpdateAuthToken(ctx context.Context, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIListInvitations request
	UsersAPIListInvitations(ctx context.Context, params *UsersAPIListInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPICreateInvitations request with any body
	UsersAPICreateInvitationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAPICreateInvitations(ctx context.Context, body UsersAPICreateInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIDeleteInvitation request
	UsersAPIDeleteInvitation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIClaimInvitation request with any body
	UsersAPIClaimInvitationWithBody(ctx context.Context, invitationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAPIClaimInvitation(ctx context.Context, invitationId string, body UsersAPIClaimInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvictorAPIGetAdvancedConfig request
	EvictorAPIGetAdvancedConfig(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EvictorAPIUpsertAdvancedConfig request with any body
	EvictorAPIUpsertAdvancedConfigWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EvictorAPIUpsertAdvancedConfig(ctx context.Context, clusterId string, body EvictorAPIUpsertAdvancedConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPIFilterInstanceTypes request with any body
	NodeTemplatesAPIFilterInstanceTypesWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeTemplatesAPIFilterInstanceTypes(ctx context.Context, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPIGenerateNodeTemplates request
	NodeTemplatesAPIGenerateNodeTemplates(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIListConfigurations request
	NodeConfigurationAPIListConfigurations(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPICreateConfiguration request with any body
	NodeConfigurationAPICreateConfigurationWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeConfigurationAPICreateConfiguration(ctx context.Context, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIGetSuggestedConfiguration request
	NodeConfigurationAPIGetSuggestedConfiguration(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIDeleteConfiguration request
	NodeConfigurationAPIDeleteConfiguration(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIGetConfiguration request
	NodeConfigurationAPIGetConfiguration(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIUpdateConfiguration request with any body
	NodeConfigurationAPIUpdateConfigurationWithBody(ctx context.Context, clusterId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeConfigurationAPIUpdateConfiguration(ctx context.Context, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPISetDefault request
	NodeConfigurationAPISetDefault(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesAPIGetClusterNodeConstraints request
	PoliciesAPIGetClusterNodeConstraints(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPIListNodeTemplates request
	NodeTemplatesAPIListNodeTemplates(ctx context.Context, clusterId string, params *NodeTemplatesAPIListNodeTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPICreateNodeTemplate request with any body
	NodeTemplatesAPICreateNodeTemplateWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeTemplatesAPICreateNodeTemplate(ctx context.Context, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPIDeleteNodeTemplate request
	NodeTemplatesAPIDeleteNodeTemplate(ctx context.Context, clusterId string, nodeTemplateName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeTemplatesAPIUpdateNodeTemplate request with any body
	NodeTemplatesAPIUpdateNodeTemplateWithBody(ctx context.Context, clusterId string, nodeTemplateName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NodeTemplatesAPIUpdateNodeTemplate(ctx context.Context, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesAPIGetClusterPolicies request
	PoliciesAPIGetClusterPolicies(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PoliciesAPIUpsertClusterPolicies request with any body
	PoliciesAPIUpsertClusterPoliciesWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PoliciesAPIUpsertClusterPolicies(ctx context.Context, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIListRebalancingJobs request
	ScheduledRebalancingAPIListRebalancingJobs(ctx context.Context, clusterId string, params *ScheduledRebalancingAPIListRebalancingJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPICreateRebalancingJob request with any body
	ScheduledRebalancingAPICreateRebalancingJobWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduledRebalancingAPICreateRebalancingJob(ctx context.Context, clusterId string, body ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIDeleteRebalancingJob request
	ScheduledRebalancingAPIDeleteRebalancingJob(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIGetRebalancingJob request
	ScheduledRebalancingAPIGetRebalancingJob(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIUpdateRebalancingJob request with any body
	ScheduledRebalancingAPIUpdateRebalancingJobWithBody(ctx context.Context, clusterId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduledRebalancingAPIUpdateRebalancingJob(ctx context.Context, clusterId string, id string, body ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIPreviewRebalancingSchedule request with any body
	ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduledRebalancingAPIPreviewRebalancingSchedule(ctx context.Context, clusterId string, body ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIListClusters request
	ExternalClusterAPIListClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIRegisterCluster request with any body
	ExternalClusterAPIRegisterClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIRegisterCluster(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetListNodesFilters request
	ExternalClusterAPIGetListNodesFilters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OperationsAPIGetOperation request
	OperationsAPIGetOperation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDeleteCluster request
	ExternalClusterAPIDeleteCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCluster request
	ExternalClusterAPIGetCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIUpdateCluster request with any body
	ExternalClusterAPIUpdateClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIUpdateCluster(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDeleteAssumeRolePrincipal request
	ExternalClusterAPIDeleteAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetAssumeRolePrincipal request
	ExternalClusterAPIGetAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPICreateAssumeRolePrincipal request
	ExternalClusterAPICreateAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetAssumeRoleUser request
	ExternalClusterAPIGetAssumeRoleUser(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCleanupScript request
	ExternalClusterAPIGetCleanupScript(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCredentialsScript request
	ExternalClusterAPIGetCredentialsScript(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDisconnectCluster request with any body
	ExternalClusterAPIDisconnectClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIDisconnectCluster(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIHandleCloudEvent request with any body
	ExternalClusterAPIHandleCloudEventWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIHandleCloudEvent(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIListNodes request
	ExternalClusterAPIListNodes(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIAddNode request with any body
	ExternalClusterAPIAddNodeWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIAddNode(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDeleteNode request
	ExternalClusterAPIDeleteNode(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetNode request
	ExternalClusterAPIGetNode(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIDrainNode request with any body
	ExternalClusterAPIDrainNodeWithBody(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIDrainNode(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIReconcileCluster request
	ExternalClusterAPIReconcileCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIUpdateClusterTags request with any body
	ExternalClusterAPIUpdateClusterTagsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExternalClusterAPIUpdateClusterTags(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPICreateClusterToken request
	ExternalClusterAPICreateClusterToken(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NodeConfigurationAPIListMaxPodsPresets request
	NodeConfigurationAPIListMaxPodsPresets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPICurrentUserProfile request
	UsersAPICurrentUserProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIUpdateCurrentUserProfile request with any body
	UsersAPIUpdateCurrentUserProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAPIUpdateCurrentUserProfile(ctx context.Context, body UsersAPIUpdateCurrentUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIListOrganizations request
	UsersAPIListOrganizations(ctx context.Context, params *UsersAPIListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPICreateOrganization request with any body
	UsersAPICreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAPICreateOrganization(ctx context.Context, body UsersAPICreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPIGetOrganizationReservationsBalance request
	InventoryAPIGetOrganizationReservationsBalance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPIGetOrganizationResourceUsage request
	InventoryAPIGetOrganizationResourceUsage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIDeleteOrganization request
	UsersAPIDeleteOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIGetOrganization request
	UsersAPIGetOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIEditOrganization request with any body
	UsersAPIEditOrganizationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAPIEditOrganization(ctx context.Context, id string, body UsersAPIEditOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPISyncClusterResources request
	InventoryAPISyncClusterResources(ctx context.Context, organizationId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPIGetReservations request
	InventoryAPIGetReservations(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPIAddReservation request with any body
	InventoryAPIAddReservationWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InventoryAPIAddReservation(ctx context.Context, organizationId string, body InventoryAPIAddReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPIGetReservationsBalance request
	InventoryAPIGetReservationsBalance(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPIOverwriteReservations request with any body
	InventoryAPIOverwriteReservationsWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InventoryAPIOverwriteReservations(ctx context.Context, organizationId string, body InventoryAPIOverwriteReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InventoryAPIDeleteReservation request
	InventoryAPIDeleteReservation(ctx context.Context, organizationId string, reservationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIListOrganizationUsers request
	UsersAPIListOrganizationUsers(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIAddUserToOrganization request with any body
	UsersAPIAddUserToOrganizationWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAPIAddUserToOrganization(ctx context.Context, organizationId string, body UsersAPIAddUserToOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIRemoveUserFromOrganization request
	UsersAPIRemoveUserFromOrganization(ctx context.Context, organizationId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersAPIUpdateOrganizationUser request with any body
	UsersAPIUpdateOrganizationUserWithBody(ctx context.Context, organizationId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersAPIUpdateOrganizationUser(ctx context.Context, organizationId string, userId string, body UsersAPIUpdateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIListRebalancingSchedules request
	ScheduledRebalancingAPIListRebalancingSchedules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPICreateRebalancingSchedule request with any body
	ScheduledRebalancingAPICreateRebalancingScheduleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduledRebalancingAPICreateRebalancingSchedule(ctx context.Context, body ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIUpdateRebalancingSchedule request with any body
	ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduledRebalancingAPIUpdateRebalancingSchedule(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, body ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIDeleteRebalancingSchedule request
	ScheduledRebalancingAPIDeleteRebalancingSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIGetRebalancingSchedule request
	ScheduledRebalancingAPIGetRebalancingSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIGetCommitmentsAssignments request
	CommitmentsAPIGetCommitmentsAssignments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPICreateCommitmentAssignment request
	CommitmentsAPICreateCommitmentAssignment(ctx context.Context, params *CommitmentsAPICreateCommitmentAssignmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIDeleteCommitmentAssignment request
	CommitmentsAPIDeleteCommitmentAssignment(ctx context.Context, assignmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIGetCommitments request
	CommitmentsAPIGetCommitments(ctx context.Context, params *CommitmentsAPIGetCommitmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIImportAzureReservations request with any body
	CommitmentsAPIImportAzureReservationsWithBody(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommitmentsAPIImportAzureReservations(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, body CommitmentsAPIImportAzureReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIImportGCPCommitments request with any body
	CommitmentsAPIImportGCPCommitmentsWithBody(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommitmentsAPIImportGCPCommitments(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, body CommitmentsAPIImportGCPCommitmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIGetGCPCommitmentsImportScript request
	CommitmentsAPIGetGCPCommitmentsImportScript(ctx context.Context, params *CommitmentsAPIGetGCPCommitmentsImportScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIDeleteCommitment request
	CommitmentsAPIDeleteCommitment(ctx context.Context, commitmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIUpdateCommitment request with any body
	CommitmentsAPIUpdateCommitmentWithBody(ctx context.Context, commitmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommitmentsAPIUpdateCommitment(ctx context.Context, commitmentId string, body CommitmentsAPIUpdateCommitmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIGetCommitmentAssignments request
	CommitmentsAPIGetCommitmentAssignments(ctx context.Context, commitmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIReplaceCommitmentAssignments request with any body
	CommitmentsAPIReplaceCommitmentAssignmentsWithBody(ctx context.Context, commitmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CommitmentsAPIReplaceCommitmentAssignments(ctx context.Context, commitmentId string, body CommitmentsAPIReplaceCommitmentAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CommitmentsAPIGetGCPCommitmentsScriptTemplate request
	CommitmentsAPIGetGCPCommitmentsScriptTemplate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCleanupScriptTemplate request
	ExternalClusterAPIGetCleanupScriptTemplate(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExternalClusterAPIGetCredentialsScriptTemplate request
	ExternalClusterAPIGetCredentialsScriptTemplate(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SSOAPIListSSOConnections request
	SSOAPIListSSOConnections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SSOAPICreateSSOConnection request with any body
	SSOAPICreateSSOConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SSOAPICreateSSOConnection(ctx context.Context, body SSOAPICreateSSOConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SSOAPIDeleteSSOConnection request
	SSOAPIDeleteSSOConnection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SSOAPIGetSSOConnection request
	SSOAPIGetSSOConnection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SSOAPIUpdateSSOConnection request with any body
	SSOAPIUpdateSSOConnectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SSOAPIUpdateSSOConnection(ctx context.Context, id string, body SSOAPIUpdateSSOConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduledRebalancingAPIListAvailableRebalancingTZ request
	ScheduledRebalancingAPIListAvailableRebalancingTZ(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIGetAgentStatus request
	WorkloadOptimizationAPIGetAgentStatus(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIListWorkloadScalingPolicies request
	WorkloadOptimizationAPIListWorkloadScalingPolicies(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPICreateWorkloadScalingPolicy request with any body
	WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadOptimizationAPICreateWorkloadScalingPolicy(ctx context.Context, clusterId string, body WorkloadOptimizationAPICreateWorkloadScalingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIDeleteWorkloadScalingPolicy request
	WorkloadOptimizationAPIDeleteWorkloadScalingPolicy(ctx context.Context, clusterId string, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIGetWorkloadScalingPolicy request
	WorkloadOptimizationAPIGetWorkloadScalingPolicy(ctx context.Context, clusterId string, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIUpdateWorkloadScalingPolicy request with any body
	WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadOptimizationAPIUpdateWorkloadScalingPolicy(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIUpdateWorkloadScalingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIAssignScalingPolicyWorkloads request with any body
	WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadOptimizationAPIAssignScalingPolicyWorkloads(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIAssignScalingPolicyWorkloadsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIListWorkloadEvents request
	WorkloadOptimizationAPIListWorkloadEvents(ctx context.Context, clusterId string, params *WorkloadOptimizationAPIListWorkloadEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIListWorkloads request
	WorkloadOptimizationAPIListWorkloads(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIGetWorkloadsSummary request
	WorkloadOptimizationAPIGetWorkloadsSummary(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIGetWorkload request
	WorkloadOptimizationAPIGetWorkload(ctx context.Context, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIUpdateWorkload request with any body
	WorkloadOptimizationAPIUpdateWorkloadWithBody(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadOptimizationAPIUpdateWorkload(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIGetInstallCmd request
	WorkloadOptimizationAPIGetInstallCmd(ctx context.Context, params *WorkloadOptimizationAPIGetInstallCmdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIGetInstallScript request
	WorkloadOptimizationAPIGetInstallScript(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadOptimizationAPIUpdateWorkloadV2 request with any body
	WorkloadOptimizationAPIUpdateWorkloadV2WithBody(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadOptimizationAPIUpdateWorkloadV2(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AuthTokenAPIListAuthTokens(ctx context.Context, params *AuthTokenAPIListAuthTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIListAuthTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPICreateAuthTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPICreateAuthTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPICreateAuthToken(ctx context.Context, body AuthTokenAPICreateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPICreateAuthTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPIDeleteAuthToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIDeleteAuthTokenRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPIGetAuthToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIGetAuthTokenRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPIUpdateAuthTokenWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIUpdateAuthTokenRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTokenAPIUpdateAuthToken(ctx context.Context, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenAPIUpdateAuthTokenRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIListInvitations(ctx context.Context, params *UsersAPIListInvitationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIListInvitationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPICreateInvitationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPICreateInvitationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPICreateInvitations(ctx context.Context, body UsersAPICreateInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPICreateInvitationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIDeleteInvitation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIDeleteInvitationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIClaimInvitationWithBody(ctx context.Context, invitationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIClaimInvitationRequestWithBody(c.Server, invitationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIClaimInvitation(ctx context.Context, invitationId string, body UsersAPIClaimInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIClaimInvitationRequest(c.Server, invitationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvictorAPIGetAdvancedConfig(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvictorAPIGetAdvancedConfigRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvictorAPIUpsertAdvancedConfigWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvictorAPIUpsertAdvancedConfigRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EvictorAPIUpsertAdvancedConfig(ctx context.Context, clusterId string, body EvictorAPIUpsertAdvancedConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEvictorAPIUpsertAdvancedConfigRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIFilterInstanceTypesWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIFilterInstanceTypesRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIFilterInstanceTypes(ctx context.Context, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIFilterInstanceTypesRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIGenerateNodeTemplates(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIGenerateNodeTemplatesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIListConfigurations(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIListConfigurationsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPICreateConfigurationWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPICreateConfigurationRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPICreateConfiguration(ctx context.Context, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPICreateConfigurationRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIGetSuggestedConfiguration(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIGetSuggestedConfigurationRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIDeleteConfiguration(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIDeleteConfigurationRequest(c.Server, clusterId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIGetConfiguration(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIGetConfigurationRequest(c.Server, clusterId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIUpdateConfigurationWithBody(ctx context.Context, clusterId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIUpdateConfigurationRequestWithBody(c.Server, clusterId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIUpdateConfiguration(ctx context.Context, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIUpdateConfigurationRequest(c.Server, clusterId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPISetDefault(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPISetDefaultRequest(c.Server, clusterId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesAPIGetClusterNodeConstraints(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesAPIGetClusterNodeConstraintsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIListNodeTemplates(ctx context.Context, clusterId string, params *NodeTemplatesAPIListNodeTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIListNodeTemplatesRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPICreateNodeTemplateWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPICreateNodeTemplateRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPICreateNodeTemplate(ctx context.Context, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPICreateNodeTemplateRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIDeleteNodeTemplate(ctx context.Context, clusterId string, nodeTemplateName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIDeleteNodeTemplateRequest(c.Server, clusterId, nodeTemplateName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIUpdateNodeTemplateWithBody(ctx context.Context, clusterId string, nodeTemplateName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIUpdateNodeTemplateRequestWithBody(c.Server, clusterId, nodeTemplateName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeTemplatesAPIUpdateNodeTemplate(ctx context.Context, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeTemplatesAPIUpdateNodeTemplateRequest(c.Server, clusterId, nodeTemplateName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesAPIGetClusterPolicies(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesAPIGetClusterPoliciesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesAPIUpsertClusterPoliciesWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesAPIUpsertClusterPoliciesRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PoliciesAPIUpsertClusterPolicies(ctx context.Context, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPoliciesAPIUpsertClusterPoliciesRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIListRebalancingJobs(ctx context.Context, clusterId string, params *ScheduledRebalancingAPIListRebalancingJobsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIListRebalancingJobsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPICreateRebalancingJobWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPICreateRebalancingJobRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPICreateRebalancingJob(ctx context.Context, clusterId string, body ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPICreateRebalancingJobRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIDeleteRebalancingJob(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIDeleteRebalancingJobRequest(c.Server, clusterId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIGetRebalancingJob(ctx context.Context, clusterId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIGetRebalancingJobRequest(c.Server, clusterId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIUpdateRebalancingJobWithBody(ctx context.Context, clusterId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIUpdateRebalancingJobRequestWithBody(c.Server, clusterId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIUpdateRebalancingJob(ctx context.Context, clusterId string, id string, body ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIUpdateRebalancingJobRequest(c.Server, clusterId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIPreviewRebalancingScheduleRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIPreviewRebalancingSchedule(ctx context.Context, clusterId string, body ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIPreviewRebalancingScheduleRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIListClusters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIListClustersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIRegisterClusterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIRegisterClusterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIRegisterCluster(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIRegisterClusterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetListNodesFilters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetListNodesFiltersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OperationsAPIGetOperation(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOperationsAPIGetOperationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDeleteCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDeleteClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateCluster(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDeleteAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDeleteAssumeRolePrincipalRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetAssumeRolePrincipalRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPICreateAssumeRolePrincipal(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPICreateAssumeRolePrincipalRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetAssumeRoleUser(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetAssumeRoleUserRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCleanupScript(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCleanupScriptRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCredentialsScript(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCredentialsScriptRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDisconnectClusterWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDisconnectClusterRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDisconnectCluster(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDisconnectClusterRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIHandleCloudEventWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIHandleCloudEventRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIHandleCloudEvent(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIHandleCloudEventRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIListNodes(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIListNodesRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIAddNodeWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIAddNodeRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIAddNode(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIAddNodeRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDeleteNode(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDeleteNodeRequest(c.Server, clusterId, nodeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetNode(ctx context.Context, clusterId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetNodeRequest(c.Server, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDrainNodeWithBody(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDrainNodeRequestWithBody(c.Server, clusterId, nodeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIDrainNode(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIDrainNodeRequest(c.Server, clusterId, nodeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIReconcileCluster(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIReconcileClusterRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateClusterTagsWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterTagsRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIUpdateClusterTags(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIUpdateClusterTagsRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPICreateClusterToken(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPICreateClusterTokenRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NodeConfigurationAPIListMaxPodsPresets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNodeConfigurationAPIListMaxPodsPresetsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPICurrentUserProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPICurrentUserProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIUpdateCurrentUserProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIUpdateCurrentUserProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIUpdateCurrentUserProfile(ctx context.Context, body UsersAPIUpdateCurrentUserProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIUpdateCurrentUserProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIListOrganizations(ctx context.Context, params *UsersAPIListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIListOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPICreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPICreateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPICreateOrganization(ctx context.Context, body UsersAPICreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPICreateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIGetOrganizationReservationsBalance(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIGetOrganizationReservationsBalanceRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIGetOrganizationResourceUsage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIGetOrganizationResourceUsageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIDeleteOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIDeleteOrganizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIGetOrganization(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIGetOrganizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIEditOrganizationWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIEditOrganizationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIEditOrganization(ctx context.Context, id string, body UsersAPIEditOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIEditOrganizationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPISyncClusterResources(ctx context.Context, organizationId string, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPISyncClusterResourcesRequest(c.Server, organizationId, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIGetReservations(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIGetReservationsRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIAddReservationWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIAddReservationRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIAddReservation(ctx context.Context, organizationId string, body InventoryAPIAddReservationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIAddReservationRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIGetReservationsBalance(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIGetReservationsBalanceRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIOverwriteReservationsWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIOverwriteReservationsRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIOverwriteReservations(ctx context.Context, organizationId string, body InventoryAPIOverwriteReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIOverwriteReservationsRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InventoryAPIDeleteReservation(ctx context.Context, organizationId string, reservationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInventoryAPIDeleteReservationRequest(c.Server, organizationId, reservationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIListOrganizationUsers(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIListOrganizationUsersRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIAddUserToOrganizationWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIAddUserToOrganizationRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIAddUserToOrganization(ctx context.Context, organizationId string, body UsersAPIAddUserToOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIAddUserToOrganizationRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIRemoveUserFromOrganization(ctx context.Context, organizationId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIRemoveUserFromOrganizationRequest(c.Server, organizationId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIUpdateOrganizationUserWithBody(ctx context.Context, organizationId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIUpdateOrganizationUserRequestWithBody(c.Server, organizationId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersAPIUpdateOrganizationUser(ctx context.Context, organizationId string, userId string, body UsersAPIUpdateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersAPIUpdateOrganizationUserRequest(c.Server, organizationId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIListRebalancingSchedules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIListRebalancingSchedulesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPICreateRebalancingScheduleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPICreateRebalancingScheduleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPICreateRebalancingSchedule(ctx context.Context, body ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPICreateRebalancingScheduleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIUpdateRebalancingScheduleRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIUpdateRebalancingSchedule(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, body ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIUpdateRebalancingScheduleRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIDeleteRebalancingSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIDeleteRebalancingScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIGetRebalancingSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIGetRebalancingScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIGetCommitmentsAssignments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIGetCommitmentsAssignmentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPICreateCommitmentAssignment(ctx context.Context, params *CommitmentsAPICreateCommitmentAssignmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPICreateCommitmentAssignmentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIDeleteCommitmentAssignment(ctx context.Context, assignmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIDeleteCommitmentAssignmentRequest(c.Server, assignmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIGetCommitments(ctx context.Context, params *CommitmentsAPIGetCommitmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIGetCommitmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIImportAzureReservationsWithBody(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIImportAzureReservationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIImportAzureReservations(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, body CommitmentsAPIImportAzureReservationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIImportAzureReservationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIImportGCPCommitmentsWithBody(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIImportGCPCommitmentsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIImportGCPCommitments(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, body CommitmentsAPIImportGCPCommitmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIImportGCPCommitmentsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIGetGCPCommitmentsImportScript(ctx context.Context, params *CommitmentsAPIGetGCPCommitmentsImportScriptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIGetGCPCommitmentsImportScriptRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIDeleteCommitment(ctx context.Context, commitmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIDeleteCommitmentRequest(c.Server, commitmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIUpdateCommitmentWithBody(ctx context.Context, commitmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIUpdateCommitmentRequestWithBody(c.Server, commitmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIUpdateCommitment(ctx context.Context, commitmentId string, body CommitmentsAPIUpdateCommitmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIUpdateCommitmentRequest(c.Server, commitmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIGetCommitmentAssignments(ctx context.Context, commitmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIGetCommitmentAssignmentsRequest(c.Server, commitmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIReplaceCommitmentAssignmentsWithBody(ctx context.Context, commitmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIReplaceCommitmentAssignmentsRequestWithBody(c.Server, commitmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIReplaceCommitmentAssignments(ctx context.Context, commitmentId string, body CommitmentsAPIReplaceCommitmentAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIReplaceCommitmentAssignmentsRequest(c.Server, commitmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CommitmentsAPIGetGCPCommitmentsScriptTemplate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCommitmentsAPIGetGCPCommitmentsScriptTemplateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCleanupScriptTemplate(ctx context.Context, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCleanupScriptTemplateRequest(c.Server, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExternalClusterAPIGetCredentialsScriptTemplate(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExternalClusterAPIGetCredentialsScriptTemplateRequest(c.Server, provider, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SSOAPIListSSOConnections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSSOAPIListSSOConnectionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SSOAPICreateSSOConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSSOAPICreateSSOConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SSOAPICreateSSOConnection(ctx context.Context, body SSOAPICreateSSOConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSSOAPICreateSSOConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SSOAPIDeleteSSOConnection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSSOAPIDeleteSSOConnectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SSOAPIGetSSOConnection(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSSOAPIGetSSOConnectionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SSOAPIUpdateSSOConnectionWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSSOAPIUpdateSSOConnectionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SSOAPIUpdateSSOConnection(ctx context.Context, id string, body SSOAPIUpdateSSOConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSSOAPIUpdateSSOConnectionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduledRebalancingAPIListAvailableRebalancingTZ(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduledRebalancingAPIListAvailableRebalancingTZRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIGetAgentStatus(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIGetAgentStatusRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIListWorkloadScalingPolicies(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIListWorkloadScalingPoliciesRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPICreateWorkloadScalingPolicyRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPICreateWorkloadScalingPolicy(ctx context.Context, clusterId string, body WorkloadOptimizationAPICreateWorkloadScalingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPICreateWorkloadScalingPolicyRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIDeleteWorkloadScalingPolicy(ctx context.Context, clusterId string, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIDeleteWorkloadScalingPolicyRequest(c.Server, clusterId, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIGetWorkloadScalingPolicy(ctx context.Context, clusterId string, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIGetWorkloadScalingPolicyRequest(c.Server, clusterId, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIUpdateWorkloadScalingPolicyRequestWithBody(c.Server, clusterId, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIUpdateWorkloadScalingPolicy(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIUpdateWorkloadScalingPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIUpdateWorkloadScalingPolicyRequest(c.Server, clusterId, policyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequestWithBody(c.Server, clusterId, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIAssignScalingPolicyWorkloads(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIAssignScalingPolicyWorkloadsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequest(c.Server, clusterId, policyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIListWorkloadEvents(ctx context.Context, clusterId string, params *WorkloadOptimizationAPIListWorkloadEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIListWorkloadEventsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIListWorkloads(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIListWorkloadsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIGetWorkloadsSummary(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIGetWorkloadsSummaryRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIGetWorkload(ctx context.Context, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIGetWorkloadRequest(c.Server, clusterId, workloadId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIUpdateWorkloadWithBody(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIUpdateWorkloadRequestWithBody(c.Server, clusterId, workloadId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIUpdateWorkload(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIUpdateWorkloadRequest(c.Server, clusterId, workloadId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIGetInstallCmd(ctx context.Context, params *WorkloadOptimizationAPIGetInstallCmdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIGetInstallCmdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIGetInstallScript(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIGetInstallScriptRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIUpdateWorkloadV2WithBody(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIUpdateWorkloadV2RequestWithBody(c.Server, clusterId, workloadId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadOptimizationAPIUpdateWorkloadV2(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadOptimizationAPIUpdateWorkloadV2Request(c.Server, clusterId, workloadId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAuthTokenAPIListAuthTokensRequest generates requests for AuthTokenAPIListAuthTokens
func NewAuthTokenAPIListAuthTokensRequest(server string, params *AuthTokenAPIListAuthTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.UserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ServiceAccountId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serviceAccountId", runtime.ParamLocationQuery, *params.ServiceAccountId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthTokenAPICreateAuthTokenRequest calls the generic AuthTokenAPICreateAuthToken builder with application/json body
func NewAuthTokenAPICreateAuthTokenRequest(server string, body AuthTokenAPICreateAuthTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthTokenAPICreateAuthTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewAuthTokenAPICreateAuthTokenRequestWithBody generates requests for AuthTokenAPICreateAuthToken with any type of body
func NewAuthTokenAPICreateAuthTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthTokenAPIDeleteAuthTokenRequest generates requests for AuthTokenAPIDeleteAuthToken
func NewAuthTokenAPIDeleteAuthTokenRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthTokenAPIGetAuthTokenRequest generates requests for AuthTokenAPIGetAuthToken
func NewAuthTokenAPIGetAuthTokenRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthTokenAPIUpdateAuthTokenRequest calls the generic AuthTokenAPIUpdateAuthToken builder with application/json body
func NewAuthTokenAPIUpdateAuthTokenRequest(server string, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthTokenAPIUpdateAuthTokenRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAuthTokenAPIUpdateAuthTokenRequestWithBody generates requests for AuthTokenAPIUpdateAuthToken with any type of body
func NewAuthTokenAPIUpdateAuthTokenRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersAPIListInvitationsRequest generates requests for UsersAPIListInvitations
func NewUsersAPIListInvitationsRequest(server string, params *UsersAPIListInvitationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageLimit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageCursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPICreateInvitationsRequest calls the generic UsersAPICreateInvitations builder with application/json body
func NewUsersAPICreateInvitationsRequest(server string, body UsersAPICreateInvitationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAPICreateInvitationsRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersAPICreateInvitationsRequestWithBody generates requests for UsersAPICreateInvitations with any type of body
func NewUsersAPICreateInvitationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersAPIDeleteInvitationRequest generates requests for UsersAPIDeleteInvitation
func NewUsersAPIDeleteInvitationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIClaimInvitationRequest calls the generic UsersAPIClaimInvitation builder with application/json body
func NewUsersAPIClaimInvitationRequest(server string, invitationId string, body UsersAPIClaimInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAPIClaimInvitationRequestWithBody(server, invitationId, "application/json", bodyReader)
}

// NewUsersAPIClaimInvitationRequestWithBody generates requests for UsersAPIClaimInvitation with any type of body
func NewUsersAPIClaimInvitationRequestWithBody(server string, invitationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invitationId", runtime.ParamLocationPath, invitationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEvictorAPIGetAdvancedConfigRequest generates requests for EvictorAPIGetAdvancedConfig
func NewEvictorAPIGetAdvancedConfigRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/evictor-advanced-config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEvictorAPIUpsertAdvancedConfigRequest calls the generic EvictorAPIUpsertAdvancedConfig builder with application/json body
func NewEvictorAPIUpsertAdvancedConfigRequest(server string, clusterId string, body EvictorAPIUpsertAdvancedConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEvictorAPIUpsertAdvancedConfigRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewEvictorAPIUpsertAdvancedConfigRequestWithBody generates requests for EvictorAPIUpsertAdvancedConfig with any type of body
func NewEvictorAPIUpsertAdvancedConfigRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/evictor-advanced-config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeTemplatesAPIFilterInstanceTypesRequest calls the generic NodeTemplatesAPIFilterInstanceTypes builder with application/json body
func NewNodeTemplatesAPIFilterInstanceTypesRequest(server string, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeTemplatesAPIFilterInstanceTypesRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewNodeTemplatesAPIFilterInstanceTypesRequestWithBody generates requests for NodeTemplatesAPIFilterInstanceTypes with any type of body
func NewNodeTemplatesAPIFilterInstanceTypesRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/filter-instance-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeTemplatesAPIGenerateNodeTemplatesRequest generates requests for NodeTemplatesAPIGenerateNodeTemplates
func NewNodeTemplatesAPIGenerateNodeTemplatesRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/generate-node-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeConfigurationAPIListConfigurationsRequest generates requests for NodeConfigurationAPIListConfigurations
func NewNodeConfigurationAPIListConfigurationsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeConfigurationAPICreateConfigurationRequest calls the generic NodeConfigurationAPICreateConfiguration builder with application/json body
func NewNodeConfigurationAPICreateConfigurationRequest(server string, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeConfigurationAPICreateConfigurationRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewNodeConfigurationAPICreateConfigurationRequestWithBody generates requests for NodeConfigurationAPICreateConfiguration with any type of body
func NewNodeConfigurationAPICreateConfigurationRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeConfigurationAPIGetSuggestedConfigurationRequest generates requests for NodeConfigurationAPIGetSuggestedConfiguration
func NewNodeConfigurationAPIGetSuggestedConfigurationRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations/suggestions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeConfigurationAPIDeleteConfigurationRequest generates requests for NodeConfigurationAPIDeleteConfiguration
func NewNodeConfigurationAPIDeleteConfigurationRequest(server string, clusterId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeConfigurationAPIGetConfigurationRequest generates requests for NodeConfigurationAPIGetConfiguration
func NewNodeConfigurationAPIGetConfigurationRequest(server string, clusterId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeConfigurationAPIUpdateConfigurationRequest calls the generic NodeConfigurationAPIUpdateConfiguration builder with application/json body
func NewNodeConfigurationAPIUpdateConfigurationRequest(server string, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeConfigurationAPIUpdateConfigurationRequestWithBody(server, clusterId, id, "application/json", bodyReader)
}

// NewNodeConfigurationAPIUpdateConfigurationRequestWithBody generates requests for NodeConfigurationAPIUpdateConfiguration with any type of body
func NewNodeConfigurationAPIUpdateConfigurationRequestWithBody(server string, clusterId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeConfigurationAPISetDefaultRequest generates requests for NodeConfigurationAPISetDefault
func NewNodeConfigurationAPISetDefaultRequest(server string, clusterId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-configurations/%s/default", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPoliciesAPIGetClusterNodeConstraintsRequest generates requests for PoliciesAPIGetClusterNodeConstraints
func NewPoliciesAPIGetClusterNodeConstraintsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-constraints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeTemplatesAPIListNodeTemplatesRequest generates requests for NodeTemplatesAPIListNodeTemplates
func NewNodeTemplatesAPIListNodeTemplatesRequest(server string, clusterId string, params *NodeTemplatesAPIListNodeTemplatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeDefault != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeDefault", runtime.ParamLocationQuery, *params.IncludeDefault); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeTemplatesAPICreateNodeTemplateRequest calls the generic NodeTemplatesAPICreateNodeTemplate builder with application/json body
func NewNodeTemplatesAPICreateNodeTemplateRequest(server string, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeTemplatesAPICreateNodeTemplateRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewNodeTemplatesAPICreateNodeTemplateRequestWithBody generates requests for NodeTemplatesAPICreateNodeTemplate with any type of body
func NewNodeTemplatesAPICreateNodeTemplateRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNodeTemplatesAPIDeleteNodeTemplateRequest generates requests for NodeTemplatesAPIDeleteNodeTemplate
func NewNodeTemplatesAPIDeleteNodeTemplateRequest(server string, clusterId string, nodeTemplateName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeTemplateName", runtime.ParamLocationPath, nodeTemplateName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeTemplatesAPIUpdateNodeTemplateRequest calls the generic NodeTemplatesAPIUpdateNodeTemplate builder with application/json body
func NewNodeTemplatesAPIUpdateNodeTemplateRequest(server string, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNodeTemplatesAPIUpdateNodeTemplateRequestWithBody(server, clusterId, nodeTemplateName, "application/json", bodyReader)
}

// NewNodeTemplatesAPIUpdateNodeTemplateRequestWithBody generates requests for NodeTemplatesAPIUpdateNodeTemplate with any type of body
func NewNodeTemplatesAPIUpdateNodeTemplateRequestWithBody(server string, clusterId string, nodeTemplateName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeTemplateName", runtime.ParamLocationPath, nodeTemplateName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/node-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPoliciesAPIGetClusterPoliciesRequest generates requests for PoliciesAPIGetClusterPolicies
func NewPoliciesAPIGetClusterPoliciesRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPoliciesAPIUpsertClusterPoliciesRequest calls the generic PoliciesAPIUpsertClusterPolicies builder with application/json body
func NewPoliciesAPIUpsertClusterPoliciesRequest(server string, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPoliciesAPIUpsertClusterPoliciesRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewPoliciesAPIUpsertClusterPoliciesRequestWithBody generates requests for PoliciesAPIUpsertClusterPolicies with any type of body
func NewPoliciesAPIUpsertClusterPoliciesRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduledRebalancingAPIListRebalancingJobsRequest generates requests for ScheduledRebalancingAPIListRebalancingJobs
func NewScheduledRebalancingAPIListRebalancingJobsRequest(server string, clusterId string, params *ScheduledRebalancingAPIListRebalancingJobsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.RebalancingScheduleId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rebalancingScheduleId", runtime.ParamLocationQuery, *params.RebalancingScheduleId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduledRebalancingAPICreateRebalancingJobRequest calls the generic ScheduledRebalancingAPICreateRebalancingJob builder with application/json body
func NewScheduledRebalancingAPICreateRebalancingJobRequest(server string, clusterId string, body ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduledRebalancingAPICreateRebalancingJobRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewScheduledRebalancingAPICreateRebalancingJobRequestWithBody generates requests for ScheduledRebalancingAPICreateRebalancingJob with any type of body
func NewScheduledRebalancingAPICreateRebalancingJobRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-jobs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduledRebalancingAPIDeleteRebalancingJobRequest generates requests for ScheduledRebalancingAPIDeleteRebalancingJob
func NewScheduledRebalancingAPIDeleteRebalancingJobRequest(server string, clusterId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-jobs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduledRebalancingAPIGetRebalancingJobRequest generates requests for ScheduledRebalancingAPIGetRebalancingJob
func NewScheduledRebalancingAPIGetRebalancingJobRequest(server string, clusterId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-jobs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduledRebalancingAPIUpdateRebalancingJobRequest calls the generic ScheduledRebalancingAPIUpdateRebalancingJob builder with application/json body
func NewScheduledRebalancingAPIUpdateRebalancingJobRequest(server string, clusterId string, id string, body ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduledRebalancingAPIUpdateRebalancingJobRequestWithBody(server, clusterId, id, "application/json", bodyReader)
}

// NewScheduledRebalancingAPIUpdateRebalancingJobRequestWithBody generates requests for ScheduledRebalancingAPIUpdateRebalancingJob with any type of body
func NewScheduledRebalancingAPIUpdateRebalancingJobRequestWithBody(server string, clusterId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-jobs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduledRebalancingAPIPreviewRebalancingScheduleRequest calls the generic ScheduledRebalancingAPIPreviewRebalancingSchedule builder with application/json body
func NewScheduledRebalancingAPIPreviewRebalancingScheduleRequest(server string, clusterId string, body ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduledRebalancingAPIPreviewRebalancingScheduleRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewScheduledRebalancingAPIPreviewRebalancingScheduleRequestWithBody generates requests for ScheduledRebalancingAPIPreviewRebalancingSchedule with any type of body
func NewScheduledRebalancingAPIPreviewRebalancingScheduleRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/clusters/%s/rebalancing-schedule-preview", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIListClustersRequest generates requests for ExternalClusterAPIListClusters
func NewExternalClusterAPIListClustersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIRegisterClusterRequest calls the generic ExternalClusterAPIRegisterCluster builder with application/json body
func NewExternalClusterAPIRegisterClusterRequest(server string, body ExternalClusterAPIRegisterClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIRegisterClusterRequestWithBody(server, "application/json", bodyReader)
}

// NewExternalClusterAPIRegisterClusterRequestWithBody generates requests for ExternalClusterAPIRegisterCluster with any type of body
func NewExternalClusterAPIRegisterClusterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIGetListNodesFiltersRequest generates requests for ExternalClusterAPIGetListNodesFilters
func NewExternalClusterAPIGetListNodesFiltersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/filters/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOperationsAPIGetOperationRequest generates requests for OperationsAPIGetOperation
func NewOperationsAPIGetOperationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/operations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDeleteClusterRequest generates requests for ExternalClusterAPIDeleteCluster
func NewExternalClusterAPIDeleteClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetClusterRequest generates requests for ExternalClusterAPIGetCluster
func NewExternalClusterAPIGetClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIUpdateClusterRequest calls the generic ExternalClusterAPIUpdateCluster builder with application/json body
func NewExternalClusterAPIUpdateClusterRequest(server string, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIUpdateClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIUpdateClusterRequestWithBody generates requests for ExternalClusterAPIUpdateCluster with any type of body
func NewExternalClusterAPIUpdateClusterRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIDeleteAssumeRolePrincipalRequest generates requests for ExternalClusterAPIDeleteAssumeRolePrincipal
func NewExternalClusterAPIDeleteAssumeRolePrincipalRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/assume-role-principal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetAssumeRolePrincipalRequest generates requests for ExternalClusterAPIGetAssumeRolePrincipal
func NewExternalClusterAPIGetAssumeRolePrincipalRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/assume-role-principal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPICreateAssumeRolePrincipalRequest generates requests for ExternalClusterAPICreateAssumeRolePrincipal
func NewExternalClusterAPICreateAssumeRolePrincipalRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/assume-role-principal", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetAssumeRoleUserRequest generates requests for ExternalClusterAPIGetAssumeRoleUser
func NewExternalClusterAPIGetAssumeRoleUserRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/assume-role-user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCleanupScriptRequest generates requests for ExternalClusterAPIGetCleanupScript
func NewExternalClusterAPIGetCleanupScriptRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/cleanup-script", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCredentialsScriptRequest generates requests for ExternalClusterAPIGetCredentialsScript
func NewExternalClusterAPIGetCredentialsScriptRequest(server string, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/credentials-script", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CrossRole != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "crossRole", runtime.ParamLocationQuery, *params.CrossRole); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NvidiaDevicePlugin != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nvidiaDevicePlugin", runtime.ParamLocationQuery, *params.NvidiaDevicePlugin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InstallSecurityAgent != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "installSecurityAgent", runtime.ParamLocationQuery, *params.InstallSecurityAgent); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InstallAutoscalerAgent != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "installAutoscalerAgent", runtime.ParamLocationQuery, *params.InstallAutoscalerAgent); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InstallGpuMetricsExporter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "installGpuMetricsExporter", runtime.ParamLocationQuery, *params.InstallGpuMetricsExporter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDisconnectClusterRequest calls the generic ExternalClusterAPIDisconnectCluster builder with application/json body
func NewExternalClusterAPIDisconnectClusterRequest(server string, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIDisconnectClusterRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIDisconnectClusterRequestWithBody generates requests for ExternalClusterAPIDisconnectCluster with any type of body
func NewExternalClusterAPIDisconnectClusterRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/disconnect", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIHandleCloudEventRequest calls the generic ExternalClusterAPIHandleCloudEvent builder with application/json body
func NewExternalClusterAPIHandleCloudEventRequest(server string, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIHandleCloudEventRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIHandleCloudEventRequestWithBody generates requests for ExternalClusterAPIHandleCloudEvent with any type of body
func NewExternalClusterAPIHandleCloudEventRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIListNodesRequest generates requests for ExternalClusterAPIListNodes
func NewExternalClusterAPIListNodesRequest(server string, clusterId string, params *ExternalClusterAPIListNodesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageLimit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageCursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeId", runtime.ParamLocationQuery, *params.NodeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeStatus", runtime.ParamLocationQuery, *params.NodeStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InstanceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instanceType", runtime.ParamLocationQuery, *params.InstanceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LifecycleType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifecycleType", runtime.ParamLocationQuery, *params.LifecycleType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RemovalDisabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "removalDisabled", runtime.ParamLocationQuery, *params.RemovalDisabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Unschedulable != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unschedulable", runtime.ParamLocationQuery, *params.Unschedulable); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Zone != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "zone", runtime.ParamLocationQuery, *params.Zone); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeConfigurationName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeConfigurationName", runtime.ParamLocationQuery, *params.NodeConfigurationName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeConfigurationVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeConfigurationVersion", runtime.ParamLocationQuery, *params.NodeConfigurationVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeTemplateName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeTemplateName", runtime.ParamLocationQuery, *params.NodeTemplateName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeTemplateVersion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeTemplateVersion", runtime.ParamLocationQuery, *params.NodeTemplateVersion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NodeName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodeName", runtime.ParamLocationQuery, *params.NodeName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeDeleting != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeDeleting", runtime.ParamLocationQuery, *params.ExcludeDeleting); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIAddNodeRequest calls the generic ExternalClusterAPIAddNode builder with application/json body
func NewExternalClusterAPIAddNodeRequest(server string, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIAddNodeRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIAddNodeRequestWithBody generates requests for ExternalClusterAPIAddNode with any type of body
func NewExternalClusterAPIAddNodeRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIDeleteNodeRequest generates requests for ExternalClusterAPIDeleteNode
func NewExternalClusterAPIDeleteNodeRequest(server string, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DrainTimeout != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "drainTimeout", runtime.ParamLocationQuery, *params.DrainTimeout); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ForceDelete != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "forceDelete", runtime.ParamLocationQuery, *params.ForceDelete); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetNodeRequest generates requests for ExternalClusterAPIGetNode
func NewExternalClusterAPIGetNodeRequest(server string, clusterId string, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIDrainNodeRequest calls the generic ExternalClusterAPIDrainNode builder with application/json body
func NewExternalClusterAPIDrainNodeRequest(server string, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIDrainNodeRequestWithBody(server, clusterId, nodeId, "application/json", bodyReader)
}

// NewExternalClusterAPIDrainNodeRequestWithBody generates requests for ExternalClusterAPIDrainNode with any type of body
func NewExternalClusterAPIDrainNodeRequestWithBody(server string, clusterId string, nodeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "nodeId", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/nodes/%s/drain", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPIReconcileClusterRequest generates requests for ExternalClusterAPIReconcileCluster
func NewExternalClusterAPIReconcileClusterRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/reconcile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIUpdateClusterTagsRequest calls the generic ExternalClusterAPIUpdateClusterTags builder with application/json body
func NewExternalClusterAPIUpdateClusterTagsRequest(server string, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExternalClusterAPIUpdateClusterTagsRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewExternalClusterAPIUpdateClusterTagsRequestWithBody generates requests for ExternalClusterAPIUpdateClusterTags with any type of body
func NewExternalClusterAPIUpdateClusterTagsRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExternalClusterAPICreateClusterTokenRequest generates requests for ExternalClusterAPICreateClusterToken
func NewExternalClusterAPICreateClusterTokenRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/external-clusters/%s/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNodeConfigurationAPIListMaxPodsPresetsRequest generates requests for NodeConfigurationAPIListMaxPodsPresets
func NewNodeConfigurationAPIListMaxPodsPresetsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/kubernetes/maxpods-formula-presets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPICurrentUserProfileRequest generates requests for UsersAPICurrentUserProfile
func NewUsersAPICurrentUserProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIUpdateCurrentUserProfileRequest calls the generic UsersAPIUpdateCurrentUserProfile builder with application/json body
func NewUsersAPIUpdateCurrentUserProfileRequest(server string, body UsersAPIUpdateCurrentUserProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAPIUpdateCurrentUserProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersAPIUpdateCurrentUserProfileRequestWithBody generates requests for UsersAPIUpdateCurrentUserProfile with any type of body
func NewUsersAPIUpdateCurrentUserProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersAPIListOrganizationsRequest generates requests for UsersAPIListOrganizations
func NewUsersAPIListOrganizationsRequest(server string, params *UsersAPIListOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.UserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Username != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPICreateOrganizationRequest calls the generic UsersAPICreateOrganization builder with application/json body
func NewUsersAPICreateOrganizationRequest(server string, body UsersAPICreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAPICreateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersAPICreateOrganizationRequestWithBody generates requests for UsersAPICreateOrganization with any type of body
func NewUsersAPICreateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInventoryAPIGetOrganizationReservationsBalanceRequest generates requests for InventoryAPIGetOrganizationReservationsBalance
func NewInventoryAPIGetOrganizationReservationsBalanceRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/reservations/balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInventoryAPIGetOrganizationResourceUsageRequest generates requests for InventoryAPIGetOrganizationResourceUsage
func NewInventoryAPIGetOrganizationResourceUsageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/resource-usage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIDeleteOrganizationRequest generates requests for UsersAPIDeleteOrganization
func NewUsersAPIDeleteOrganizationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIGetOrganizationRequest generates requests for UsersAPIGetOrganization
func NewUsersAPIGetOrganizationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIEditOrganizationRequest calls the generic UsersAPIEditOrganization builder with application/json body
func NewUsersAPIEditOrganizationRequest(server string, id string, body UsersAPIEditOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAPIEditOrganizationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUsersAPIEditOrganizationRequestWithBody generates requests for UsersAPIEditOrganization with any type of body
func NewUsersAPIEditOrganizationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInventoryAPISyncClusterResourcesRequest generates requests for InventoryAPISyncClusterResources
func NewInventoryAPISyncClusterResourcesRequest(server string, organizationId string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/clusters/%s/sync-resource-usage", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInventoryAPIGetReservationsRequest generates requests for InventoryAPIGetReservations
func NewInventoryAPIGetReservationsRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/reservations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInventoryAPIAddReservationRequest calls the generic InventoryAPIAddReservation builder with application/json body
func NewInventoryAPIAddReservationRequest(server string, organizationId string, body InventoryAPIAddReservationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInventoryAPIAddReservationRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewInventoryAPIAddReservationRequestWithBody generates requests for InventoryAPIAddReservation with any type of body
func NewInventoryAPIAddReservationRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/reservations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInventoryAPIGetReservationsBalanceRequest generates requests for InventoryAPIGetReservationsBalance
func NewInventoryAPIGetReservationsBalanceRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/reservations/balance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInventoryAPIOverwriteReservationsRequest calls the generic InventoryAPIOverwriteReservations builder with application/json body
func NewInventoryAPIOverwriteReservationsRequest(server string, organizationId string, body InventoryAPIOverwriteReservationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInventoryAPIOverwriteReservationsRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewInventoryAPIOverwriteReservationsRequestWithBody generates requests for InventoryAPIOverwriteReservations with any type of body
func NewInventoryAPIOverwriteReservationsRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/reservations/overwrite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInventoryAPIDeleteReservationRequest generates requests for InventoryAPIDeleteReservation
func NewInventoryAPIDeleteReservationRequest(server string, organizationId string, reservationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "reservationId", runtime.ParamLocationPath, reservationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/reservations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIListOrganizationUsersRequest generates requests for UsersAPIListOrganizationUsers
func NewUsersAPIListOrganizationUsersRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIAddUserToOrganizationRequest calls the generic UsersAPIAddUserToOrganization builder with application/json body
func NewUsersAPIAddUserToOrganizationRequest(server string, organizationId string, body UsersAPIAddUserToOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAPIAddUserToOrganizationRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewUsersAPIAddUserToOrganizationRequestWithBody generates requests for UsersAPIAddUserToOrganization with any type of body
func NewUsersAPIAddUserToOrganizationRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersAPIRemoveUserFromOrganizationRequest generates requests for UsersAPIRemoveUserFromOrganization
func NewUsersAPIRemoveUserFromOrganizationRequest(server string, organizationId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersAPIUpdateOrganizationUserRequest calls the generic UsersAPIUpdateOrganizationUser builder with application/json body
func NewUsersAPIUpdateOrganizationUserRequest(server string, organizationId string, userId string, body UsersAPIUpdateOrganizationUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersAPIUpdateOrganizationUserRequestWithBody(server, organizationId, userId, "application/json", bodyReader)
}

// NewUsersAPIUpdateOrganizationUserRequestWithBody generates requests for UsersAPIUpdateOrganizationUser with any type of body
func NewUsersAPIUpdateOrganizationUserRequestWithBody(server string, organizationId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduledRebalancingAPIListRebalancingSchedulesRequest generates requests for ScheduledRebalancingAPIListRebalancingSchedules
func NewScheduledRebalancingAPIListRebalancingSchedulesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rebalancing-schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduledRebalancingAPICreateRebalancingScheduleRequest calls the generic ScheduledRebalancingAPICreateRebalancingSchedule builder with application/json body
func NewScheduledRebalancingAPICreateRebalancingScheduleRequest(server string, body ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduledRebalancingAPICreateRebalancingScheduleRequestWithBody(server, "application/json", bodyReader)
}

// NewScheduledRebalancingAPICreateRebalancingScheduleRequestWithBody generates requests for ScheduledRebalancingAPICreateRebalancingSchedule with any type of body
func NewScheduledRebalancingAPICreateRebalancingScheduleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rebalancing-schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduledRebalancingAPIUpdateRebalancingScheduleRequest calls the generic ScheduledRebalancingAPIUpdateRebalancingSchedule builder with application/json body
func NewScheduledRebalancingAPIUpdateRebalancingScheduleRequest(server string, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, body ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduledRebalancingAPIUpdateRebalancingScheduleRequestWithBody(server, params, "application/json", bodyReader)
}

// NewScheduledRebalancingAPIUpdateRebalancingScheduleRequestWithBody generates requests for ScheduledRebalancingAPIUpdateRebalancingSchedule with any type of body
func NewScheduledRebalancingAPIUpdateRebalancingScheduleRequestWithBody(server string, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rebalancing-schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduledRebalancingAPIDeleteRebalancingScheduleRequest generates requests for ScheduledRebalancingAPIDeleteRebalancingSchedule
func NewScheduledRebalancingAPIDeleteRebalancingScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rebalancing-schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduledRebalancingAPIGetRebalancingScheduleRequest generates requests for ScheduledRebalancingAPIGetRebalancingSchedule
func NewScheduledRebalancingAPIGetRebalancingScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rebalancing-schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPIGetCommitmentsAssignmentsRequest generates requests for CommitmentsAPIGetCommitmentsAssignments
func NewCommitmentsAPIGetCommitmentsAssignmentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/assignments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPICreateCommitmentAssignmentRequest generates requests for CommitmentsAPICreateCommitmentAssignment
func NewCommitmentsAPICreateCommitmentAssignmentRequest(server string, params *CommitmentsAPICreateCommitmentAssignmentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/assignments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, params.ClusterId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commitmentId", runtime.ParamLocationQuery, params.CommitmentId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPIDeleteCommitmentAssignmentRequest generates requests for CommitmentsAPIDeleteCommitmentAssignment
func NewCommitmentsAPIDeleteCommitmentAssignmentRequest(server string, assignmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "assignmentId", runtime.ParamLocationPath, assignmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/assignments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPIGetCommitmentsRequest generates requests for CommitmentsAPIGetCommitments
func NewCommitmentsAPIGetCommitmentsRequest(server string, params *CommitmentsAPIGetCommitmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeUsage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeUsage", runtime.ParamLocationQuery, *params.IncludeUsage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPIImportAzureReservationsRequest calls the generic CommitmentsAPIImportAzureReservations builder with application/json body
func NewCommitmentsAPIImportAzureReservationsRequest(server string, params *CommitmentsAPIImportAzureReservationsParams, body CommitmentsAPIImportAzureReservationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommitmentsAPIImportAzureReservationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommitmentsAPIImportAzureReservationsRequestWithBody generates requests for CommitmentsAPIImportAzureReservations with any type of body
func NewCommitmentsAPIImportAzureReservationsRequestWithBody(server string, params *CommitmentsAPIImportAzureReservationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments/import/azure/reservation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Behaviour != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "behaviour", runtime.ParamLocationQuery, *params.Behaviour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommitmentsAPIImportGCPCommitmentsRequest calls the generic CommitmentsAPIImportGCPCommitments builder with application/json body
func NewCommitmentsAPIImportGCPCommitmentsRequest(server string, params *CommitmentsAPIImportGCPCommitmentsParams, body CommitmentsAPIImportGCPCommitmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommitmentsAPIImportGCPCommitmentsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCommitmentsAPIImportGCPCommitmentsRequestWithBody generates requests for CommitmentsAPIImportGCPCommitments with any type of body
func NewCommitmentsAPIImportGCPCommitmentsRequestWithBody(server string, params *CommitmentsAPIImportGCPCommitmentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments/import/gcp/cud")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Behaviour != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "behaviour", runtime.ParamLocationQuery, *params.Behaviour); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommitmentsAPIGetGCPCommitmentsImportScriptRequest generates requests for CommitmentsAPIGetGCPCommitmentsImportScript
func NewCommitmentsAPIGetGCPCommitmentsImportScriptRequest(server string, params *CommitmentsAPIGetGCPCommitmentsImportScriptParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments/import/gcp/cud/script")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Projects != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projects", runtime.ParamLocationQuery, *params.Projects); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPIDeleteCommitmentRequest generates requests for CommitmentsAPIDeleteCommitment
func NewCommitmentsAPIDeleteCommitmentRequest(server string, commitmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commitmentId", runtime.ParamLocationPath, commitmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPIUpdateCommitmentRequest calls the generic CommitmentsAPIUpdateCommitment builder with application/json body
func NewCommitmentsAPIUpdateCommitmentRequest(server string, commitmentId string, body CommitmentsAPIUpdateCommitmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommitmentsAPIUpdateCommitmentRequestWithBody(server, commitmentId, "application/json", bodyReader)
}

// NewCommitmentsAPIUpdateCommitmentRequestWithBody generates requests for CommitmentsAPIUpdateCommitment with any type of body
func NewCommitmentsAPIUpdateCommitmentRequestWithBody(server string, commitmentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commitmentId", runtime.ParamLocationPath, commitmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommitmentsAPIGetCommitmentAssignmentsRequest generates requests for CommitmentsAPIGetCommitmentAssignments
func NewCommitmentsAPIGetCommitmentAssignmentsRequest(server string, commitmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commitmentId", runtime.ParamLocationPath, commitmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments/%s/assignments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCommitmentsAPIReplaceCommitmentAssignmentsRequest calls the generic CommitmentsAPIReplaceCommitmentAssignments builder with application/json body
func NewCommitmentsAPIReplaceCommitmentAssignmentsRequest(server string, commitmentId string, body CommitmentsAPIReplaceCommitmentAssignmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCommitmentsAPIReplaceCommitmentAssignmentsRequestWithBody(server, commitmentId, "application/json", bodyReader)
}

// NewCommitmentsAPIReplaceCommitmentAssignmentsRequestWithBody generates requests for CommitmentsAPIReplaceCommitmentAssignments with any type of body
func NewCommitmentsAPIReplaceCommitmentAssignmentsRequestWithBody(server string, commitmentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commitmentId", runtime.ParamLocationPath, commitmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/savings/commitments/%s/assignments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCommitmentsAPIGetGCPCommitmentsScriptTemplateRequest generates requests for CommitmentsAPIGetGCPCommitmentsScriptTemplate
func NewCommitmentsAPIGetGCPCommitmentsScriptTemplateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/commitments/gcp/cud/import.sh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCleanupScriptTemplateRequest generates requests for ExternalClusterAPIGetCleanupScriptTemplate
func NewExternalClusterAPIGetCleanupScriptTemplateRequest(server string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/%s/cleanup.sh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExternalClusterAPIGetCredentialsScriptTemplateRequest generates requests for ExternalClusterAPIGetCredentialsScriptTemplate
func NewExternalClusterAPIGetCredentialsScriptTemplateRequest(server string, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scripts/%s/onboarding.sh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CrossRole != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "crossRole", runtime.ParamLocationQuery, *params.CrossRole); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSSOAPIListSSOConnectionsRequest generates requests for SSOAPIListSSOConnections
func NewSSOAPIListSSOConnectionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso-connections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSSOAPICreateSSOConnectionRequest calls the generic SSOAPICreateSSOConnection builder with application/json body
func NewSSOAPICreateSSOConnectionRequest(server string, body SSOAPICreateSSOConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSSOAPICreateSSOConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewSSOAPICreateSSOConnectionRequestWithBody generates requests for SSOAPICreateSSOConnection with any type of body
func NewSSOAPICreateSSOConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso-connections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSSOAPIDeleteSSOConnectionRequest generates requests for SSOAPIDeleteSSOConnection
func NewSSOAPIDeleteSSOConnectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso-connections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSSOAPIGetSSOConnectionRequest generates requests for SSOAPIGetSSOConnection
func NewSSOAPIGetSSOConnectionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso-connections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSSOAPIUpdateSSOConnectionRequest calls the generic SSOAPIUpdateSSOConnection builder with application/json body
func NewSSOAPIUpdateSSOConnectionRequest(server string, id string, body SSOAPIUpdateSSOConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSSOAPIUpdateSSOConnectionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSSOAPIUpdateSSOConnectionRequestWithBody generates requests for SSOAPIUpdateSSOConnection with any type of body
func NewSSOAPIUpdateSSOConnectionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sso-connections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScheduledRebalancingAPIListAvailableRebalancingTZRequest generates requests for ScheduledRebalancingAPIListAvailableRebalancingTZ
func NewScheduledRebalancingAPIListAvailableRebalancingTZRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/time-zones")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIGetAgentStatusRequest generates requests for WorkloadOptimizationAPIGetAgentStatus
func NewWorkloadOptimizationAPIGetAgentStatusRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/components/workload-autoscaler", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIListWorkloadScalingPoliciesRequest generates requests for WorkloadOptimizationAPIListWorkloadScalingPolicies
func NewWorkloadOptimizationAPIListWorkloadScalingPoliciesRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPICreateWorkloadScalingPolicyRequest calls the generic WorkloadOptimizationAPICreateWorkloadScalingPolicy builder with application/json body
func NewWorkloadOptimizationAPICreateWorkloadScalingPolicyRequest(server string, clusterId string, body WorkloadOptimizationAPICreateWorkloadScalingPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadOptimizationAPICreateWorkloadScalingPolicyRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewWorkloadOptimizationAPICreateWorkloadScalingPolicyRequestWithBody generates requests for WorkloadOptimizationAPICreateWorkloadScalingPolicy with any type of body
func NewWorkloadOptimizationAPICreateWorkloadScalingPolicyRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadOptimizationAPIDeleteWorkloadScalingPolicyRequest generates requests for WorkloadOptimizationAPIDeleteWorkloadScalingPolicy
func NewWorkloadOptimizationAPIDeleteWorkloadScalingPolicyRequest(server string, clusterId string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIGetWorkloadScalingPolicyRequest generates requests for WorkloadOptimizationAPIGetWorkloadScalingPolicy
func NewWorkloadOptimizationAPIGetWorkloadScalingPolicyRequest(server string, clusterId string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIUpdateWorkloadScalingPolicyRequest calls the generic WorkloadOptimizationAPIUpdateWorkloadScalingPolicy builder with application/json body
func NewWorkloadOptimizationAPIUpdateWorkloadScalingPolicyRequest(server string, clusterId string, policyId string, body WorkloadOptimizationAPIUpdateWorkloadScalingPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadOptimizationAPIUpdateWorkloadScalingPolicyRequestWithBody(server, clusterId, policyId, "application/json", bodyReader)
}

// NewWorkloadOptimizationAPIUpdateWorkloadScalingPolicyRequestWithBody generates requests for WorkloadOptimizationAPIUpdateWorkloadScalingPolicy with any type of body
func NewWorkloadOptimizationAPIUpdateWorkloadScalingPolicyRequestWithBody(server string, clusterId string, policyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/policies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequest calls the generic WorkloadOptimizationAPIAssignScalingPolicyWorkloads builder with application/json body
func NewWorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequest(server string, clusterId string, policyId string, body WorkloadOptimizationAPIAssignScalingPolicyWorkloadsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequestWithBody(server, clusterId, policyId, "application/json", bodyReader)
}

// NewWorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequestWithBody generates requests for WorkloadOptimizationAPIAssignScalingPolicyWorkloads with any type of body
func NewWorkloadOptimizationAPIAssignScalingPolicyWorkloadsRequestWithBody(server string, clusterId string, policyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policyId", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/policies/%s/workloads", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadOptimizationAPIListWorkloadEventsRequest generates requests for WorkloadOptimizationAPIListWorkloadEvents
func NewWorkloadOptimizationAPIListWorkloadEventsRequest(server string, clusterId string, params *WorkloadOptimizationAPIListWorkloadEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/workload-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.WorkloadId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workloadId", runtime.ParamLocationQuery, *params.WorkloadId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageLimit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.limit", runtime.ParamLocationQuery, *params.PageLimit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageCursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page.cursor", runtime.ParamLocationQuery, *params.PageCursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FromDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromDate", runtime.ParamLocationQuery, *params.FromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toDate", runtime.ParamLocationQuery, *params.ToDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WorkloadName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workloadName", runtime.ParamLocationQuery, *params.WorkloadName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIListWorkloadsRequest generates requests for WorkloadOptimizationAPIListWorkloads
func NewWorkloadOptimizationAPIListWorkloadsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/workloads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIGetWorkloadsSummaryRequest generates requests for WorkloadOptimizationAPIGetWorkloadsSummary
func NewWorkloadOptimizationAPIGetWorkloadsSummaryRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/workloads-summary", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIGetWorkloadRequest generates requests for WorkloadOptimizationAPIGetWorkload
func NewWorkloadOptimizationAPIGetWorkloadRequest(server string, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkloadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadId", runtime.ParamLocationPath, workloadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeMetrics != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeMetrics", runtime.ParamLocationQuery, *params.IncludeMetrics); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FromTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fromTime", runtime.ParamLocationQuery, *params.FromTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "toTime", runtime.ParamLocationQuery, *params.ToTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIUpdateWorkloadRequest calls the generic WorkloadOptimizationAPIUpdateWorkload builder with application/json body
func NewWorkloadOptimizationAPIUpdateWorkloadRequest(server string, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadOptimizationAPIUpdateWorkloadRequestWithBody(server, clusterId, workloadId, "application/json", bodyReader)
}

// NewWorkloadOptimizationAPIUpdateWorkloadRequestWithBody generates requests for WorkloadOptimizationAPIUpdateWorkload with any type of body
func NewWorkloadOptimizationAPIUpdateWorkloadRequestWithBody(server string, clusterId string, workloadId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadId", runtime.ParamLocationPath, workloadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/clusters/%s/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadOptimizationAPIGetInstallCmdRequest generates requests for WorkloadOptimizationAPIGetInstallCmd
func NewWorkloadOptimizationAPIGetInstallCmdRequest(server string, params *WorkloadOptimizationAPIGetInstallCmdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/scripts/workload-autoscaler-install")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clusterId", runtime.ParamLocationQuery, params.ClusterId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIGetInstallScriptRequest generates requests for WorkloadOptimizationAPIGetInstallScript
func NewWorkloadOptimizationAPIGetInstallScriptRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workload-autoscaling/scripts/workload-autoscaler-install.sh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadOptimizationAPIUpdateWorkloadV2Request calls the generic WorkloadOptimizationAPIUpdateWorkloadV2 builder with application/json body
func NewWorkloadOptimizationAPIUpdateWorkloadV2Request(server string, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadOptimizationAPIUpdateWorkloadV2RequestWithBody(server, clusterId, workloadId, "application/json", bodyReader)
}

// NewWorkloadOptimizationAPIUpdateWorkloadV2RequestWithBody generates requests for WorkloadOptimizationAPIUpdateWorkloadV2 with any type of body
func NewWorkloadOptimizationAPIUpdateWorkloadV2RequestWithBody(server string, clusterId string, workloadId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "workloadId", runtime.ParamLocationPath, workloadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/workload-autoscaling/clusters/%s/workloads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AuthTokenAPIListAuthTokens request
	AuthTokenAPIListAuthTokensWithResponse(ctx context.Context, params *AuthTokenAPIListAuthTokensParams) (*AuthTokenAPIListAuthTokensResponse, error)

	// AuthTokenAPICreateAuthToken request  with any body
	AuthTokenAPICreateAuthTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*AuthTokenAPICreateAuthTokenResponse, error)

	AuthTokenAPICreateAuthTokenWithResponse(ctx context.Context, body AuthTokenAPICreateAuthTokenJSONRequestBody) (*AuthTokenAPICreateAuthTokenResponse, error)

	// AuthTokenAPIDeleteAuthToken request
	AuthTokenAPIDeleteAuthTokenWithResponse(ctx context.Context, id string) (*AuthTokenAPIDeleteAuthTokenResponse, error)

	// AuthTokenAPIGetAuthToken request
	AuthTokenAPIGetAuthTokenWithResponse(ctx context.Context, id string) (*AuthTokenAPIGetAuthTokenResponse, error)

	// AuthTokenAPIUpdateAuthToken request  with any body
	AuthTokenAPIUpdateAuthTokenWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*AuthTokenAPIUpdateAuthTokenResponse, error)

	AuthTokenAPIUpdateAuthTokenWithResponse(ctx context.Context, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody) (*AuthTokenAPIUpdateAuthTokenResponse, error)

	// UsersAPIListInvitations request
	UsersAPIListInvitationsWithResponse(ctx context.Context, params *UsersAPIListInvitationsParams) (*UsersAPIListInvitationsResponse, error)

	// UsersAPICreateInvitations request  with any body
	UsersAPICreateInvitationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UsersAPICreateInvitationsResponse, error)

	UsersAPICreateInvitationsWithResponse(ctx context.Context, body UsersAPICreateInvitationsJSONRequestBody) (*UsersAPICreateInvitationsResponse, error)

	// UsersAPIDeleteInvitation request
	UsersAPIDeleteInvitationWithResponse(ctx context.Context, id string) (*UsersAPIDeleteInvitationResponse, error)

	// UsersAPIClaimInvitation request  with any body
	UsersAPIClaimInvitationWithBodyWithResponse(ctx context.Context, invitationId string, contentType string, body io.Reader) (*UsersAPIClaimInvitationResponse, error)

	UsersAPIClaimInvitationWithResponse(ctx context.Context, invitationId string, body UsersAPIClaimInvitationJSONRequestBody) (*UsersAPIClaimInvitationResponse, error)

	// EvictorAPIGetAdvancedConfig request
	EvictorAPIGetAdvancedConfigWithResponse(ctx context.Context, clusterId string) (*EvictorAPIGetAdvancedConfigResponse, error)

	// EvictorAPIUpsertAdvancedConfig request  with any body
	EvictorAPIUpsertAdvancedConfigWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*EvictorAPIUpsertAdvancedConfigResponse, error)

	EvictorAPIUpsertAdvancedConfigWithResponse(ctx context.Context, clusterId string, body EvictorAPIUpsertAdvancedConfigJSONRequestBody) (*EvictorAPIUpsertAdvancedConfigResponse, error)

	// NodeTemplatesAPIFilterInstanceTypes request  with any body
	NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*NodeTemplatesAPIFilterInstanceTypesResponse, error)

	NodeTemplatesAPIFilterInstanceTypesWithResponse(ctx context.Context, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody) (*NodeTemplatesAPIFilterInstanceTypesResponse, error)

	// NodeTemplatesAPIGenerateNodeTemplates request
	NodeTemplatesAPIGenerateNodeTemplatesWithResponse(ctx context.Context, clusterId string) (*NodeTemplatesAPIGenerateNodeTemplatesResponse, error)

	// NodeConfigurationAPIListConfigurations request
	NodeConfigurationAPIListConfigurationsWithResponse(ctx context.Context, clusterId string) (*NodeConfigurationAPIListConfigurationsResponse, error)

	// NodeConfigurationAPICreateConfiguration request  with any body
	NodeConfigurationAPICreateConfigurationWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*NodeConfigurationAPICreateConfigurationResponse, error)

	NodeConfigurationAPICreateConfigurationWithResponse(ctx context.Context, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody) (*NodeConfigurationAPICreateConfigurationResponse, error)

	// NodeConfigurationAPIGetSuggestedConfiguration request
	NodeConfigurationAPIGetSuggestedConfigurationWithResponse(ctx context.Context, clusterId string) (*NodeConfigurationAPIGetSuggestedConfigurationResponse, error)

	// NodeConfigurationAPIDeleteConfiguration request
	NodeConfigurationAPIDeleteConfigurationWithResponse(ctx context.Context, clusterId string, id string) (*NodeConfigurationAPIDeleteConfigurationResponse, error)

	// NodeConfigurationAPIGetConfiguration request
	NodeConfigurationAPIGetConfigurationWithResponse(ctx context.Context, clusterId string, id string) (*NodeConfigurationAPIGetConfigurationResponse, error)

	// NodeConfigurationAPIUpdateConfiguration request  with any body
	NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse(ctx context.Context, clusterId string, id string, contentType string, body io.Reader) (*NodeConfigurationAPIUpdateConfigurationResponse, error)

	NodeConfigurationAPIUpdateConfigurationWithResponse(ctx context.Context, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody) (*NodeConfigurationAPIUpdateConfigurationResponse, error)

	// NodeConfigurationAPISetDefault request
	NodeConfigurationAPISetDefaultWithResponse(ctx context.Context, clusterId string, id string) (*NodeConfigurationAPISetDefaultResponse, error)

	// PoliciesAPIGetClusterNodeConstraints request
	PoliciesAPIGetClusterNodeConstraintsWithResponse(ctx context.Context, clusterId string) (*PoliciesAPIGetClusterNodeConstraintsResponse, error)

	// NodeTemplatesAPIListNodeTemplates request
	NodeTemplatesAPIListNodeTemplatesWithResponse(ctx context.Context, clusterId string, params *NodeTemplatesAPIListNodeTemplatesParams) (*NodeTemplatesAPIListNodeTemplatesResponse, error)

	// NodeTemplatesAPICreateNodeTemplate request  with any body
	NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*NodeTemplatesAPICreateNodeTemplateResponse, error)

	NodeTemplatesAPICreateNodeTemplateWithResponse(ctx context.Context, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody) (*NodeTemplatesAPICreateNodeTemplateResponse, error)

	// NodeTemplatesAPIDeleteNodeTemplate request
	NodeTemplatesAPIDeleteNodeTemplateWithResponse(ctx context.Context, clusterId string, nodeTemplateName string) (*NodeTemplatesAPIDeleteNodeTemplateResponse, error)

	// NodeTemplatesAPIUpdateNodeTemplate request  with any body
	NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId string, nodeTemplateName string, contentType string, body io.Reader) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error)

	NodeTemplatesAPIUpdateNodeTemplateWithResponse(ctx context.Context, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error)

	// PoliciesAPIGetClusterPolicies request
	PoliciesAPIGetClusterPoliciesWithResponse(ctx context.Context, clusterId string) (*PoliciesAPIGetClusterPoliciesResponse, error)

	// PoliciesAPIUpsertClusterPolicies request  with any body
	PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*PoliciesAPIUpsertClusterPoliciesResponse, error)

	PoliciesAPIUpsertClusterPoliciesWithResponse(ctx context.Context, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody) (*PoliciesAPIUpsertClusterPoliciesResponse, error)

	// ScheduledRebalancingAPIListRebalancingJobs request
	ScheduledRebalancingAPIListRebalancingJobsWithResponse(ctx context.Context, clusterId string, params *ScheduledRebalancingAPIListRebalancingJobsParams) (*ScheduledRebalancingAPIListRebalancingJobsResponse, error)

	// ScheduledRebalancingAPICreateRebalancingJob request  with any body
	ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ScheduledRebalancingAPICreateRebalancingJobResponse, error)

	ScheduledRebalancingAPICreateRebalancingJobWithResponse(ctx context.Context, clusterId string, body ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody) (*ScheduledRebalancingAPICreateRebalancingJobResponse, error)

	// ScheduledRebalancingAPIDeleteRebalancingJob request
	ScheduledRebalancingAPIDeleteRebalancingJobWithResponse(ctx context.Context, clusterId string, id string) (*ScheduledRebalancingAPIDeleteRebalancingJobResponse, error)

	// ScheduledRebalancingAPIGetRebalancingJob request
	ScheduledRebalancingAPIGetRebalancingJobWithResponse(ctx context.Context, clusterId string, id string) (*ScheduledRebalancingAPIGetRebalancingJobResponse, error)

	// ScheduledRebalancingAPIUpdateRebalancingJob request  with any body
	ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse(ctx context.Context, clusterId string, id string, contentType string, body io.Reader) (*ScheduledRebalancingAPIUpdateRebalancingJobResponse, error)

	ScheduledRebalancingAPIUpdateRebalancingJobWithResponse(ctx context.Context, clusterId string, id string, body ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody) (*ScheduledRebalancingAPIUpdateRebalancingJobResponse, error)

	// ScheduledRebalancingAPIPreviewRebalancingSchedule request  with any body
	ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ScheduledRebalancingAPIPreviewRebalancingScheduleResponse, error)

	ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse(ctx context.Context, clusterId string, body ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody) (*ScheduledRebalancingAPIPreviewRebalancingScheduleResponse, error)

	// ExternalClusterAPIListClusters request
	ExternalClusterAPIListClustersWithResponse(ctx context.Context) (*ExternalClusterAPIListClustersResponse, error)

	// ExternalClusterAPIRegisterCluster request  with any body
	ExternalClusterAPIRegisterClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ExternalClusterAPIRegisterClusterResponse, error)

	ExternalClusterAPIRegisterClusterWithResponse(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody) (*ExternalClusterAPIRegisterClusterResponse, error)

	// ExternalClusterAPIGetListNodesFilters request
	ExternalClusterAPIGetListNodesFiltersWithResponse(ctx context.Context) (*ExternalClusterAPIGetListNodesFiltersResponse, error)

	// OperationsAPIGetOperation request
	OperationsAPIGetOperationWithResponse(ctx context.Context, id string) (*OperationsAPIGetOperationResponse, error)

	// ExternalClusterAPIDeleteCluster request
	ExternalClusterAPIDeleteClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDeleteClusterResponse, error)

	// ExternalClusterAPIGetCluster request
	ExternalClusterAPIGetClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetClusterResponse, error)

	// ExternalClusterAPIUpdateCluster request  with any body
	ExternalClusterAPIUpdateClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIUpdateClusterResponse, error)

	ExternalClusterAPIUpdateClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody) (*ExternalClusterAPIUpdateClusterResponse, error)

	// ExternalClusterAPIDeleteAssumeRolePrincipal request
	ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDeleteAssumeRolePrincipalResponse, error)

	// ExternalClusterAPIGetAssumeRolePrincipal request
	ExternalClusterAPIGetAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetAssumeRolePrincipalResponse, error)

	// ExternalClusterAPICreateAssumeRolePrincipal request
	ExternalClusterAPICreateAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPICreateAssumeRolePrincipalResponse, error)

	// ExternalClusterAPIGetAssumeRoleUser request
	ExternalClusterAPIGetAssumeRoleUserWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetAssumeRoleUserResponse, error)

	// ExternalClusterAPIGetCleanupScript request
	ExternalClusterAPIGetCleanupScriptWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetCleanupScriptResponse, error)

	// ExternalClusterAPIGetCredentialsScript request
	ExternalClusterAPIGetCredentialsScriptWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams) (*ExternalClusterAPIGetCredentialsScriptResponse, error)

	// ExternalClusterAPIDisconnectCluster request  with any body
	ExternalClusterAPIDisconnectClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIDisconnectClusterResponse, error)

	ExternalClusterAPIDisconnectClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody) (*ExternalClusterAPIDisconnectClusterResponse, error)

	// ExternalClusterAPIHandleCloudEvent request  with any body
	ExternalClusterAPIHandleCloudEventWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIHandleCloudEventResponse, error)

	ExternalClusterAPIHandleCloudEventWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody) (*ExternalClusterAPIHandleCloudEventResponse, error)

	// ExternalClusterAPIListNodes request
	ExternalClusterAPIListNodesWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams) (*ExternalClusterAPIListNodesResponse, error)

	// ExternalClusterAPIAddNode request  with any body
	ExternalClusterAPIAddNodeWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIAddNodeResponse, error)

	ExternalClusterAPIAddNodeWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody) (*ExternalClusterAPIAddNodeResponse, error)

	// ExternalClusterAPIDeleteNode request
	ExternalClusterAPIDeleteNodeWithResponse(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams) (*ExternalClusterAPIDeleteNodeResponse, error)

	// ExternalClusterAPIGetNode request
	ExternalClusterAPIGetNodeWithResponse(ctx context.Context, clusterId string, nodeId string) (*ExternalClusterAPIGetNodeResponse, error)

	// ExternalClusterAPIDrainNode request  with any body
	ExternalClusterAPIDrainNodeWithBodyWithResponse(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader) (*ExternalClusterAPIDrainNodeResponse, error)

	ExternalClusterAPIDrainNodeWithResponse(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody) (*ExternalClusterAPIDrainNodeResponse, error)

	// ExternalClusterAPIReconcileCluster request
	ExternalClusterAPIReconcileClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIReconcileClusterResponse, error)

	// ExternalClusterAPIUpdateClusterTags request  with any body
	ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIUpdateClusterTagsResponse, error)

	ExternalClusterAPIUpdateClusterTagsWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody) (*ExternalClusterAPIUpdateClusterTagsResponse, error)

	// ExternalClusterAPICreateClusterToken request
	ExternalClusterAPICreateClusterTokenWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPICreateClusterTokenResponse, error)

	// NodeConfigurationAPIListMaxPodsPresets request
	NodeConfigurationAPIListMaxPodsPresetsWithResponse(ctx context.Context) (*NodeConfigurationAPIListMaxPodsPresetsResponse, error)

	// UsersAPICurrentUserProfile request
	UsersAPICurrentUserProfileWithResponse(ctx context.Context) (*UsersAPICurrentUserProfileResponse, error)

	// UsersAPIUpdateCurrentUserProfile request  with any body
	UsersAPIUpdateCurrentUserProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UsersAPIUpdateCurrentUserProfileResponse, error)

	UsersAPIUpdateCurrentUserProfileWithResponse(ctx context.Context, body UsersAPIUpdateCurrentUserProfileJSONRequestBody) (*UsersAPIUpdateCurrentUserProfileResponse, error)

	// UsersAPIListOrganizations request
	UsersAPIListOrganizationsWithResponse(ctx context.Context, params *UsersAPIListOrganizationsParams) (*UsersAPIListOrganizationsResponse, error)

	// UsersAPICreateOrganization request  with any body
	UsersAPICreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UsersAPICreateOrganizationResponse, error)

	UsersAPICreateOrganizationWithResponse(ctx context.Context, body UsersAPICreateOrganizationJSONRequestBody) (*UsersAPICreateOrganizationResponse, error)

	// InventoryAPIGetOrganizationReservationsBalance request
	InventoryAPIGetOrganizationReservationsBalanceWithResponse(ctx context.Context) (*InventoryAPIGetOrganizationReservationsBalanceResponse, error)

	// InventoryAPIGetOrganizationResourceUsage request
	InventoryAPIGetOrganizationResourceUsageWithResponse(ctx context.Context) (*InventoryAPIGetOrganizationResourceUsageResponse, error)

	// UsersAPIDeleteOrganization request
	UsersAPIDeleteOrganizationWithResponse(ctx context.Context, id string) (*UsersAPIDeleteOrganizationResponse, error)

	// UsersAPIGetOrganization request
	UsersAPIGetOrganizationWithResponse(ctx context.Context, id string) (*UsersAPIGetOrganizationResponse, error)

	// UsersAPIEditOrganization request  with any body
	UsersAPIEditOrganizationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UsersAPIEditOrganizationResponse, error)

	UsersAPIEditOrganizationWithResponse(ctx context.Context, id string, body UsersAPIEditOrganizationJSONRequestBody) (*UsersAPIEditOrganizationResponse, error)

	// InventoryAPISyncClusterResources request
	InventoryAPISyncClusterResourcesWithResponse(ctx context.Context, organizationId string, clusterId string) (*InventoryAPISyncClusterResourcesResponse, error)

	// InventoryAPIGetReservations request
	InventoryAPIGetReservationsWithResponse(ctx context.Context, organizationId string) (*InventoryAPIGetReservationsResponse, error)

	// InventoryAPIAddReservation request  with any body
	InventoryAPIAddReservationWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader) (*InventoryAPIAddReservationResponse, error)

	InventoryAPIAddReservationWithResponse(ctx context.Context, organizationId string, body InventoryAPIAddReservationJSONRequestBody) (*InventoryAPIAddReservationResponse, error)

	// InventoryAPIGetReservationsBalance request
	InventoryAPIGetReservationsBalanceWithResponse(ctx context.Context, organizationId string) (*InventoryAPIGetReservationsBalanceResponse, error)

	// InventoryAPIOverwriteReservations request  with any body
	InventoryAPIOverwriteReservationsWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader) (*InventoryAPIOverwriteReservationsResponse, error)

	InventoryAPIOverwriteReservationsWithResponse(ctx context.Context, organizationId string, body InventoryAPIOverwriteReservationsJSONRequestBody) (*InventoryAPIOverwriteReservationsResponse, error)

	// InventoryAPIDeleteReservation request
	InventoryAPIDeleteReservationWithResponse(ctx context.Context, organizationId string, reservationId string) (*InventoryAPIDeleteReservationResponse, error)

	// UsersAPIListOrganizationUsers request
	UsersAPIListOrganizationUsersWithResponse(ctx context.Context, organizationId string) (*UsersAPIListOrganizationUsersResponse, error)

	// UsersAPIAddUserToOrganization request  with any body
	UsersAPIAddUserToOrganizationWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader) (*UsersAPIAddUserToOrganizationResponse, error)

	UsersAPIAddUserToOrganizationWithResponse(ctx context.Context, organizationId string, body UsersAPIAddUserToOrganizationJSONRequestBody) (*UsersAPIAddUserToOrganizationResponse, error)

	// UsersAPIRemoveUserFromOrganization request
	UsersAPIRemoveUserFromOrganizationWithResponse(ctx context.Context, organizationId string, userId string) (*UsersAPIRemoveUserFromOrganizationResponse, error)

	// UsersAPIUpdateOrganizationUser request  with any body
	UsersAPIUpdateOrganizationUserWithBodyWithResponse(ctx context.Context, organizationId string, userId string, contentType string, body io.Reader) (*UsersAPIUpdateOrganizationUserResponse, error)

	UsersAPIUpdateOrganizationUserWithResponse(ctx context.Context, organizationId string, userId string, body UsersAPIUpdateOrganizationUserJSONRequestBody) (*UsersAPIUpdateOrganizationUserResponse, error)

	// ScheduledRebalancingAPIListRebalancingSchedules request
	ScheduledRebalancingAPIListRebalancingSchedulesWithResponse(ctx context.Context) (*ScheduledRebalancingAPIListRebalancingSchedulesResponse, error)

	// ScheduledRebalancingAPICreateRebalancingSchedule request  with any body
	ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ScheduledRebalancingAPICreateRebalancingScheduleResponse, error)

	ScheduledRebalancingAPICreateRebalancingScheduleWithResponse(ctx context.Context, body ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody) (*ScheduledRebalancingAPICreateRebalancingScheduleResponse, error)

	// ScheduledRebalancingAPIUpdateRebalancingSchedule request  with any body
	ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, contentType string, body io.Reader) (*ScheduledRebalancingAPIUpdateRebalancingScheduleResponse, error)

	ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, body ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody) (*ScheduledRebalancingAPIUpdateRebalancingScheduleResponse, error)

	// ScheduledRebalancingAPIDeleteRebalancingSchedule request
	ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse(ctx context.Context, id string) (*ScheduledRebalancingAPIDeleteRebalancingScheduleResponse, error)

	// ScheduledRebalancingAPIGetRebalancingSchedule request
	ScheduledRebalancingAPIGetRebalancingScheduleWithResponse(ctx context.Context, id string) (*ScheduledRebalancingAPIGetRebalancingScheduleResponse, error)

	// CommitmentsAPIGetCommitmentsAssignments request
	CommitmentsAPIGetCommitmentsAssignmentsWithResponse(ctx context.Context) (*CommitmentsAPIGetCommitmentsAssignmentsResponse, error)

	// CommitmentsAPICreateCommitmentAssignment request
	CommitmentsAPICreateCommitmentAssignmentWithResponse(ctx context.Context, params *CommitmentsAPICreateCommitmentAssignmentParams) (*CommitmentsAPICreateCommitmentAssignmentResponse, error)

	// CommitmentsAPIDeleteCommitmentAssignment request
	CommitmentsAPIDeleteCommitmentAssignmentWithResponse(ctx context.Context, assignmentId string) (*CommitmentsAPIDeleteCommitmentAssignmentResponse, error)

	// CommitmentsAPIGetCommitments request
	CommitmentsAPIGetCommitmentsWithResponse(ctx context.Context, params *CommitmentsAPIGetCommitmentsParams) (*CommitmentsAPIGetCommitmentsResponse, error)

	// CommitmentsAPIImportAzureReservations request  with any body
	CommitmentsAPIImportAzureReservationsWithBodyWithResponse(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, contentType string, body io.Reader) (*CommitmentsAPIImportAzureReservationsResponse, error)

	CommitmentsAPIImportAzureReservationsWithResponse(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, body CommitmentsAPIImportAzureReservationsJSONRequestBody) (*CommitmentsAPIImportAzureReservationsResponse, error)

	// CommitmentsAPIImportGCPCommitments request  with any body
	CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, contentType string, body io.Reader) (*CommitmentsAPIImportGCPCommitmentsResponse, error)

	CommitmentsAPIImportGCPCommitmentsWithResponse(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, body CommitmentsAPIImportGCPCommitmentsJSONRequestBody) (*CommitmentsAPIImportGCPCommitmentsResponse, error)

	// CommitmentsAPIGetGCPCommitmentsImportScript request
	CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse(ctx context.Context, params *CommitmentsAPIGetGCPCommitmentsImportScriptParams) (*CommitmentsAPIGetGCPCommitmentsImportScriptResponse, error)

	// CommitmentsAPIDeleteCommitment request
	CommitmentsAPIDeleteCommitmentWithResponse(ctx context.Context, commitmentId string) (*CommitmentsAPIDeleteCommitmentResponse, error)

	// CommitmentsAPIUpdateCommitment request  with any body
	CommitmentsAPIUpdateCommitmentWithBodyWithResponse(ctx context.Context, commitmentId string, contentType string, body io.Reader) (*CommitmentsAPIUpdateCommitmentResponse, error)

	CommitmentsAPIUpdateCommitmentWithResponse(ctx context.Context, commitmentId string, body CommitmentsAPIUpdateCommitmentJSONRequestBody) (*CommitmentsAPIUpdateCommitmentResponse, error)

	// CommitmentsAPIGetCommitmentAssignments request
	CommitmentsAPIGetCommitmentAssignmentsWithResponse(ctx context.Context, commitmentId string) (*CommitmentsAPIGetCommitmentAssignmentsResponse, error)

	// CommitmentsAPIReplaceCommitmentAssignments request  with any body
	CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse(ctx context.Context, commitmentId string, contentType string, body io.Reader) (*CommitmentsAPIReplaceCommitmentAssignmentsResponse, error)

	CommitmentsAPIReplaceCommitmentAssignmentsWithResponse(ctx context.Context, commitmentId string, body CommitmentsAPIReplaceCommitmentAssignmentsJSONRequestBody) (*CommitmentsAPIReplaceCommitmentAssignmentsResponse, error)

	// CommitmentsAPIGetGCPCommitmentsScriptTemplate request
	CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse(ctx context.Context) (*CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse, error)

	// ExternalClusterAPIGetCleanupScriptTemplate request
	ExternalClusterAPIGetCleanupScriptTemplateWithResponse(ctx context.Context, provider string) (*ExternalClusterAPIGetCleanupScriptTemplateResponse, error)

	// ExternalClusterAPIGetCredentialsScriptTemplate request
	ExternalClusterAPIGetCredentialsScriptTemplateWithResponse(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error)

	// SSOAPIListSSOConnections request
	SSOAPIListSSOConnectionsWithResponse(ctx context.Context) (*SSOAPIListSSOConnectionsResponse, error)

	// SSOAPICreateSSOConnection request  with any body
	SSOAPICreateSSOConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*SSOAPICreateSSOConnectionResponse, error)

	SSOAPICreateSSOConnectionWithResponse(ctx context.Context, body SSOAPICreateSSOConnectionJSONRequestBody) (*SSOAPICreateSSOConnectionResponse, error)

	// SSOAPIDeleteSSOConnection request
	SSOAPIDeleteSSOConnectionWithResponse(ctx context.Context, id string) (*SSOAPIDeleteSSOConnectionResponse, error)

	// SSOAPIGetSSOConnection request
	SSOAPIGetSSOConnectionWithResponse(ctx context.Context, id string) (*SSOAPIGetSSOConnectionResponse, error)

	// SSOAPIUpdateSSOConnection request  with any body
	SSOAPIUpdateSSOConnectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*SSOAPIUpdateSSOConnectionResponse, error)

	SSOAPIUpdateSSOConnectionWithResponse(ctx context.Context, id string, body SSOAPIUpdateSSOConnectionJSONRequestBody) (*SSOAPIUpdateSSOConnectionResponse, error)

	// ScheduledRebalancingAPIListAvailableRebalancingTZ request
	ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse(ctx context.Context) (*ScheduledRebalancingAPIListAvailableRebalancingTZResponse, error)

	// WorkloadOptimizationAPIGetAgentStatus request
	WorkloadOptimizationAPIGetAgentStatusWithResponse(ctx context.Context, clusterId string) (*WorkloadOptimizationAPIGetAgentStatusResponse, error)

	// WorkloadOptimizationAPIListWorkloadScalingPolicies request
	WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse(ctx context.Context, clusterId string) (*WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse, error)

	// WorkloadOptimizationAPICreateWorkloadScalingPolicy request  with any body
	WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse, error)

	WorkloadOptimizationAPICreateWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, body WorkloadOptimizationAPICreateWorkloadScalingPolicyJSONRequestBody) (*WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse, error)

	// WorkloadOptimizationAPIDeleteWorkloadScalingPolicy request
	WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, policyId string) (*WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse, error)

	// WorkloadOptimizationAPIGetWorkloadScalingPolicy request
	WorkloadOptimizationAPIGetWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, policyId string) (*WorkloadOptimizationAPIGetWorkloadScalingPolicyResponse, error)

	// WorkloadOptimizationAPIUpdateWorkloadScalingPolicy request  with any body
	WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader) (*WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse, error)

	WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIUpdateWorkloadScalingPolicyJSONRequestBody) (*WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse, error)

	// WorkloadOptimizationAPIAssignScalingPolicyWorkloads request  with any body
	WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader) (*WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse, error)

	WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithResponse(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIAssignScalingPolicyWorkloadsJSONRequestBody) (*WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse, error)

	// WorkloadOptimizationAPIListWorkloadEvents request
	WorkloadOptimizationAPIListWorkloadEventsWithResponse(ctx context.Context, clusterId string, params *WorkloadOptimizationAPIListWorkloadEventsParams) (*WorkloadOptimizationAPIListWorkloadEventsResponse, error)

	// WorkloadOptimizationAPIListWorkloads request
	WorkloadOptimizationAPIListWorkloadsWithResponse(ctx context.Context, clusterId string) (*WorkloadOptimizationAPIListWorkloadsResponse, error)

	// WorkloadOptimizationAPIGetWorkloadsSummary request
	WorkloadOptimizationAPIGetWorkloadsSummaryWithResponse(ctx context.Context, clusterId string) (*WorkloadOptimizationAPIGetWorkloadsSummaryResponse, error)

	// WorkloadOptimizationAPIGetWorkload request
	WorkloadOptimizationAPIGetWorkloadWithResponse(ctx context.Context, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkloadParams) (*WorkloadOptimizationAPIGetWorkloadResponse, error)

	// WorkloadOptimizationAPIUpdateWorkload request  with any body
	WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader) (*WorkloadOptimizationAPIUpdateWorkloadResponse, error)

	WorkloadOptimizationAPIUpdateWorkloadWithResponse(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadJSONRequestBody) (*WorkloadOptimizationAPIUpdateWorkloadResponse, error)

	// WorkloadOptimizationAPIGetInstallCmd request
	WorkloadOptimizationAPIGetInstallCmdWithResponse(ctx context.Context, params *WorkloadOptimizationAPIGetInstallCmdParams) (*WorkloadOptimizationAPIGetInstallCmdResponse, error)

	// WorkloadOptimizationAPIGetInstallScript request
	WorkloadOptimizationAPIGetInstallScriptWithResponse(ctx context.Context) (*WorkloadOptimizationAPIGetInstallScriptResponse, error)

	// WorkloadOptimizationAPIUpdateWorkloadV2 request  with any body
	WorkloadOptimizationAPIUpdateWorkloadV2WithBodyWithResponse(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader) (*WorkloadOptimizationAPIUpdateWorkloadV2Response, error)

	WorkloadOptimizationAPIUpdateWorkloadV2WithResponse(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadV2JSONRequestBody) (*WorkloadOptimizationAPIUpdateWorkloadV2Response, error)
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
type Response interface {
	Status() string
	StatusCode() int
	GetBody() []byte
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AuthTokenAPIListAuthTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1ListAuthTokensResponse
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPIListAuthTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPIListAuthTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AuthTokenAPIListAuthTokensResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AuthTokenAPICreateAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1AuthToken
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPICreateAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPICreateAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AuthTokenAPICreateAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AuthTokenAPIDeleteAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1DeleteAuthTokenResponse
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPIDeleteAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPIDeleteAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AuthTokenAPIDeleteAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AuthTokenAPIGetAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1AuthToken
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPIGetAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPIGetAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AuthTokenAPIGetAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type AuthTokenAPIUpdateAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiAuthtokenV1beta1AuthToken
}

// Status returns HTTPResponse.Status
func (r AuthTokenAPIUpdateAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenAPIUpdateAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r AuthTokenAPIUpdateAuthTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPIListInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1ListInvitationsResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIListInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIListInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPIListInvitationsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPICreateInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1CreateInvitationsResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPICreateInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPICreateInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPICreateInvitationsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPIDeleteInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1DeleteInvitationResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIDeleteInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIDeleteInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPIDeleteInvitationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPIClaimInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1ClaimInvitationResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIClaimInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIClaimInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPIClaimInvitationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type EvictorAPIGetAdvancedConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiEvictorV1AdvancedConfig
}

// Status returns HTTPResponse.Status
func (r EvictorAPIGetAdvancedConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvictorAPIGetAdvancedConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r EvictorAPIGetAdvancedConfigResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type EvictorAPIUpsertAdvancedConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiEvictorV1AdvancedConfig
}

// Status returns HTTPResponse.Status
func (r EvictorAPIUpsertAdvancedConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EvictorAPIUpsertAdvancedConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r EvictorAPIUpsertAdvancedConfigResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeTemplatesAPIFilterInstanceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1FilterInstanceTypesResponse
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPIFilterInstanceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPIFilterInstanceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeTemplatesAPIFilterInstanceTypesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeTemplatesAPIGenerateNodeTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1GenerateNodeTemplatesResponse
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPIGenerateNodeTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPIGenerateNodeTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeTemplatesAPIGenerateNodeTemplatesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeConfigurationAPIListConfigurationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1ListConfigurationsResponse
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIListConfigurationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIListConfigurationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeConfigurationAPIListConfigurationsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeConfigurationAPICreateConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1NodeConfiguration
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPICreateConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPICreateConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeConfigurationAPICreateConfigurationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeConfigurationAPIGetSuggestedConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1GetSuggestedConfigurationResponse
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIGetSuggestedConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIGetSuggestedConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeConfigurationAPIGetSuggestedConfigurationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeConfigurationAPIDeleteConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1DeleteConfigurationResponse
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIDeleteConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIDeleteConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeConfigurationAPIDeleteConfigurationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeConfigurationAPIGetConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1NodeConfiguration
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIGetConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIGetConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeConfigurationAPIGetConfigurationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeConfigurationAPIUpdateConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1NodeConfiguration
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIUpdateConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIUpdateConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeConfigurationAPIUpdateConfigurationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeConfigurationAPISetDefaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1NodeConfiguration
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPISetDefaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPISetDefaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeConfigurationAPISetDefaultResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type PoliciesAPIGetClusterNodeConstraintsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoliciesV1GetClusterNodeConstraintsResponse
}

// Status returns HTTPResponse.Status
func (r PoliciesAPIGetClusterNodeConstraintsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesAPIGetClusterNodeConstraintsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r PoliciesAPIGetClusterNodeConstraintsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeTemplatesAPIListNodeTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1ListNodeTemplatesResponse
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPIListNodeTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPIListNodeTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeTemplatesAPIListNodeTemplatesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeTemplatesAPICreateNodeTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1NodeTemplate
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPICreateNodeTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPICreateNodeTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeTemplatesAPICreateNodeTemplateResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeTemplatesAPIDeleteNodeTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1DeleteNodeTemplateResponse
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPIDeleteNodeTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPIDeleteNodeTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeTemplatesAPIDeleteNodeTemplateResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeTemplatesAPIUpdateNodeTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodetemplatesV1NodeTemplate
}

// Status returns HTTPResponse.Status
func (r NodeTemplatesAPIUpdateNodeTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeTemplatesAPIUpdateNodeTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeTemplatesAPIUpdateNodeTemplateResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type PoliciesAPIGetClusterPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoliciesV1Policies
}

// Status returns HTTPResponse.Status
func (r PoliciesAPIGetClusterPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesAPIGetClusterPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r PoliciesAPIGetClusterPoliciesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type PoliciesAPIUpsertClusterPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PoliciesV1Policies
}

// Status returns HTTPResponse.Status
func (r PoliciesAPIUpsertClusterPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PoliciesAPIUpsertClusterPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r PoliciesAPIUpsertClusterPoliciesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ScheduledRebalancingAPIListRebalancingJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1ListRebalancingJobsResponse
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIListRebalancingJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIListRebalancingJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ScheduledRebalancingAPIListRebalancingJobsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ScheduledRebalancingAPICreateRebalancingJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1RebalancingJob
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPICreateRebalancingJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPICreateRebalancingJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ScheduledRebalancingAPICreateRebalancingJobResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ScheduledRebalancingAPIDeleteRebalancingJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1DeleteRebalancingJobResponse
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIDeleteRebalancingJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIDeleteRebalancingJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ScheduledRebalancingAPIDeleteRebalancingJobResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ScheduledRebalancingAPIGetRebalancingJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1RebalancingJob
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIGetRebalancingJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIGetRebalancingJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ScheduledRebalancingAPIGetRebalancingJobResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ScheduledRebalancingAPIUpdateRebalancingJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1RebalancingJob
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIUpdateRebalancingJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIUpdateRebalancingJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ScheduledRebalancingAPIUpdateRebalancingJobResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ScheduledRebalancingAPIPreviewRebalancingScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1PreviewRebalancingScheduleResponse
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIPreviewRebalancingScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIPreviewRebalancingScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ScheduledRebalancingAPIPreviewRebalancingScheduleResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIListClustersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1ListClustersResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIListClustersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIListClustersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIListClustersResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIRegisterClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIRegisterClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIRegisterClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIRegisterClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetListNodesFiltersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetListNodesFiltersResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetListNodesFiltersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetListNodesFiltersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetListNodesFiltersResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type OperationsAPIGetOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiOperationsV1beta1Operation
}

// Status returns HTTPResponse.Status
func (r OperationsAPIGetOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OperationsAPIGetOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r OperationsAPIGetOperationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDeleteClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDeleteClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDeleteClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDeleteClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIUpdateClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIUpdateClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIUpdateClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIUpdateClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDeleteAssumeRolePrincipalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DeleteAssumeRolePrincipalResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDeleteAssumeRolePrincipalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDeleteAssumeRolePrincipalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDeleteAssumeRolePrincipalResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetAssumeRolePrincipalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetAssumeRolePrincipalResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetAssumeRolePrincipalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetAssumeRolePrincipalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetAssumeRolePrincipalResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPICreateAssumeRolePrincipalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1CreateAssumeRolePrincipalResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPICreateAssumeRolePrincipalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPICreateAssumeRolePrincipalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPICreateAssumeRolePrincipalResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetAssumeRoleUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetAssumeRoleUserResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetAssumeRoleUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetAssumeRoleUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetAssumeRoleUserResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetCleanupScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetCleanupScriptResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCleanupScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCleanupScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetCleanupScriptResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetCredentialsScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1GetCredentialsScriptResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCredentialsScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCredentialsScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetCredentialsScriptResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDisconnectClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Cluster
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDisconnectClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDisconnectClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDisconnectClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIHandleCloudEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1HandleCloudEventResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIHandleCloudEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIHandleCloudEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIHandleCloudEventResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIListNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1ListNodesResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIListNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIListNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIListNodesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIAddNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1AddNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIAddNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIAddNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIAddNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDeleteNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DeleteNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDeleteNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDeleteNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDeleteNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1Node
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIDrainNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1DrainNodeResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIDrainNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIDrainNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIDrainNodeResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIReconcileClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1ReconcileClusterResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIReconcileClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIReconcileClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIReconcileClusterResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIUpdateClusterTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1UpdateClusterTagsResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIUpdateClusterTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIUpdateClusterTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIUpdateClusterTagsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPICreateClusterTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExternalclusterV1CreateClusterTokenResponse
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPICreateClusterTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPICreateClusterTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPICreateClusterTokenResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type NodeConfigurationAPIListMaxPodsPresetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodeconfigV1ListMaxPodsPresetsResponse
}

// Status returns HTTPResponse.Status
func (r NodeConfigurationAPIListMaxPodsPresetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NodeConfigurationAPIListMaxPodsPresetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r NodeConfigurationAPIListMaxPodsPresetsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPICurrentUserProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1CurrentUserProfileResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPICurrentUserProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPICurrentUserProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPICurrentUserProfileResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPIUpdateCurrentUserProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1User
}

// Status returns HTTPResponse.Status
func (r UsersAPIUpdateCurrentUserProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIUpdateCurrentUserProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPIUpdateCurrentUserProfileResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPIListOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1ListOrganizationsResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIListOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIListOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPIListOrganizationsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPICreateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1Organization
}

// Status returns HTTPResponse.Status
func (r UsersAPICreateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPICreateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPICreateOrganizationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InventoryAPIGetOrganizationReservationsBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetOrganizationReservationsBalanceResponse
}

// Status returns HTTPResponse.Status
func (r InventoryAPIGetOrganizationReservationsBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPIGetOrganizationReservationsBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InventoryAPIGetOrganizationReservationsBalanceResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InventoryAPIGetOrganizationResourceUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetOrganizationResourceUsageResponse
}

// Status returns HTTPResponse.Status
func (r InventoryAPIGetOrganizationResourceUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPIGetOrganizationResourceUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InventoryAPIGetOrganizationResourceUsageResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPIDeleteOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1DeleteOrganizationResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIDeleteOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIDeleteOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPIDeleteOrganizationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPIGetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1Organization
}

// Status returns HTTPResponse.Status
func (r UsersAPIGetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIGetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPIGetOrganizationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPIEditOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1Organization
}

// Status returns HTTPResponse.Status
func (r UsersAPIEditOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIEditOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPIEditOrganizationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InventoryAPISyncClusterResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r InventoryAPISyncClusterResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPISyncClusterResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InventoryAPISyncClusterResourcesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InventoryAPIGetReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetReservationsResponse
}

// Status returns HTTPResponse.Status
func (r InventoryAPIGetReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPIGetReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InventoryAPIGetReservationsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InventoryAPIAddReservationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1AddReservationResponse
}

// Status returns HTTPResponse.Status
func (r InventoryAPIAddReservationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPIAddReservationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InventoryAPIAddReservationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InventoryAPIGetReservationsBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetReservationsBalanceResponse
}

// Status returns HTTPResponse.Status
func (r InventoryAPIGetReservationsBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPIGetReservationsBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InventoryAPIGetReservationsBalanceResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InventoryAPIOverwriteReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1OverwriteReservationsResponse
}

// Status returns HTTPResponse.Status
func (r InventoryAPIOverwriteReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPIOverwriteReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InventoryAPIOverwriteReservationsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type InventoryAPIDeleteReservationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r InventoryAPIDeleteReservationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InventoryAPIDeleteReservationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r InventoryAPIDeleteReservationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPIListOrganizationUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1ListOrganizationUsersResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIListOrganizationUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIListOrganizationUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPIListOrganizationUsersResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPIAddUserToOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1AddUserToOrganizationResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIAddUserToOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIAddUserToOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPIAddUserToOrganizationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPIRemoveUserFromOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1RemoveUserFromOrganizationResponse
}

// Status returns HTTPResponse.Status
func (r UsersAPIRemoveUserFromOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIRemoveUserFromOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPIRemoveUserFromOrganizationResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type UsersAPIUpdateOrganizationUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiUsersV1beta1Membership
}

// Status returns HTTPResponse.Status
func (r UsersAPIUpdateOrganizationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersAPIUpdateOrganizationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r UsersAPIUpdateOrganizationUserResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ScheduledRebalancingAPIListRebalancingSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1ListRebalancingSchedulesResponse
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIListRebalancingSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIListRebalancingSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ScheduledRebalancingAPIListRebalancingSchedulesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ScheduledRebalancingAPICreateRebalancingScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1RebalancingSchedule
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPICreateRebalancingScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPICreateRebalancingScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ScheduledRebalancingAPICreateRebalancingScheduleResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ScheduledRebalancingAPIUpdateRebalancingScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1RebalancingSchedule
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIUpdateRebalancingScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIUpdateRebalancingScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ScheduledRebalancingAPIUpdateRebalancingScheduleResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ScheduledRebalancingAPIDeleteRebalancingScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1DeleteRebalancingScheduleResponse
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIDeleteRebalancingScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIDeleteRebalancingScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ScheduledRebalancingAPIDeleteRebalancingScheduleResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ScheduledRebalancingAPIGetRebalancingScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1RebalancingSchedule
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIGetRebalancingScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIGetRebalancingScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ScheduledRebalancingAPIGetRebalancingScheduleResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CommitmentsAPIGetCommitmentsAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetCommitmentsAssignmentsResponse
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIGetCommitmentsAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIGetCommitmentsAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CommitmentsAPIGetCommitmentsAssignmentsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CommitmentsAPICreateCommitmentAssignmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPICreateCommitmentAssignmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPICreateCommitmentAssignmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CommitmentsAPICreateCommitmentAssignmentResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CommitmentsAPIDeleteCommitmentAssignmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIDeleteCommitmentAssignmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIDeleteCommitmentAssignmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CommitmentsAPIDeleteCommitmentAssignmentResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CommitmentsAPIGetCommitmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetCommitmentsResponse
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIGetCommitmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIGetCommitmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CommitmentsAPIGetCommitmentsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CommitmentsAPIImportAzureReservationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIImportAzureReservationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIImportAzureReservationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CommitmentsAPIImportAzureReservationsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CommitmentsAPIImportGCPCommitmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIImportGCPCommitmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIImportGCPCommitmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CommitmentsAPIImportGCPCommitmentsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CommitmentsAPIGetGCPCommitmentsImportScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetGCPCommitmentsImportScriptResponse
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIGetGCPCommitmentsImportScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIGetGCPCommitmentsImportScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CommitmentsAPIGetGCPCommitmentsImportScriptResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CommitmentsAPIDeleteCommitmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIDeleteCommitmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIDeleteCommitmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CommitmentsAPIDeleteCommitmentResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CommitmentsAPIUpdateCommitmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1UpdateCommitmentResponse
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIUpdateCommitmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIUpdateCommitmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CommitmentsAPIUpdateCommitmentResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CommitmentsAPIGetCommitmentAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1GetCommitmentAssignmentsResponse
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIGetCommitmentAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIGetCommitmentAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CommitmentsAPIGetCommitmentAssignmentsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CommitmentsAPIReplaceCommitmentAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiInventoryV1beta1ReplaceCommitmentAssignmentsResponse
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIReplaceCommitmentAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIReplaceCommitmentAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CommitmentsAPIReplaceCommitmentAssignmentsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetCleanupScriptTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCleanupScriptTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCleanupScriptTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetCleanupScriptTemplateResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ExternalClusterAPIGetCredentialsScriptTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExternalClusterAPIGetCredentialsScriptTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExternalClusterAPIGetCredentialsScriptTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ExternalClusterAPIGetCredentialsScriptTemplateResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type SSOAPIListSSOConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiSsoV1beta1ListSSOConnectionsResponse
}

// Status returns HTTPResponse.Status
func (r SSOAPIListSSOConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SSOAPIListSSOConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r SSOAPIListSSOConnectionsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type SSOAPICreateSSOConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiSsoV1beta1SSOConnection
}

// Status returns HTTPResponse.Status
func (r SSOAPICreateSSOConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SSOAPICreateSSOConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r SSOAPICreateSSOConnectionResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type SSOAPIDeleteSSOConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiSsoV1beta1DeleteSSOConnectionResponse
}

// Status returns HTTPResponse.Status
func (r SSOAPIDeleteSSOConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SSOAPIDeleteSSOConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r SSOAPIDeleteSSOConnectionResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type SSOAPIGetSSOConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiSsoV1beta1SSOConnection
}

// Status returns HTTPResponse.Status
func (r SSOAPIGetSSOConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SSOAPIGetSSOConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r SSOAPIGetSSOConnectionResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type SSOAPIUpdateSSOConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CastaiSsoV1beta1SSOConnection
}

// Status returns HTTPResponse.Status
func (r SSOAPIUpdateSSOConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SSOAPIUpdateSSOConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r SSOAPIUpdateSSOConnectionResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type ScheduledRebalancingAPIListAvailableRebalancingTZResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledrebalancingV1ListAvailableRebalancingTZResponse
}

// Status returns HTTPResponse.Status
func (r ScheduledRebalancingAPIListAvailableRebalancingTZResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduledRebalancingAPIListAvailableRebalancingTZResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r ScheduledRebalancingAPIListAvailableRebalancingTZResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPIGetAgentStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1GetAgentStatusResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIGetAgentStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIGetAgentStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPIGetAgentStatusResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1ListWorkloadScalingPoliciesResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1WorkloadScalingPolicy
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1DeleteWorkloadScalingPolicyResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPIGetWorkloadScalingPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1WorkloadScalingPolicy
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIGetWorkloadScalingPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIGetWorkloadScalingPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPIGetWorkloadScalingPolicyResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1WorkloadScalingPolicy
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1AssignScalingPolicyWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPIListWorkloadEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1ListWorkloadEventsResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIListWorkloadEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIListWorkloadEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPIListWorkloadEventsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPIListWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1ListWorkloadsResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIListWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIListWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPIListWorkloadsResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPIGetWorkloadsSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1GetWorkloadsSummaryResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIGetWorkloadsSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIGetWorkloadsSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPIGetWorkloadsSummaryResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPIGetWorkloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1GetWorkloadResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIGetWorkloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIGetWorkloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPIGetWorkloadResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPIUpdateWorkloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1UpdateWorkloadResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIUpdateWorkloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIUpdateWorkloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPIUpdateWorkloadResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPIGetInstallCmdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1GetInstallCmdResponse
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIGetInstallCmdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIGetInstallCmdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPIGetInstallCmdResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPIGetInstallScriptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIGetInstallScriptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIGetInstallScriptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPIGetInstallScriptResponse) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

type WorkloadOptimizationAPIUpdateWorkloadV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadoptimizationV1UpdateWorkloadResponseV2
}

// Status returns HTTPResponse.Status
func (r WorkloadOptimizationAPIUpdateWorkloadV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadOptimizationAPIUpdateWorkloadV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TODO: <castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240
// Body returns body of byte array
func (r WorkloadOptimizationAPIUpdateWorkloadV2Response) GetBody() []byte {
	return r.Body
}

// TODO: </castai customization> to have common interface. https://github.com/deepmap/oapi-codegen/issues/240

// AuthTokenAPIListAuthTokensWithResponse request returning *AuthTokenAPIListAuthTokensResponse
func (c *ClientWithResponses) AuthTokenAPIListAuthTokensWithResponse(ctx context.Context, params *AuthTokenAPIListAuthTokensParams) (*AuthTokenAPIListAuthTokensResponse, error) {
	rsp, err := c.AuthTokenAPIListAuthTokens(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIListAuthTokensResponse(rsp)
}

// AuthTokenAPICreateAuthTokenWithBodyWithResponse request with arbitrary body returning *AuthTokenAPICreateAuthTokenResponse
func (c *ClientWithResponses) AuthTokenAPICreateAuthTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*AuthTokenAPICreateAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPICreateAuthTokenWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPICreateAuthTokenResponse(rsp)
}

func (c *ClientWithResponses) AuthTokenAPICreateAuthTokenWithResponse(ctx context.Context, body AuthTokenAPICreateAuthTokenJSONRequestBody) (*AuthTokenAPICreateAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPICreateAuthToken(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPICreateAuthTokenResponse(rsp)
}

// AuthTokenAPIDeleteAuthTokenWithResponse request returning *AuthTokenAPIDeleteAuthTokenResponse
func (c *ClientWithResponses) AuthTokenAPIDeleteAuthTokenWithResponse(ctx context.Context, id string) (*AuthTokenAPIDeleteAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPIDeleteAuthToken(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIDeleteAuthTokenResponse(rsp)
}

// AuthTokenAPIGetAuthTokenWithResponse request returning *AuthTokenAPIGetAuthTokenResponse
func (c *ClientWithResponses) AuthTokenAPIGetAuthTokenWithResponse(ctx context.Context, id string) (*AuthTokenAPIGetAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPIGetAuthToken(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIGetAuthTokenResponse(rsp)
}

// AuthTokenAPIUpdateAuthTokenWithBodyWithResponse request with arbitrary body returning *AuthTokenAPIUpdateAuthTokenResponse
func (c *ClientWithResponses) AuthTokenAPIUpdateAuthTokenWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*AuthTokenAPIUpdateAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPIUpdateAuthTokenWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIUpdateAuthTokenResponse(rsp)
}

func (c *ClientWithResponses) AuthTokenAPIUpdateAuthTokenWithResponse(ctx context.Context, id string, body AuthTokenAPIUpdateAuthTokenJSONRequestBody) (*AuthTokenAPIUpdateAuthTokenResponse, error) {
	rsp, err := c.AuthTokenAPIUpdateAuthToken(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenAPIUpdateAuthTokenResponse(rsp)
}

// UsersAPIListInvitationsWithResponse request returning *UsersAPIListInvitationsResponse
func (c *ClientWithResponses) UsersAPIListInvitationsWithResponse(ctx context.Context, params *UsersAPIListInvitationsParams) (*UsersAPIListInvitationsResponse, error) {
	rsp, err := c.UsersAPIListInvitations(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIListInvitationsResponse(rsp)
}

// UsersAPICreateInvitationsWithBodyWithResponse request with arbitrary body returning *UsersAPICreateInvitationsResponse
func (c *ClientWithResponses) UsersAPICreateInvitationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UsersAPICreateInvitationsResponse, error) {
	rsp, err := c.UsersAPICreateInvitationsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPICreateInvitationsResponse(rsp)
}

func (c *ClientWithResponses) UsersAPICreateInvitationsWithResponse(ctx context.Context, body UsersAPICreateInvitationsJSONRequestBody) (*UsersAPICreateInvitationsResponse, error) {
	rsp, err := c.UsersAPICreateInvitations(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPICreateInvitationsResponse(rsp)
}

// UsersAPIDeleteInvitationWithResponse request returning *UsersAPIDeleteInvitationResponse
func (c *ClientWithResponses) UsersAPIDeleteInvitationWithResponse(ctx context.Context, id string) (*UsersAPIDeleteInvitationResponse, error) {
	rsp, err := c.UsersAPIDeleteInvitation(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIDeleteInvitationResponse(rsp)
}

// UsersAPIClaimInvitationWithBodyWithResponse request with arbitrary body returning *UsersAPIClaimInvitationResponse
func (c *ClientWithResponses) UsersAPIClaimInvitationWithBodyWithResponse(ctx context.Context, invitationId string, contentType string, body io.Reader) (*UsersAPIClaimInvitationResponse, error) {
	rsp, err := c.UsersAPIClaimInvitationWithBody(ctx, invitationId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIClaimInvitationResponse(rsp)
}

func (c *ClientWithResponses) UsersAPIClaimInvitationWithResponse(ctx context.Context, invitationId string, body UsersAPIClaimInvitationJSONRequestBody) (*UsersAPIClaimInvitationResponse, error) {
	rsp, err := c.UsersAPIClaimInvitation(ctx, invitationId, body)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIClaimInvitationResponse(rsp)
}

// EvictorAPIGetAdvancedConfigWithResponse request returning *EvictorAPIGetAdvancedConfigResponse
func (c *ClientWithResponses) EvictorAPIGetAdvancedConfigWithResponse(ctx context.Context, clusterId string) (*EvictorAPIGetAdvancedConfigResponse, error) {
	rsp, err := c.EvictorAPIGetAdvancedConfig(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseEvictorAPIGetAdvancedConfigResponse(rsp)
}

// EvictorAPIUpsertAdvancedConfigWithBodyWithResponse request with arbitrary body returning *EvictorAPIUpsertAdvancedConfigResponse
func (c *ClientWithResponses) EvictorAPIUpsertAdvancedConfigWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*EvictorAPIUpsertAdvancedConfigResponse, error) {
	rsp, err := c.EvictorAPIUpsertAdvancedConfigWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEvictorAPIUpsertAdvancedConfigResponse(rsp)
}

func (c *ClientWithResponses) EvictorAPIUpsertAdvancedConfigWithResponse(ctx context.Context, clusterId string, body EvictorAPIUpsertAdvancedConfigJSONRequestBody) (*EvictorAPIUpsertAdvancedConfigResponse, error) {
	rsp, err := c.EvictorAPIUpsertAdvancedConfig(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseEvictorAPIUpsertAdvancedConfigResponse(rsp)
}

// NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse request with arbitrary body returning *NodeTemplatesAPIFilterInstanceTypesResponse
func (c *ClientWithResponses) NodeTemplatesAPIFilterInstanceTypesWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*NodeTemplatesAPIFilterInstanceTypesResponse, error) {
	rsp, err := c.NodeTemplatesAPIFilterInstanceTypesWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIFilterInstanceTypesResponse(rsp)
}

func (c *ClientWithResponses) NodeTemplatesAPIFilterInstanceTypesWithResponse(ctx context.Context, clusterId string, body NodeTemplatesAPIFilterInstanceTypesJSONRequestBody) (*NodeTemplatesAPIFilterInstanceTypesResponse, error) {
	rsp, err := c.NodeTemplatesAPIFilterInstanceTypes(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIFilterInstanceTypesResponse(rsp)
}

// NodeTemplatesAPIGenerateNodeTemplatesWithResponse request returning *NodeTemplatesAPIGenerateNodeTemplatesResponse
func (c *ClientWithResponses) NodeTemplatesAPIGenerateNodeTemplatesWithResponse(ctx context.Context, clusterId string) (*NodeTemplatesAPIGenerateNodeTemplatesResponse, error) {
	rsp, err := c.NodeTemplatesAPIGenerateNodeTemplates(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIGenerateNodeTemplatesResponse(rsp)
}

// NodeConfigurationAPIListConfigurationsWithResponse request returning *NodeConfigurationAPIListConfigurationsResponse
func (c *ClientWithResponses) NodeConfigurationAPIListConfigurationsWithResponse(ctx context.Context, clusterId string) (*NodeConfigurationAPIListConfigurationsResponse, error) {
	rsp, err := c.NodeConfigurationAPIListConfigurations(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIListConfigurationsResponse(rsp)
}

// NodeConfigurationAPICreateConfigurationWithBodyWithResponse request with arbitrary body returning *NodeConfigurationAPICreateConfigurationResponse
func (c *ClientWithResponses) NodeConfigurationAPICreateConfigurationWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*NodeConfigurationAPICreateConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPICreateConfigurationWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPICreateConfigurationResponse(rsp)
}

func (c *ClientWithResponses) NodeConfigurationAPICreateConfigurationWithResponse(ctx context.Context, clusterId string, body NodeConfigurationAPICreateConfigurationJSONRequestBody) (*NodeConfigurationAPICreateConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPICreateConfiguration(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPICreateConfigurationResponse(rsp)
}

// NodeConfigurationAPIGetSuggestedConfigurationWithResponse request returning *NodeConfigurationAPIGetSuggestedConfigurationResponse
func (c *ClientWithResponses) NodeConfigurationAPIGetSuggestedConfigurationWithResponse(ctx context.Context, clusterId string) (*NodeConfigurationAPIGetSuggestedConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPIGetSuggestedConfiguration(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIGetSuggestedConfigurationResponse(rsp)
}

// NodeConfigurationAPIDeleteConfigurationWithResponse request returning *NodeConfigurationAPIDeleteConfigurationResponse
func (c *ClientWithResponses) NodeConfigurationAPIDeleteConfigurationWithResponse(ctx context.Context, clusterId string, id string) (*NodeConfigurationAPIDeleteConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPIDeleteConfiguration(ctx, clusterId, id)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIDeleteConfigurationResponse(rsp)
}

// NodeConfigurationAPIGetConfigurationWithResponse request returning *NodeConfigurationAPIGetConfigurationResponse
func (c *ClientWithResponses) NodeConfigurationAPIGetConfigurationWithResponse(ctx context.Context, clusterId string, id string) (*NodeConfigurationAPIGetConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPIGetConfiguration(ctx, clusterId, id)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIGetConfigurationResponse(rsp)
}

// NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse request with arbitrary body returning *NodeConfigurationAPIUpdateConfigurationResponse
func (c *ClientWithResponses) NodeConfigurationAPIUpdateConfigurationWithBodyWithResponse(ctx context.Context, clusterId string, id string, contentType string, body io.Reader) (*NodeConfigurationAPIUpdateConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPIUpdateConfigurationWithBody(ctx, clusterId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIUpdateConfigurationResponse(rsp)
}

func (c *ClientWithResponses) NodeConfigurationAPIUpdateConfigurationWithResponse(ctx context.Context, clusterId string, id string, body NodeConfigurationAPIUpdateConfigurationJSONRequestBody) (*NodeConfigurationAPIUpdateConfigurationResponse, error) {
	rsp, err := c.NodeConfigurationAPIUpdateConfiguration(ctx, clusterId, id, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIUpdateConfigurationResponse(rsp)
}

// NodeConfigurationAPISetDefaultWithResponse request returning *NodeConfigurationAPISetDefaultResponse
func (c *ClientWithResponses) NodeConfigurationAPISetDefaultWithResponse(ctx context.Context, clusterId string, id string) (*NodeConfigurationAPISetDefaultResponse, error) {
	rsp, err := c.NodeConfigurationAPISetDefault(ctx, clusterId, id)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPISetDefaultResponse(rsp)
}

// PoliciesAPIGetClusterNodeConstraintsWithResponse request returning *PoliciesAPIGetClusterNodeConstraintsResponse
func (c *ClientWithResponses) PoliciesAPIGetClusterNodeConstraintsWithResponse(ctx context.Context, clusterId string) (*PoliciesAPIGetClusterNodeConstraintsResponse, error) {
	rsp, err := c.PoliciesAPIGetClusterNodeConstraints(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesAPIGetClusterNodeConstraintsResponse(rsp)
}

// NodeTemplatesAPIListNodeTemplatesWithResponse request returning *NodeTemplatesAPIListNodeTemplatesResponse
func (c *ClientWithResponses) NodeTemplatesAPIListNodeTemplatesWithResponse(ctx context.Context, clusterId string, params *NodeTemplatesAPIListNodeTemplatesParams) (*NodeTemplatesAPIListNodeTemplatesResponse, error) {
	rsp, err := c.NodeTemplatesAPIListNodeTemplates(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIListNodeTemplatesResponse(rsp)
}

// NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse request with arbitrary body returning *NodeTemplatesAPICreateNodeTemplateResponse
func (c *ClientWithResponses) NodeTemplatesAPICreateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*NodeTemplatesAPICreateNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPICreateNodeTemplateWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPICreateNodeTemplateResponse(rsp)
}

func (c *ClientWithResponses) NodeTemplatesAPICreateNodeTemplateWithResponse(ctx context.Context, clusterId string, body NodeTemplatesAPICreateNodeTemplateJSONRequestBody) (*NodeTemplatesAPICreateNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPICreateNodeTemplate(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPICreateNodeTemplateResponse(rsp)
}

// NodeTemplatesAPIDeleteNodeTemplateWithResponse request returning *NodeTemplatesAPIDeleteNodeTemplateResponse
func (c *ClientWithResponses) NodeTemplatesAPIDeleteNodeTemplateWithResponse(ctx context.Context, clusterId string, nodeTemplateName string) (*NodeTemplatesAPIDeleteNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPIDeleteNodeTemplate(ctx, clusterId, nodeTemplateName)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIDeleteNodeTemplateResponse(rsp)
}

// NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse request with arbitrary body returning *NodeTemplatesAPIUpdateNodeTemplateResponse
func (c *ClientWithResponses) NodeTemplatesAPIUpdateNodeTemplateWithBodyWithResponse(ctx context.Context, clusterId string, nodeTemplateName string, contentType string, body io.Reader) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPIUpdateNodeTemplateWithBody(ctx, clusterId, nodeTemplateName, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIUpdateNodeTemplateResponse(rsp)
}

func (c *ClientWithResponses) NodeTemplatesAPIUpdateNodeTemplateWithResponse(ctx context.Context, clusterId string, nodeTemplateName string, body NodeTemplatesAPIUpdateNodeTemplateJSONRequestBody) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error) {
	rsp, err := c.NodeTemplatesAPIUpdateNodeTemplate(ctx, clusterId, nodeTemplateName, body)
	if err != nil {
		return nil, err
	}
	return ParseNodeTemplatesAPIUpdateNodeTemplateResponse(rsp)
}

// PoliciesAPIGetClusterPoliciesWithResponse request returning *PoliciesAPIGetClusterPoliciesResponse
func (c *ClientWithResponses) PoliciesAPIGetClusterPoliciesWithResponse(ctx context.Context, clusterId string) (*PoliciesAPIGetClusterPoliciesResponse, error) {
	rsp, err := c.PoliciesAPIGetClusterPolicies(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesAPIGetClusterPoliciesResponse(rsp)
}

// PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse request with arbitrary body returning *PoliciesAPIUpsertClusterPoliciesResponse
func (c *ClientWithResponses) PoliciesAPIUpsertClusterPoliciesWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*PoliciesAPIUpsertClusterPoliciesResponse, error) {
	rsp, err := c.PoliciesAPIUpsertClusterPoliciesWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesAPIUpsertClusterPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PoliciesAPIUpsertClusterPoliciesWithResponse(ctx context.Context, clusterId string, body PoliciesAPIUpsertClusterPoliciesJSONRequestBody) (*PoliciesAPIUpsertClusterPoliciesResponse, error) {
	rsp, err := c.PoliciesAPIUpsertClusterPolicies(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParsePoliciesAPIUpsertClusterPoliciesResponse(rsp)
}

// ScheduledRebalancingAPIListRebalancingJobsWithResponse request returning *ScheduledRebalancingAPIListRebalancingJobsResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIListRebalancingJobsWithResponse(ctx context.Context, clusterId string, params *ScheduledRebalancingAPIListRebalancingJobsParams) (*ScheduledRebalancingAPIListRebalancingJobsResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIListRebalancingJobs(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIListRebalancingJobsResponse(rsp)
}

// ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse request with arbitrary body returning *ScheduledRebalancingAPICreateRebalancingJobResponse
func (c *ClientWithResponses) ScheduledRebalancingAPICreateRebalancingJobWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ScheduledRebalancingAPICreateRebalancingJobResponse, error) {
	rsp, err := c.ScheduledRebalancingAPICreateRebalancingJobWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPICreateRebalancingJobResponse(rsp)
}

func (c *ClientWithResponses) ScheduledRebalancingAPICreateRebalancingJobWithResponse(ctx context.Context, clusterId string, body ScheduledRebalancingAPICreateRebalancingJobJSONRequestBody) (*ScheduledRebalancingAPICreateRebalancingJobResponse, error) {
	rsp, err := c.ScheduledRebalancingAPICreateRebalancingJob(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPICreateRebalancingJobResponse(rsp)
}

// ScheduledRebalancingAPIDeleteRebalancingJobWithResponse request returning *ScheduledRebalancingAPIDeleteRebalancingJobResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIDeleteRebalancingJobWithResponse(ctx context.Context, clusterId string, id string) (*ScheduledRebalancingAPIDeleteRebalancingJobResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIDeleteRebalancingJob(ctx, clusterId, id)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIDeleteRebalancingJobResponse(rsp)
}

// ScheduledRebalancingAPIGetRebalancingJobWithResponse request returning *ScheduledRebalancingAPIGetRebalancingJobResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIGetRebalancingJobWithResponse(ctx context.Context, clusterId string, id string) (*ScheduledRebalancingAPIGetRebalancingJobResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIGetRebalancingJob(ctx, clusterId, id)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIGetRebalancingJobResponse(rsp)
}

// ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse request with arbitrary body returning *ScheduledRebalancingAPIUpdateRebalancingJobResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIUpdateRebalancingJobWithBodyWithResponse(ctx context.Context, clusterId string, id string, contentType string, body io.Reader) (*ScheduledRebalancingAPIUpdateRebalancingJobResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIUpdateRebalancingJobWithBody(ctx, clusterId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIUpdateRebalancingJobResponse(rsp)
}

func (c *ClientWithResponses) ScheduledRebalancingAPIUpdateRebalancingJobWithResponse(ctx context.Context, clusterId string, id string, body ScheduledRebalancingAPIUpdateRebalancingJobJSONRequestBody) (*ScheduledRebalancingAPIUpdateRebalancingJobResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIUpdateRebalancingJob(ctx, clusterId, id, body)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIUpdateRebalancingJobResponse(rsp)
}

// ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse request with arbitrary body returning *ScheduledRebalancingAPIPreviewRebalancingScheduleResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIPreviewRebalancingScheduleWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ScheduledRebalancingAPIPreviewRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIPreviewRebalancingScheduleWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIPreviewRebalancingScheduleResponse(rsp)
}

func (c *ClientWithResponses) ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse(ctx context.Context, clusterId string, body ScheduledRebalancingAPIPreviewRebalancingScheduleJSONRequestBody) (*ScheduledRebalancingAPIPreviewRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIPreviewRebalancingSchedule(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIPreviewRebalancingScheduleResponse(rsp)
}

// ExternalClusterAPIListClustersWithResponse request returning *ExternalClusterAPIListClustersResponse
func (c *ClientWithResponses) ExternalClusterAPIListClustersWithResponse(ctx context.Context) (*ExternalClusterAPIListClustersResponse, error) {
	rsp, err := c.ExternalClusterAPIListClusters(ctx)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIListClustersResponse(rsp)
}

// ExternalClusterAPIRegisterClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIRegisterClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIRegisterClusterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ExternalClusterAPIRegisterClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIRegisterClusterWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIRegisterClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIRegisterClusterWithResponse(ctx context.Context, body ExternalClusterAPIRegisterClusterJSONRequestBody) (*ExternalClusterAPIRegisterClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIRegisterCluster(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIRegisterClusterResponse(rsp)
}

// ExternalClusterAPIGetListNodesFiltersWithResponse request returning *ExternalClusterAPIGetListNodesFiltersResponse
func (c *ClientWithResponses) ExternalClusterAPIGetListNodesFiltersWithResponse(ctx context.Context) (*ExternalClusterAPIGetListNodesFiltersResponse, error) {
	rsp, err := c.ExternalClusterAPIGetListNodesFilters(ctx)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetListNodesFiltersResponse(rsp)
}

// OperationsAPIGetOperationWithResponse request returning *OperationsAPIGetOperationResponse
func (c *ClientWithResponses) OperationsAPIGetOperationWithResponse(ctx context.Context, id string) (*OperationsAPIGetOperationResponse, error) {
	rsp, err := c.OperationsAPIGetOperation(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseOperationsAPIGetOperationResponse(rsp)
}

// ExternalClusterAPIDeleteClusterWithResponse request returning *ExternalClusterAPIDeleteClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIDeleteClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDeleteClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDeleteCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDeleteClusterResponse(rsp)
}

// ExternalClusterAPIGetClusterWithResponse request returning *ExternalClusterAPIGetClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIGetClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetClusterResponse(rsp)
}

// ExternalClusterAPIUpdateClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIUpdateClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIUpdateClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateClusterWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterJSONRequestBody) (*ExternalClusterAPIUpdateClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateCluster(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterResponse(rsp)
}

// ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse request returning *ExternalClusterAPIDeleteAssumeRolePrincipalResponse
func (c *ClientWithResponses) ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIDeleteAssumeRolePrincipalResponse, error) {
	rsp, err := c.ExternalClusterAPIDeleteAssumeRolePrincipal(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDeleteAssumeRolePrincipalResponse(rsp)
}

// ExternalClusterAPIGetAssumeRolePrincipalWithResponse request returning *ExternalClusterAPIGetAssumeRolePrincipalResponse
func (c *ClientWithResponses) ExternalClusterAPIGetAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetAssumeRolePrincipalResponse, error) {
	rsp, err := c.ExternalClusterAPIGetAssumeRolePrincipal(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetAssumeRolePrincipalResponse(rsp)
}

// ExternalClusterAPICreateAssumeRolePrincipalWithResponse request returning *ExternalClusterAPICreateAssumeRolePrincipalResponse
func (c *ClientWithResponses) ExternalClusterAPICreateAssumeRolePrincipalWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPICreateAssumeRolePrincipalResponse, error) {
	rsp, err := c.ExternalClusterAPICreateAssumeRolePrincipal(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPICreateAssumeRolePrincipalResponse(rsp)
}

// ExternalClusterAPIGetAssumeRoleUserWithResponse request returning *ExternalClusterAPIGetAssumeRoleUserResponse
func (c *ClientWithResponses) ExternalClusterAPIGetAssumeRoleUserWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetAssumeRoleUserResponse, error) {
	rsp, err := c.ExternalClusterAPIGetAssumeRoleUser(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetAssumeRoleUserResponse(rsp)
}

// ExternalClusterAPIGetCleanupScriptWithResponse request returning *ExternalClusterAPIGetCleanupScriptResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCleanupScriptWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIGetCleanupScriptResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCleanupScript(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCleanupScriptResponse(rsp)
}

// ExternalClusterAPIGetCredentialsScriptWithResponse request returning *ExternalClusterAPIGetCredentialsScriptResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCredentialsScriptWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIGetCredentialsScriptParams) (*ExternalClusterAPIGetCredentialsScriptResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCredentialsScript(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCredentialsScriptResponse(rsp)
}

// ExternalClusterAPIDisconnectClusterWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIDisconnectClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIDisconnectClusterWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDisconnectClusterWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDisconnectClusterResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIDisconnectClusterWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIDisconnectClusterJSONRequestBody) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIDisconnectCluster(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDisconnectClusterResponse(rsp)
}

// ExternalClusterAPIHandleCloudEventWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIHandleCloudEventResponse
func (c *ClientWithResponses) ExternalClusterAPIHandleCloudEventWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIHandleCloudEventResponse, error) {
	rsp, err := c.ExternalClusterAPIHandleCloudEventWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIHandleCloudEventResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIHandleCloudEventWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIHandleCloudEventJSONRequestBody) (*ExternalClusterAPIHandleCloudEventResponse, error) {
	rsp, err := c.ExternalClusterAPIHandleCloudEvent(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIHandleCloudEventResponse(rsp)
}

// ExternalClusterAPIListNodesWithResponse request returning *ExternalClusterAPIListNodesResponse
func (c *ClientWithResponses) ExternalClusterAPIListNodesWithResponse(ctx context.Context, clusterId string, params *ExternalClusterAPIListNodesParams) (*ExternalClusterAPIListNodesResponse, error) {
	rsp, err := c.ExternalClusterAPIListNodes(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIListNodesResponse(rsp)
}

// ExternalClusterAPIAddNodeWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIAddNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIAddNodeWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIAddNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIAddNodeWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIAddNodeResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIAddNodeWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIAddNodeJSONRequestBody) (*ExternalClusterAPIAddNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIAddNode(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIAddNodeResponse(rsp)
}

// ExternalClusterAPIDeleteNodeWithResponse request returning *ExternalClusterAPIDeleteNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIDeleteNodeWithResponse(ctx context.Context, clusterId string, nodeId string, params *ExternalClusterAPIDeleteNodeParams) (*ExternalClusterAPIDeleteNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDeleteNode(ctx, clusterId, nodeId, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDeleteNodeResponse(rsp)
}

// ExternalClusterAPIGetNodeWithResponse request returning *ExternalClusterAPIGetNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIGetNodeWithResponse(ctx context.Context, clusterId string, nodeId string) (*ExternalClusterAPIGetNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIGetNode(ctx, clusterId, nodeId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetNodeResponse(rsp)
}

// ExternalClusterAPIDrainNodeWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIDrainNodeResponse
func (c *ClientWithResponses) ExternalClusterAPIDrainNodeWithBodyWithResponse(ctx context.Context, clusterId string, nodeId string, contentType string, body io.Reader) (*ExternalClusterAPIDrainNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDrainNodeWithBody(ctx, clusterId, nodeId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDrainNodeResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIDrainNodeWithResponse(ctx context.Context, clusterId string, nodeId string, body ExternalClusterAPIDrainNodeJSONRequestBody) (*ExternalClusterAPIDrainNodeResponse, error) {
	rsp, err := c.ExternalClusterAPIDrainNode(ctx, clusterId, nodeId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIDrainNodeResponse(rsp)
}

// ExternalClusterAPIReconcileClusterWithResponse request returning *ExternalClusterAPIReconcileClusterResponse
func (c *ClientWithResponses) ExternalClusterAPIReconcileClusterWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPIReconcileClusterResponse, error) {
	rsp, err := c.ExternalClusterAPIReconcileCluster(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIReconcileClusterResponse(rsp)
}

// ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse request with arbitrary body returning *ExternalClusterAPIUpdateClusterTagsResponse
func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterTagsWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*ExternalClusterAPIUpdateClusterTagsResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateClusterTagsWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterTagsResponse(rsp)
}

func (c *ClientWithResponses) ExternalClusterAPIUpdateClusterTagsWithResponse(ctx context.Context, clusterId string, body ExternalClusterAPIUpdateClusterTagsJSONRequestBody) (*ExternalClusterAPIUpdateClusterTagsResponse, error) {
	rsp, err := c.ExternalClusterAPIUpdateClusterTags(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIUpdateClusterTagsResponse(rsp)
}

// ExternalClusterAPICreateClusterTokenWithResponse request returning *ExternalClusterAPICreateClusterTokenResponse
func (c *ClientWithResponses) ExternalClusterAPICreateClusterTokenWithResponse(ctx context.Context, clusterId string) (*ExternalClusterAPICreateClusterTokenResponse, error) {
	rsp, err := c.ExternalClusterAPICreateClusterToken(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPICreateClusterTokenResponse(rsp)
}

// NodeConfigurationAPIListMaxPodsPresetsWithResponse request returning *NodeConfigurationAPIListMaxPodsPresetsResponse
func (c *ClientWithResponses) NodeConfigurationAPIListMaxPodsPresetsWithResponse(ctx context.Context) (*NodeConfigurationAPIListMaxPodsPresetsResponse, error) {
	rsp, err := c.NodeConfigurationAPIListMaxPodsPresets(ctx)
	if err != nil {
		return nil, err
	}
	return ParseNodeConfigurationAPIListMaxPodsPresetsResponse(rsp)
}

// UsersAPICurrentUserProfileWithResponse request returning *UsersAPICurrentUserProfileResponse
func (c *ClientWithResponses) UsersAPICurrentUserProfileWithResponse(ctx context.Context) (*UsersAPICurrentUserProfileResponse, error) {
	rsp, err := c.UsersAPICurrentUserProfile(ctx)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPICurrentUserProfileResponse(rsp)
}

// UsersAPIUpdateCurrentUserProfileWithBodyWithResponse request with arbitrary body returning *UsersAPIUpdateCurrentUserProfileResponse
func (c *ClientWithResponses) UsersAPIUpdateCurrentUserProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UsersAPIUpdateCurrentUserProfileResponse, error) {
	rsp, err := c.UsersAPIUpdateCurrentUserProfileWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIUpdateCurrentUserProfileResponse(rsp)
}

func (c *ClientWithResponses) UsersAPIUpdateCurrentUserProfileWithResponse(ctx context.Context, body UsersAPIUpdateCurrentUserProfileJSONRequestBody) (*UsersAPIUpdateCurrentUserProfileResponse, error) {
	rsp, err := c.UsersAPIUpdateCurrentUserProfile(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIUpdateCurrentUserProfileResponse(rsp)
}

// UsersAPIListOrganizationsWithResponse request returning *UsersAPIListOrganizationsResponse
func (c *ClientWithResponses) UsersAPIListOrganizationsWithResponse(ctx context.Context, params *UsersAPIListOrganizationsParams) (*UsersAPIListOrganizationsResponse, error) {
	rsp, err := c.UsersAPIListOrganizations(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIListOrganizationsResponse(rsp)
}

// UsersAPICreateOrganizationWithBodyWithResponse request with arbitrary body returning *UsersAPICreateOrganizationResponse
func (c *ClientWithResponses) UsersAPICreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UsersAPICreateOrganizationResponse, error) {
	rsp, err := c.UsersAPICreateOrganizationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPICreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UsersAPICreateOrganizationWithResponse(ctx context.Context, body UsersAPICreateOrganizationJSONRequestBody) (*UsersAPICreateOrganizationResponse, error) {
	rsp, err := c.UsersAPICreateOrganization(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPICreateOrganizationResponse(rsp)
}

// InventoryAPIGetOrganizationReservationsBalanceWithResponse request returning *InventoryAPIGetOrganizationReservationsBalanceResponse
func (c *ClientWithResponses) InventoryAPIGetOrganizationReservationsBalanceWithResponse(ctx context.Context) (*InventoryAPIGetOrganizationReservationsBalanceResponse, error) {
	rsp, err := c.InventoryAPIGetOrganizationReservationsBalance(ctx)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIGetOrganizationReservationsBalanceResponse(rsp)
}

// InventoryAPIGetOrganizationResourceUsageWithResponse request returning *InventoryAPIGetOrganizationResourceUsageResponse
func (c *ClientWithResponses) InventoryAPIGetOrganizationResourceUsageWithResponse(ctx context.Context) (*InventoryAPIGetOrganizationResourceUsageResponse, error) {
	rsp, err := c.InventoryAPIGetOrganizationResourceUsage(ctx)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIGetOrganizationResourceUsageResponse(rsp)
}

// UsersAPIDeleteOrganizationWithResponse request returning *UsersAPIDeleteOrganizationResponse
func (c *ClientWithResponses) UsersAPIDeleteOrganizationWithResponse(ctx context.Context, id string) (*UsersAPIDeleteOrganizationResponse, error) {
	rsp, err := c.UsersAPIDeleteOrganization(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIDeleteOrganizationResponse(rsp)
}

// UsersAPIGetOrganizationWithResponse request returning *UsersAPIGetOrganizationResponse
func (c *ClientWithResponses) UsersAPIGetOrganizationWithResponse(ctx context.Context, id string) (*UsersAPIGetOrganizationResponse, error) {
	rsp, err := c.UsersAPIGetOrganization(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIGetOrganizationResponse(rsp)
}

// UsersAPIEditOrganizationWithBodyWithResponse request with arbitrary body returning *UsersAPIEditOrganizationResponse
func (c *ClientWithResponses) UsersAPIEditOrganizationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*UsersAPIEditOrganizationResponse, error) {
	rsp, err := c.UsersAPIEditOrganizationWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIEditOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UsersAPIEditOrganizationWithResponse(ctx context.Context, id string, body UsersAPIEditOrganizationJSONRequestBody) (*UsersAPIEditOrganizationResponse, error) {
	rsp, err := c.UsersAPIEditOrganization(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIEditOrganizationResponse(rsp)
}

// InventoryAPISyncClusterResourcesWithResponse request returning *InventoryAPISyncClusterResourcesResponse
func (c *ClientWithResponses) InventoryAPISyncClusterResourcesWithResponse(ctx context.Context, organizationId string, clusterId string) (*InventoryAPISyncClusterResourcesResponse, error) {
	rsp, err := c.InventoryAPISyncClusterResources(ctx, organizationId, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPISyncClusterResourcesResponse(rsp)
}

// InventoryAPIGetReservationsWithResponse request returning *InventoryAPIGetReservationsResponse
func (c *ClientWithResponses) InventoryAPIGetReservationsWithResponse(ctx context.Context, organizationId string) (*InventoryAPIGetReservationsResponse, error) {
	rsp, err := c.InventoryAPIGetReservations(ctx, organizationId)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIGetReservationsResponse(rsp)
}

// InventoryAPIAddReservationWithBodyWithResponse request with arbitrary body returning *InventoryAPIAddReservationResponse
func (c *ClientWithResponses) InventoryAPIAddReservationWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader) (*InventoryAPIAddReservationResponse, error) {
	rsp, err := c.InventoryAPIAddReservationWithBody(ctx, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIAddReservationResponse(rsp)
}

func (c *ClientWithResponses) InventoryAPIAddReservationWithResponse(ctx context.Context, organizationId string, body InventoryAPIAddReservationJSONRequestBody) (*InventoryAPIAddReservationResponse, error) {
	rsp, err := c.InventoryAPIAddReservation(ctx, organizationId, body)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIAddReservationResponse(rsp)
}

// InventoryAPIGetReservationsBalanceWithResponse request returning *InventoryAPIGetReservationsBalanceResponse
func (c *ClientWithResponses) InventoryAPIGetReservationsBalanceWithResponse(ctx context.Context, organizationId string) (*InventoryAPIGetReservationsBalanceResponse, error) {
	rsp, err := c.InventoryAPIGetReservationsBalance(ctx, organizationId)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIGetReservationsBalanceResponse(rsp)
}

// InventoryAPIOverwriteReservationsWithBodyWithResponse request with arbitrary body returning *InventoryAPIOverwriteReservationsResponse
func (c *ClientWithResponses) InventoryAPIOverwriteReservationsWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader) (*InventoryAPIOverwriteReservationsResponse, error) {
	rsp, err := c.InventoryAPIOverwriteReservationsWithBody(ctx, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIOverwriteReservationsResponse(rsp)
}

func (c *ClientWithResponses) InventoryAPIOverwriteReservationsWithResponse(ctx context.Context, organizationId string, body InventoryAPIOverwriteReservationsJSONRequestBody) (*InventoryAPIOverwriteReservationsResponse, error) {
	rsp, err := c.InventoryAPIOverwriteReservations(ctx, organizationId, body)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIOverwriteReservationsResponse(rsp)
}

// InventoryAPIDeleteReservationWithResponse request returning *InventoryAPIDeleteReservationResponse
func (c *ClientWithResponses) InventoryAPIDeleteReservationWithResponse(ctx context.Context, organizationId string, reservationId string) (*InventoryAPIDeleteReservationResponse, error) {
	rsp, err := c.InventoryAPIDeleteReservation(ctx, organizationId, reservationId)
	if err != nil {
		return nil, err
	}
	return ParseInventoryAPIDeleteReservationResponse(rsp)
}

// UsersAPIListOrganizationUsersWithResponse request returning *UsersAPIListOrganizationUsersResponse
func (c *ClientWithResponses) UsersAPIListOrganizationUsersWithResponse(ctx context.Context, organizationId string) (*UsersAPIListOrganizationUsersResponse, error) {
	rsp, err := c.UsersAPIListOrganizationUsers(ctx, organizationId)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIListOrganizationUsersResponse(rsp)
}

// UsersAPIAddUserToOrganizationWithBodyWithResponse request with arbitrary body returning *UsersAPIAddUserToOrganizationResponse
func (c *ClientWithResponses) UsersAPIAddUserToOrganizationWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader) (*UsersAPIAddUserToOrganizationResponse, error) {
	rsp, err := c.UsersAPIAddUserToOrganizationWithBody(ctx, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIAddUserToOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UsersAPIAddUserToOrganizationWithResponse(ctx context.Context, organizationId string, body UsersAPIAddUserToOrganizationJSONRequestBody) (*UsersAPIAddUserToOrganizationResponse, error) {
	rsp, err := c.UsersAPIAddUserToOrganization(ctx, organizationId, body)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIAddUserToOrganizationResponse(rsp)
}

// UsersAPIRemoveUserFromOrganizationWithResponse request returning *UsersAPIRemoveUserFromOrganizationResponse
func (c *ClientWithResponses) UsersAPIRemoveUserFromOrganizationWithResponse(ctx context.Context, organizationId string, userId string) (*UsersAPIRemoveUserFromOrganizationResponse, error) {
	rsp, err := c.UsersAPIRemoveUserFromOrganization(ctx, organizationId, userId)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIRemoveUserFromOrganizationResponse(rsp)
}

// UsersAPIUpdateOrganizationUserWithBodyWithResponse request with arbitrary body returning *UsersAPIUpdateOrganizationUserResponse
func (c *ClientWithResponses) UsersAPIUpdateOrganizationUserWithBodyWithResponse(ctx context.Context, organizationId string, userId string, contentType string, body io.Reader) (*UsersAPIUpdateOrganizationUserResponse, error) {
	rsp, err := c.UsersAPIUpdateOrganizationUserWithBody(ctx, organizationId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIUpdateOrganizationUserResponse(rsp)
}

func (c *ClientWithResponses) UsersAPIUpdateOrganizationUserWithResponse(ctx context.Context, organizationId string, userId string, body UsersAPIUpdateOrganizationUserJSONRequestBody) (*UsersAPIUpdateOrganizationUserResponse, error) {
	rsp, err := c.UsersAPIUpdateOrganizationUser(ctx, organizationId, userId, body)
	if err != nil {
		return nil, err
	}
	return ParseUsersAPIUpdateOrganizationUserResponse(rsp)
}

// ScheduledRebalancingAPIListRebalancingSchedulesWithResponse request returning *ScheduledRebalancingAPIListRebalancingSchedulesResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIListRebalancingSchedulesWithResponse(ctx context.Context) (*ScheduledRebalancingAPIListRebalancingSchedulesResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIListRebalancingSchedules(ctx)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIListRebalancingSchedulesResponse(rsp)
}

// ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse request with arbitrary body returning *ScheduledRebalancingAPICreateRebalancingScheduleResponse
func (c *ClientWithResponses) ScheduledRebalancingAPICreateRebalancingScheduleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ScheduledRebalancingAPICreateRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPICreateRebalancingScheduleWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPICreateRebalancingScheduleResponse(rsp)
}

func (c *ClientWithResponses) ScheduledRebalancingAPICreateRebalancingScheduleWithResponse(ctx context.Context, body ScheduledRebalancingAPICreateRebalancingScheduleJSONRequestBody) (*ScheduledRebalancingAPICreateRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPICreateRebalancingSchedule(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPICreateRebalancingScheduleResponse(rsp)
}

// ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse request with arbitrary body returning *ScheduledRebalancingAPIUpdateRebalancingScheduleResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIUpdateRebalancingScheduleWithBodyWithResponse(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, contentType string, body io.Reader) (*ScheduledRebalancingAPIUpdateRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIUpdateRebalancingScheduleWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIUpdateRebalancingScheduleResponse(rsp)
}

func (c *ClientWithResponses) ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse(ctx context.Context, params *ScheduledRebalancingAPIUpdateRebalancingScheduleParams, body ScheduledRebalancingAPIUpdateRebalancingScheduleJSONRequestBody) (*ScheduledRebalancingAPIUpdateRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIUpdateRebalancingSchedule(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIUpdateRebalancingScheduleResponse(rsp)
}

// ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse request returning *ScheduledRebalancingAPIDeleteRebalancingScheduleResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse(ctx context.Context, id string) (*ScheduledRebalancingAPIDeleteRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIDeleteRebalancingSchedule(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIDeleteRebalancingScheduleResponse(rsp)
}

// ScheduledRebalancingAPIGetRebalancingScheduleWithResponse request returning *ScheduledRebalancingAPIGetRebalancingScheduleResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIGetRebalancingScheduleWithResponse(ctx context.Context, id string) (*ScheduledRebalancingAPIGetRebalancingScheduleResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIGetRebalancingSchedule(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIGetRebalancingScheduleResponse(rsp)
}

// CommitmentsAPIGetCommitmentsAssignmentsWithResponse request returning *CommitmentsAPIGetCommitmentsAssignmentsResponse
func (c *ClientWithResponses) CommitmentsAPIGetCommitmentsAssignmentsWithResponse(ctx context.Context) (*CommitmentsAPIGetCommitmentsAssignmentsResponse, error) {
	rsp, err := c.CommitmentsAPIGetCommitmentsAssignments(ctx)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIGetCommitmentsAssignmentsResponse(rsp)
}

// CommitmentsAPICreateCommitmentAssignmentWithResponse request returning *CommitmentsAPICreateCommitmentAssignmentResponse
func (c *ClientWithResponses) CommitmentsAPICreateCommitmentAssignmentWithResponse(ctx context.Context, params *CommitmentsAPICreateCommitmentAssignmentParams) (*CommitmentsAPICreateCommitmentAssignmentResponse, error) {
	rsp, err := c.CommitmentsAPICreateCommitmentAssignment(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPICreateCommitmentAssignmentResponse(rsp)
}

// CommitmentsAPIDeleteCommitmentAssignmentWithResponse request returning *CommitmentsAPIDeleteCommitmentAssignmentResponse
func (c *ClientWithResponses) CommitmentsAPIDeleteCommitmentAssignmentWithResponse(ctx context.Context, assignmentId string) (*CommitmentsAPIDeleteCommitmentAssignmentResponse, error) {
	rsp, err := c.CommitmentsAPIDeleteCommitmentAssignment(ctx, assignmentId)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIDeleteCommitmentAssignmentResponse(rsp)
}

// CommitmentsAPIGetCommitmentsWithResponse request returning *CommitmentsAPIGetCommitmentsResponse
func (c *ClientWithResponses) CommitmentsAPIGetCommitmentsWithResponse(ctx context.Context, params *CommitmentsAPIGetCommitmentsParams) (*CommitmentsAPIGetCommitmentsResponse, error) {
	rsp, err := c.CommitmentsAPIGetCommitments(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIGetCommitmentsResponse(rsp)
}

// CommitmentsAPIImportAzureReservationsWithBodyWithResponse request with arbitrary body returning *CommitmentsAPIImportAzureReservationsResponse
func (c *ClientWithResponses) CommitmentsAPIImportAzureReservationsWithBodyWithResponse(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, contentType string, body io.Reader) (*CommitmentsAPIImportAzureReservationsResponse, error) {
	rsp, err := c.CommitmentsAPIImportAzureReservationsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIImportAzureReservationsResponse(rsp)
}

func (c *ClientWithResponses) CommitmentsAPIImportAzureReservationsWithResponse(ctx context.Context, params *CommitmentsAPIImportAzureReservationsParams, body CommitmentsAPIImportAzureReservationsJSONRequestBody) (*CommitmentsAPIImportAzureReservationsResponse, error) {
	rsp, err := c.CommitmentsAPIImportAzureReservations(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIImportAzureReservationsResponse(rsp)
}

// CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse request with arbitrary body returning *CommitmentsAPIImportGCPCommitmentsResponse
func (c *ClientWithResponses) CommitmentsAPIImportGCPCommitmentsWithBodyWithResponse(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, contentType string, body io.Reader) (*CommitmentsAPIImportGCPCommitmentsResponse, error) {
	rsp, err := c.CommitmentsAPIImportGCPCommitmentsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIImportGCPCommitmentsResponse(rsp)
}

func (c *ClientWithResponses) CommitmentsAPIImportGCPCommitmentsWithResponse(ctx context.Context, params *CommitmentsAPIImportGCPCommitmentsParams, body CommitmentsAPIImportGCPCommitmentsJSONRequestBody) (*CommitmentsAPIImportGCPCommitmentsResponse, error) {
	rsp, err := c.CommitmentsAPIImportGCPCommitments(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIImportGCPCommitmentsResponse(rsp)
}

// CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse request returning *CommitmentsAPIGetGCPCommitmentsImportScriptResponse
func (c *ClientWithResponses) CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse(ctx context.Context, params *CommitmentsAPIGetGCPCommitmentsImportScriptParams) (*CommitmentsAPIGetGCPCommitmentsImportScriptResponse, error) {
	rsp, err := c.CommitmentsAPIGetGCPCommitmentsImportScript(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIGetGCPCommitmentsImportScriptResponse(rsp)
}

// CommitmentsAPIDeleteCommitmentWithResponse request returning *CommitmentsAPIDeleteCommitmentResponse
func (c *ClientWithResponses) CommitmentsAPIDeleteCommitmentWithResponse(ctx context.Context, commitmentId string) (*CommitmentsAPIDeleteCommitmentResponse, error) {
	rsp, err := c.CommitmentsAPIDeleteCommitment(ctx, commitmentId)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIDeleteCommitmentResponse(rsp)
}

// CommitmentsAPIUpdateCommitmentWithBodyWithResponse request with arbitrary body returning *CommitmentsAPIUpdateCommitmentResponse
func (c *ClientWithResponses) CommitmentsAPIUpdateCommitmentWithBodyWithResponse(ctx context.Context, commitmentId string, contentType string, body io.Reader) (*CommitmentsAPIUpdateCommitmentResponse, error) {
	rsp, err := c.CommitmentsAPIUpdateCommitmentWithBody(ctx, commitmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIUpdateCommitmentResponse(rsp)
}

func (c *ClientWithResponses) CommitmentsAPIUpdateCommitmentWithResponse(ctx context.Context, commitmentId string, body CommitmentsAPIUpdateCommitmentJSONRequestBody) (*CommitmentsAPIUpdateCommitmentResponse, error) {
	rsp, err := c.CommitmentsAPIUpdateCommitment(ctx, commitmentId, body)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIUpdateCommitmentResponse(rsp)
}

// CommitmentsAPIGetCommitmentAssignmentsWithResponse request returning *CommitmentsAPIGetCommitmentAssignmentsResponse
func (c *ClientWithResponses) CommitmentsAPIGetCommitmentAssignmentsWithResponse(ctx context.Context, commitmentId string) (*CommitmentsAPIGetCommitmentAssignmentsResponse, error) {
	rsp, err := c.CommitmentsAPIGetCommitmentAssignments(ctx, commitmentId)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIGetCommitmentAssignmentsResponse(rsp)
}

// CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse request with arbitrary body returning *CommitmentsAPIReplaceCommitmentAssignmentsResponse
func (c *ClientWithResponses) CommitmentsAPIReplaceCommitmentAssignmentsWithBodyWithResponse(ctx context.Context, commitmentId string, contentType string, body io.Reader) (*CommitmentsAPIReplaceCommitmentAssignmentsResponse, error) {
	rsp, err := c.CommitmentsAPIReplaceCommitmentAssignmentsWithBody(ctx, commitmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIReplaceCommitmentAssignmentsResponse(rsp)
}

func (c *ClientWithResponses) CommitmentsAPIReplaceCommitmentAssignmentsWithResponse(ctx context.Context, commitmentId string, body CommitmentsAPIReplaceCommitmentAssignmentsJSONRequestBody) (*CommitmentsAPIReplaceCommitmentAssignmentsResponse, error) {
	rsp, err := c.CommitmentsAPIReplaceCommitmentAssignments(ctx, commitmentId, body)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIReplaceCommitmentAssignmentsResponse(rsp)
}

// CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse request returning *CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse
func (c *ClientWithResponses) CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse(ctx context.Context) (*CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse, error) {
	rsp, err := c.CommitmentsAPIGetGCPCommitmentsScriptTemplate(ctx)
	if err != nil {
		return nil, err
	}
	return ParseCommitmentsAPIGetGCPCommitmentsScriptTemplateResponse(rsp)
}

// ExternalClusterAPIGetCleanupScriptTemplateWithResponse request returning *ExternalClusterAPIGetCleanupScriptTemplateResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCleanupScriptTemplateWithResponse(ctx context.Context, provider string) (*ExternalClusterAPIGetCleanupScriptTemplateResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCleanupScriptTemplate(ctx, provider)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCleanupScriptTemplateResponse(rsp)
}

// ExternalClusterAPIGetCredentialsScriptTemplateWithResponse request returning *ExternalClusterAPIGetCredentialsScriptTemplateResponse
func (c *ClientWithResponses) ExternalClusterAPIGetCredentialsScriptTemplateWithResponse(ctx context.Context, provider string, params *ExternalClusterAPIGetCredentialsScriptTemplateParams) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error) {
	rsp, err := c.ExternalClusterAPIGetCredentialsScriptTemplate(ctx, provider, params)
	if err != nil {
		return nil, err
	}
	return ParseExternalClusterAPIGetCredentialsScriptTemplateResponse(rsp)
}

// SSOAPIListSSOConnectionsWithResponse request returning *SSOAPIListSSOConnectionsResponse
func (c *ClientWithResponses) SSOAPIListSSOConnectionsWithResponse(ctx context.Context) (*SSOAPIListSSOConnectionsResponse, error) {
	rsp, err := c.SSOAPIListSSOConnections(ctx)
	if err != nil {
		return nil, err
	}
	return ParseSSOAPIListSSOConnectionsResponse(rsp)
}

// SSOAPICreateSSOConnectionWithBodyWithResponse request with arbitrary body returning *SSOAPICreateSSOConnectionResponse
func (c *ClientWithResponses) SSOAPICreateSSOConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*SSOAPICreateSSOConnectionResponse, error) {
	rsp, err := c.SSOAPICreateSSOConnectionWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSSOAPICreateSSOConnectionResponse(rsp)
}

func (c *ClientWithResponses) SSOAPICreateSSOConnectionWithResponse(ctx context.Context, body SSOAPICreateSSOConnectionJSONRequestBody) (*SSOAPICreateSSOConnectionResponse, error) {
	rsp, err := c.SSOAPICreateSSOConnection(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseSSOAPICreateSSOConnectionResponse(rsp)
}

// SSOAPIDeleteSSOConnectionWithResponse request returning *SSOAPIDeleteSSOConnectionResponse
func (c *ClientWithResponses) SSOAPIDeleteSSOConnectionWithResponse(ctx context.Context, id string) (*SSOAPIDeleteSSOConnectionResponse, error) {
	rsp, err := c.SSOAPIDeleteSSOConnection(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseSSOAPIDeleteSSOConnectionResponse(rsp)
}

// SSOAPIGetSSOConnectionWithResponse request returning *SSOAPIGetSSOConnectionResponse
func (c *ClientWithResponses) SSOAPIGetSSOConnectionWithResponse(ctx context.Context, id string) (*SSOAPIGetSSOConnectionResponse, error) {
	rsp, err := c.SSOAPIGetSSOConnection(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseSSOAPIGetSSOConnectionResponse(rsp)
}

// SSOAPIUpdateSSOConnectionWithBodyWithResponse request with arbitrary body returning *SSOAPIUpdateSSOConnectionResponse
func (c *ClientWithResponses) SSOAPIUpdateSSOConnectionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*SSOAPIUpdateSSOConnectionResponse, error) {
	rsp, err := c.SSOAPIUpdateSSOConnectionWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSSOAPIUpdateSSOConnectionResponse(rsp)
}

func (c *ClientWithResponses) SSOAPIUpdateSSOConnectionWithResponse(ctx context.Context, id string, body SSOAPIUpdateSSOConnectionJSONRequestBody) (*SSOAPIUpdateSSOConnectionResponse, error) {
	rsp, err := c.SSOAPIUpdateSSOConnection(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseSSOAPIUpdateSSOConnectionResponse(rsp)
}

// ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse request returning *ScheduledRebalancingAPIListAvailableRebalancingTZResponse
func (c *ClientWithResponses) ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse(ctx context.Context) (*ScheduledRebalancingAPIListAvailableRebalancingTZResponse, error) {
	rsp, err := c.ScheduledRebalancingAPIListAvailableRebalancingTZ(ctx)
	if err != nil {
		return nil, err
	}
	return ParseScheduledRebalancingAPIListAvailableRebalancingTZResponse(rsp)
}

// WorkloadOptimizationAPIGetAgentStatusWithResponse request returning *WorkloadOptimizationAPIGetAgentStatusResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIGetAgentStatusWithResponse(ctx context.Context, clusterId string) (*WorkloadOptimizationAPIGetAgentStatusResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIGetAgentStatus(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIGetAgentStatusResponse(rsp)
}

// WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse request returning *WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse(ctx context.Context, clusterId string) (*WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIListWorkloadScalingPolicies(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIListWorkloadScalingPoliciesResponse(rsp)
}

// WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse request with arbitrary body returning *WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse
func (c *ClientWithResponses) WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader) (*WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse, error) {
	rsp, err := c.WorkloadOptimizationAPICreateWorkloadScalingPolicyWithBody(ctx, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPICreateWorkloadScalingPolicyResponse(rsp)
}

func (c *ClientWithResponses) WorkloadOptimizationAPICreateWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, body WorkloadOptimizationAPICreateWorkloadScalingPolicyJSONRequestBody) (*WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse, error) {
	rsp, err := c.WorkloadOptimizationAPICreateWorkloadScalingPolicy(ctx, clusterId, body)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPICreateWorkloadScalingPolicyResponse(rsp)
}

// WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse request returning *WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, policyId string) (*WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIDeleteWorkloadScalingPolicy(ctx, clusterId, policyId)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse(rsp)
}

// WorkloadOptimizationAPIGetWorkloadScalingPolicyWithResponse request returning *WorkloadOptimizationAPIGetWorkloadScalingPolicyResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIGetWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, policyId string) (*WorkloadOptimizationAPIGetWorkloadScalingPolicyResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIGetWorkloadScalingPolicy(ctx, clusterId, policyId)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIGetWorkloadScalingPolicyResponse(rsp)
}

// WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse request with arbitrary body returning *WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBodyWithResponse(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader) (*WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithBody(ctx, clusterId, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse(rsp)
}

func (c *ClientWithResponses) WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithResponse(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIUpdateWorkloadScalingPolicyJSONRequestBody) (*WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIUpdateWorkloadScalingPolicy(ctx, clusterId, policyId, body)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse(rsp)
}

// WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse request with arbitrary body returning *WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBodyWithResponse(ctx context.Context, clusterId string, policyId string, contentType string, body io.Reader) (*WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithBody(ctx, clusterId, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse(rsp)
}

func (c *ClientWithResponses) WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithResponse(ctx context.Context, clusterId string, policyId string, body WorkloadOptimizationAPIAssignScalingPolicyWorkloadsJSONRequestBody) (*WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIAssignScalingPolicyWorkloads(ctx, clusterId, policyId, body)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse(rsp)
}

// WorkloadOptimizationAPIListWorkloadEventsWithResponse request returning *WorkloadOptimizationAPIListWorkloadEventsResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIListWorkloadEventsWithResponse(ctx context.Context, clusterId string, params *WorkloadOptimizationAPIListWorkloadEventsParams) (*WorkloadOptimizationAPIListWorkloadEventsResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIListWorkloadEvents(ctx, clusterId, params)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIListWorkloadEventsResponse(rsp)
}

// WorkloadOptimizationAPIListWorkloadsWithResponse request returning *WorkloadOptimizationAPIListWorkloadsResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIListWorkloadsWithResponse(ctx context.Context, clusterId string) (*WorkloadOptimizationAPIListWorkloadsResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIListWorkloads(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIListWorkloadsResponse(rsp)
}

// WorkloadOptimizationAPIGetWorkloadsSummaryWithResponse request returning *WorkloadOptimizationAPIGetWorkloadsSummaryResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIGetWorkloadsSummaryWithResponse(ctx context.Context, clusterId string) (*WorkloadOptimizationAPIGetWorkloadsSummaryResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIGetWorkloadsSummary(ctx, clusterId)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIGetWorkloadsSummaryResponse(rsp)
}

// WorkloadOptimizationAPIGetWorkloadWithResponse request returning *WorkloadOptimizationAPIGetWorkloadResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIGetWorkloadWithResponse(ctx context.Context, clusterId string, workloadId string, params *WorkloadOptimizationAPIGetWorkloadParams) (*WorkloadOptimizationAPIGetWorkloadResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIGetWorkload(ctx, clusterId, workloadId, params)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIGetWorkloadResponse(rsp)
}

// WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse request with arbitrary body returning *WorkloadOptimizationAPIUpdateWorkloadResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIUpdateWorkloadWithBodyWithResponse(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader) (*WorkloadOptimizationAPIUpdateWorkloadResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIUpdateWorkloadWithBody(ctx, clusterId, workloadId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIUpdateWorkloadResponse(rsp)
}

func (c *ClientWithResponses) WorkloadOptimizationAPIUpdateWorkloadWithResponse(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadJSONRequestBody) (*WorkloadOptimizationAPIUpdateWorkloadResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIUpdateWorkload(ctx, clusterId, workloadId, body)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIUpdateWorkloadResponse(rsp)
}

// WorkloadOptimizationAPIGetInstallCmdWithResponse request returning *WorkloadOptimizationAPIGetInstallCmdResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIGetInstallCmdWithResponse(ctx context.Context, params *WorkloadOptimizationAPIGetInstallCmdParams) (*WorkloadOptimizationAPIGetInstallCmdResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIGetInstallCmd(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIGetInstallCmdResponse(rsp)
}

// WorkloadOptimizationAPIGetInstallScriptWithResponse request returning *WorkloadOptimizationAPIGetInstallScriptResponse
func (c *ClientWithResponses) WorkloadOptimizationAPIGetInstallScriptWithResponse(ctx context.Context) (*WorkloadOptimizationAPIGetInstallScriptResponse, error) {
	rsp, err := c.WorkloadOptimizationAPIGetInstallScript(ctx)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIGetInstallScriptResponse(rsp)
}

// WorkloadOptimizationAPIUpdateWorkloadV2WithBodyWithResponse request with arbitrary body returning *WorkloadOptimizationAPIUpdateWorkloadV2Response
func (c *ClientWithResponses) WorkloadOptimizationAPIUpdateWorkloadV2WithBodyWithResponse(ctx context.Context, clusterId string, workloadId string, contentType string, body io.Reader) (*WorkloadOptimizationAPIUpdateWorkloadV2Response, error) {
	rsp, err := c.WorkloadOptimizationAPIUpdateWorkloadV2WithBody(ctx, clusterId, workloadId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIUpdateWorkloadV2Response(rsp)
}

func (c *ClientWithResponses) WorkloadOptimizationAPIUpdateWorkloadV2WithResponse(ctx context.Context, clusterId string, workloadId string, body WorkloadOptimizationAPIUpdateWorkloadV2JSONRequestBody) (*WorkloadOptimizationAPIUpdateWorkloadV2Response, error) {
	rsp, err := c.WorkloadOptimizationAPIUpdateWorkloadV2(ctx, clusterId, workloadId, body)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadOptimizationAPIUpdateWorkloadV2Response(rsp)
}

// ParseAuthTokenAPIListAuthTokensResponse parses an HTTP response from a AuthTokenAPIListAuthTokensWithResponse call
func ParseAuthTokenAPIListAuthTokensResponse(rsp *http.Response) (*AuthTokenAPIListAuthTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPIListAuthTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1ListAuthTokensResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenAPICreateAuthTokenResponse parses an HTTP response from a AuthTokenAPICreateAuthTokenWithResponse call
func ParseAuthTokenAPICreateAuthTokenResponse(rsp *http.Response) (*AuthTokenAPICreateAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPICreateAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenAPIDeleteAuthTokenResponse parses an HTTP response from a AuthTokenAPIDeleteAuthTokenWithResponse call
func ParseAuthTokenAPIDeleteAuthTokenResponse(rsp *http.Response) (*AuthTokenAPIDeleteAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPIDeleteAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1DeleteAuthTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenAPIGetAuthTokenResponse parses an HTTP response from a AuthTokenAPIGetAuthTokenWithResponse call
func ParseAuthTokenAPIGetAuthTokenResponse(rsp *http.Response) (*AuthTokenAPIGetAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPIGetAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthTokenAPIUpdateAuthTokenResponse parses an HTTP response from a AuthTokenAPIUpdateAuthTokenWithResponse call
func ParseAuthTokenAPIUpdateAuthTokenResponse(rsp *http.Response) (*AuthTokenAPIUpdateAuthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenAPIUpdateAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiAuthtokenV1beta1AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIListInvitationsResponse parses an HTTP response from a UsersAPIListInvitationsWithResponse call
func ParseUsersAPIListInvitationsResponse(rsp *http.Response) (*UsersAPIListInvitationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIListInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1ListInvitationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPICreateInvitationsResponse parses an HTTP response from a UsersAPICreateInvitationsWithResponse call
func ParseUsersAPICreateInvitationsResponse(rsp *http.Response) (*UsersAPICreateInvitationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPICreateInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1CreateInvitationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIDeleteInvitationResponse parses an HTTP response from a UsersAPIDeleteInvitationWithResponse call
func ParseUsersAPIDeleteInvitationResponse(rsp *http.Response) (*UsersAPIDeleteInvitationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIDeleteInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1DeleteInvitationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIClaimInvitationResponse parses an HTTP response from a UsersAPIClaimInvitationWithResponse call
func ParseUsersAPIClaimInvitationResponse(rsp *http.Response) (*UsersAPIClaimInvitationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIClaimInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1ClaimInvitationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEvictorAPIGetAdvancedConfigResponse parses an HTTP response from a EvictorAPIGetAdvancedConfigWithResponse call
func ParseEvictorAPIGetAdvancedConfigResponse(rsp *http.Response) (*EvictorAPIGetAdvancedConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EvictorAPIGetAdvancedConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiEvictorV1AdvancedConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEvictorAPIUpsertAdvancedConfigResponse parses an HTTP response from a EvictorAPIUpsertAdvancedConfigWithResponse call
func ParseEvictorAPIUpsertAdvancedConfigResponse(rsp *http.Response) (*EvictorAPIUpsertAdvancedConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EvictorAPIUpsertAdvancedConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiEvictorV1AdvancedConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPIFilterInstanceTypesResponse parses an HTTP response from a NodeTemplatesAPIFilterInstanceTypesWithResponse call
func ParseNodeTemplatesAPIFilterInstanceTypesResponse(rsp *http.Response) (*NodeTemplatesAPIFilterInstanceTypesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPIFilterInstanceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1FilterInstanceTypesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPIGenerateNodeTemplatesResponse parses an HTTP response from a NodeTemplatesAPIGenerateNodeTemplatesWithResponse call
func ParseNodeTemplatesAPIGenerateNodeTemplatesResponse(rsp *http.Response) (*NodeTemplatesAPIGenerateNodeTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPIGenerateNodeTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1GenerateNodeTemplatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIListConfigurationsResponse parses an HTTP response from a NodeConfigurationAPIListConfigurationsWithResponse call
func ParseNodeConfigurationAPIListConfigurationsResponse(rsp *http.Response) (*NodeConfigurationAPIListConfigurationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIListConfigurationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1ListConfigurationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPICreateConfigurationResponse parses an HTTP response from a NodeConfigurationAPICreateConfigurationWithResponse call
func ParseNodeConfigurationAPICreateConfigurationResponse(rsp *http.Response) (*NodeConfigurationAPICreateConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPICreateConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1NodeConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIGetSuggestedConfigurationResponse parses an HTTP response from a NodeConfigurationAPIGetSuggestedConfigurationWithResponse call
func ParseNodeConfigurationAPIGetSuggestedConfigurationResponse(rsp *http.Response) (*NodeConfigurationAPIGetSuggestedConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIGetSuggestedConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1GetSuggestedConfigurationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIDeleteConfigurationResponse parses an HTTP response from a NodeConfigurationAPIDeleteConfigurationWithResponse call
func ParseNodeConfigurationAPIDeleteConfigurationResponse(rsp *http.Response) (*NodeConfigurationAPIDeleteConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIDeleteConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1DeleteConfigurationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIGetConfigurationResponse parses an HTTP response from a NodeConfigurationAPIGetConfigurationWithResponse call
func ParseNodeConfigurationAPIGetConfigurationResponse(rsp *http.Response) (*NodeConfigurationAPIGetConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIGetConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1NodeConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIUpdateConfigurationResponse parses an HTTP response from a NodeConfigurationAPIUpdateConfigurationWithResponse call
func ParseNodeConfigurationAPIUpdateConfigurationResponse(rsp *http.Response) (*NodeConfigurationAPIUpdateConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIUpdateConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1NodeConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPISetDefaultResponse parses an HTTP response from a NodeConfigurationAPISetDefaultWithResponse call
func ParseNodeConfigurationAPISetDefaultResponse(rsp *http.Response) (*NodeConfigurationAPISetDefaultResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPISetDefaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1NodeConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePoliciesAPIGetClusterNodeConstraintsResponse parses an HTTP response from a PoliciesAPIGetClusterNodeConstraintsWithResponse call
func ParsePoliciesAPIGetClusterNodeConstraintsResponse(rsp *http.Response) (*PoliciesAPIGetClusterNodeConstraintsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PoliciesAPIGetClusterNodeConstraintsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoliciesV1GetClusterNodeConstraintsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPIListNodeTemplatesResponse parses an HTTP response from a NodeTemplatesAPIListNodeTemplatesWithResponse call
func ParseNodeTemplatesAPIListNodeTemplatesResponse(rsp *http.Response) (*NodeTemplatesAPIListNodeTemplatesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPIListNodeTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1ListNodeTemplatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPICreateNodeTemplateResponse parses an HTTP response from a NodeTemplatesAPICreateNodeTemplateWithResponse call
func ParseNodeTemplatesAPICreateNodeTemplateResponse(rsp *http.Response) (*NodeTemplatesAPICreateNodeTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPICreateNodeTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1NodeTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPIDeleteNodeTemplateResponse parses an HTTP response from a NodeTemplatesAPIDeleteNodeTemplateWithResponse call
func ParseNodeTemplatesAPIDeleteNodeTemplateResponse(rsp *http.Response) (*NodeTemplatesAPIDeleteNodeTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPIDeleteNodeTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1DeleteNodeTemplateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeTemplatesAPIUpdateNodeTemplateResponse parses an HTTP response from a NodeTemplatesAPIUpdateNodeTemplateWithResponse call
func ParseNodeTemplatesAPIUpdateNodeTemplateResponse(rsp *http.Response) (*NodeTemplatesAPIUpdateNodeTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeTemplatesAPIUpdateNodeTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodetemplatesV1NodeTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePoliciesAPIGetClusterPoliciesResponse parses an HTTP response from a PoliciesAPIGetClusterPoliciesWithResponse call
func ParsePoliciesAPIGetClusterPoliciesResponse(rsp *http.Response) (*PoliciesAPIGetClusterPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PoliciesAPIGetClusterPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoliciesV1Policies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePoliciesAPIUpsertClusterPoliciesResponse parses an HTTP response from a PoliciesAPIUpsertClusterPoliciesWithResponse call
func ParsePoliciesAPIUpsertClusterPoliciesResponse(rsp *http.Response) (*PoliciesAPIUpsertClusterPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PoliciesAPIUpsertClusterPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PoliciesV1Policies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIListRebalancingJobsResponse parses an HTTP response from a ScheduledRebalancingAPIListRebalancingJobsWithResponse call
func ParseScheduledRebalancingAPIListRebalancingJobsResponse(rsp *http.Response) (*ScheduledRebalancingAPIListRebalancingJobsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIListRebalancingJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1ListRebalancingJobsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPICreateRebalancingJobResponse parses an HTTP response from a ScheduledRebalancingAPICreateRebalancingJobWithResponse call
func ParseScheduledRebalancingAPICreateRebalancingJobResponse(rsp *http.Response) (*ScheduledRebalancingAPICreateRebalancingJobResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPICreateRebalancingJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1RebalancingJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIDeleteRebalancingJobResponse parses an HTTP response from a ScheduledRebalancingAPIDeleteRebalancingJobWithResponse call
func ParseScheduledRebalancingAPIDeleteRebalancingJobResponse(rsp *http.Response) (*ScheduledRebalancingAPIDeleteRebalancingJobResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIDeleteRebalancingJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1DeleteRebalancingJobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIGetRebalancingJobResponse parses an HTTP response from a ScheduledRebalancingAPIGetRebalancingJobWithResponse call
func ParseScheduledRebalancingAPIGetRebalancingJobResponse(rsp *http.Response) (*ScheduledRebalancingAPIGetRebalancingJobResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIGetRebalancingJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1RebalancingJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIUpdateRebalancingJobResponse parses an HTTP response from a ScheduledRebalancingAPIUpdateRebalancingJobWithResponse call
func ParseScheduledRebalancingAPIUpdateRebalancingJobResponse(rsp *http.Response) (*ScheduledRebalancingAPIUpdateRebalancingJobResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIUpdateRebalancingJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1RebalancingJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIPreviewRebalancingScheduleResponse parses an HTTP response from a ScheduledRebalancingAPIPreviewRebalancingScheduleWithResponse call
func ParseScheduledRebalancingAPIPreviewRebalancingScheduleResponse(rsp *http.Response) (*ScheduledRebalancingAPIPreviewRebalancingScheduleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIPreviewRebalancingScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1PreviewRebalancingScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIListClustersResponse parses an HTTP response from a ExternalClusterAPIListClustersWithResponse call
func ParseExternalClusterAPIListClustersResponse(rsp *http.Response) (*ExternalClusterAPIListClustersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIListClustersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1ListClustersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIRegisterClusterResponse parses an HTTP response from a ExternalClusterAPIRegisterClusterWithResponse call
func ParseExternalClusterAPIRegisterClusterResponse(rsp *http.Response) (*ExternalClusterAPIRegisterClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIRegisterClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetListNodesFiltersResponse parses an HTTP response from a ExternalClusterAPIGetListNodesFiltersWithResponse call
func ParseExternalClusterAPIGetListNodesFiltersResponse(rsp *http.Response) (*ExternalClusterAPIGetListNodesFiltersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetListNodesFiltersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetListNodesFiltersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOperationsAPIGetOperationResponse parses an HTTP response from a OperationsAPIGetOperationWithResponse call
func ParseOperationsAPIGetOperationResponse(rsp *http.Response) (*OperationsAPIGetOperationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &OperationsAPIGetOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiOperationsV1beta1Operation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDeleteClusterResponse parses an HTTP response from a ExternalClusterAPIDeleteClusterWithResponse call
func ParseExternalClusterAPIDeleteClusterResponse(rsp *http.Response) (*ExternalClusterAPIDeleteClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDeleteClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExternalClusterAPIGetClusterResponse parses an HTTP response from a ExternalClusterAPIGetClusterWithResponse call
func ParseExternalClusterAPIGetClusterResponse(rsp *http.Response) (*ExternalClusterAPIGetClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIUpdateClusterResponse parses an HTTP response from a ExternalClusterAPIUpdateClusterWithResponse call
func ParseExternalClusterAPIUpdateClusterResponse(rsp *http.Response) (*ExternalClusterAPIUpdateClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIUpdateClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDeleteAssumeRolePrincipalResponse parses an HTTP response from a ExternalClusterAPIDeleteAssumeRolePrincipalWithResponse call
func ParseExternalClusterAPIDeleteAssumeRolePrincipalResponse(rsp *http.Response) (*ExternalClusterAPIDeleteAssumeRolePrincipalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDeleteAssumeRolePrincipalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DeleteAssumeRolePrincipalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetAssumeRolePrincipalResponse parses an HTTP response from a ExternalClusterAPIGetAssumeRolePrincipalWithResponse call
func ParseExternalClusterAPIGetAssumeRolePrincipalResponse(rsp *http.Response) (*ExternalClusterAPIGetAssumeRolePrincipalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetAssumeRolePrincipalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetAssumeRolePrincipalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPICreateAssumeRolePrincipalResponse parses an HTTP response from a ExternalClusterAPICreateAssumeRolePrincipalWithResponse call
func ParseExternalClusterAPICreateAssumeRolePrincipalResponse(rsp *http.Response) (*ExternalClusterAPICreateAssumeRolePrincipalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPICreateAssumeRolePrincipalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1CreateAssumeRolePrincipalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetAssumeRoleUserResponse parses an HTTP response from a ExternalClusterAPIGetAssumeRoleUserWithResponse call
func ParseExternalClusterAPIGetAssumeRoleUserResponse(rsp *http.Response) (*ExternalClusterAPIGetAssumeRoleUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetAssumeRoleUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetAssumeRoleUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetCleanupScriptResponse parses an HTTP response from a ExternalClusterAPIGetCleanupScriptWithResponse call
func ParseExternalClusterAPIGetCleanupScriptResponse(rsp *http.Response) (*ExternalClusterAPIGetCleanupScriptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCleanupScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetCleanupScriptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetCredentialsScriptResponse parses an HTTP response from a ExternalClusterAPIGetCredentialsScriptWithResponse call
func ParseExternalClusterAPIGetCredentialsScriptResponse(rsp *http.Response) (*ExternalClusterAPIGetCredentialsScriptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCredentialsScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1GetCredentialsScriptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDisconnectClusterResponse parses an HTTP response from a ExternalClusterAPIDisconnectClusterWithResponse call
func ParseExternalClusterAPIDisconnectClusterResponse(rsp *http.Response) (*ExternalClusterAPIDisconnectClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDisconnectClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Cluster
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIHandleCloudEventResponse parses an HTTP response from a ExternalClusterAPIHandleCloudEventWithResponse call
func ParseExternalClusterAPIHandleCloudEventResponse(rsp *http.Response) (*ExternalClusterAPIHandleCloudEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIHandleCloudEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1HandleCloudEventResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIListNodesResponse parses an HTTP response from a ExternalClusterAPIListNodesWithResponse call
func ParseExternalClusterAPIListNodesResponse(rsp *http.Response) (*ExternalClusterAPIListNodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIListNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1ListNodesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIAddNodeResponse parses an HTTP response from a ExternalClusterAPIAddNodeWithResponse call
func ParseExternalClusterAPIAddNodeResponse(rsp *http.Response) (*ExternalClusterAPIAddNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIAddNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1AddNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDeleteNodeResponse parses an HTTP response from a ExternalClusterAPIDeleteNodeWithResponse call
func ParseExternalClusterAPIDeleteNodeResponse(rsp *http.Response) (*ExternalClusterAPIDeleteNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDeleteNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DeleteNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIGetNodeResponse parses an HTTP response from a ExternalClusterAPIGetNodeWithResponse call
func ParseExternalClusterAPIGetNodeResponse(rsp *http.Response) (*ExternalClusterAPIGetNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIDrainNodeResponse parses an HTTP response from a ExternalClusterAPIDrainNodeWithResponse call
func ParseExternalClusterAPIDrainNodeResponse(rsp *http.Response) (*ExternalClusterAPIDrainNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIDrainNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1DrainNodeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIReconcileClusterResponse parses an HTTP response from a ExternalClusterAPIReconcileClusterWithResponse call
func ParseExternalClusterAPIReconcileClusterResponse(rsp *http.Response) (*ExternalClusterAPIReconcileClusterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIReconcileClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1ReconcileClusterResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPIUpdateClusterTagsResponse parses an HTTP response from a ExternalClusterAPIUpdateClusterTagsWithResponse call
func ParseExternalClusterAPIUpdateClusterTagsResponse(rsp *http.Response) (*ExternalClusterAPIUpdateClusterTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIUpdateClusterTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1UpdateClusterTagsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseExternalClusterAPICreateClusterTokenResponse parses an HTTP response from a ExternalClusterAPICreateClusterTokenWithResponse call
func ParseExternalClusterAPICreateClusterTokenResponse(rsp *http.Response) (*ExternalClusterAPICreateClusterTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPICreateClusterTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExternalclusterV1CreateClusterTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseNodeConfigurationAPIListMaxPodsPresetsResponse parses an HTTP response from a NodeConfigurationAPIListMaxPodsPresetsWithResponse call
func ParseNodeConfigurationAPIListMaxPodsPresetsResponse(rsp *http.Response) (*NodeConfigurationAPIListMaxPodsPresetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &NodeConfigurationAPIListMaxPodsPresetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodeconfigV1ListMaxPodsPresetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPICurrentUserProfileResponse parses an HTTP response from a UsersAPICurrentUserProfileWithResponse call
func ParseUsersAPICurrentUserProfileResponse(rsp *http.Response) (*UsersAPICurrentUserProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPICurrentUserProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1CurrentUserProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIUpdateCurrentUserProfileResponse parses an HTTP response from a UsersAPIUpdateCurrentUserProfileWithResponse call
func ParseUsersAPIUpdateCurrentUserProfileResponse(rsp *http.Response) (*UsersAPIUpdateCurrentUserProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIUpdateCurrentUserProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIListOrganizationsResponse parses an HTTP response from a UsersAPIListOrganizationsWithResponse call
func ParseUsersAPIListOrganizationsResponse(rsp *http.Response) (*UsersAPIListOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIListOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1ListOrganizationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPICreateOrganizationResponse parses an HTTP response from a UsersAPICreateOrganizationWithResponse call
func ParseUsersAPICreateOrganizationResponse(rsp *http.Response) (*UsersAPICreateOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPICreateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPIGetOrganizationReservationsBalanceResponse parses an HTTP response from a InventoryAPIGetOrganizationReservationsBalanceWithResponse call
func ParseInventoryAPIGetOrganizationReservationsBalanceResponse(rsp *http.Response) (*InventoryAPIGetOrganizationReservationsBalanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPIGetOrganizationReservationsBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetOrganizationReservationsBalanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPIGetOrganizationResourceUsageResponse parses an HTTP response from a InventoryAPIGetOrganizationResourceUsageWithResponse call
func ParseInventoryAPIGetOrganizationResourceUsageResponse(rsp *http.Response) (*InventoryAPIGetOrganizationResourceUsageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPIGetOrganizationResourceUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetOrganizationResourceUsageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIDeleteOrganizationResponse parses an HTTP response from a UsersAPIDeleteOrganizationWithResponse call
func ParseUsersAPIDeleteOrganizationResponse(rsp *http.Response) (*UsersAPIDeleteOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIDeleteOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1DeleteOrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIGetOrganizationResponse parses an HTTP response from a UsersAPIGetOrganizationWithResponse call
func ParseUsersAPIGetOrganizationResponse(rsp *http.Response) (*UsersAPIGetOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIGetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIEditOrganizationResponse parses an HTTP response from a UsersAPIEditOrganizationWithResponse call
func ParseUsersAPIEditOrganizationResponse(rsp *http.Response) (*UsersAPIEditOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIEditOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPISyncClusterResourcesResponse parses an HTTP response from a InventoryAPISyncClusterResourcesWithResponse call
func ParseInventoryAPISyncClusterResourcesResponse(rsp *http.Response) (*InventoryAPISyncClusterResourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPISyncClusterResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPIGetReservationsResponse parses an HTTP response from a InventoryAPIGetReservationsWithResponse call
func ParseInventoryAPIGetReservationsResponse(rsp *http.Response) (*InventoryAPIGetReservationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPIGetReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetReservationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPIAddReservationResponse parses an HTTP response from a InventoryAPIAddReservationWithResponse call
func ParseInventoryAPIAddReservationResponse(rsp *http.Response) (*InventoryAPIAddReservationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPIAddReservationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1AddReservationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPIGetReservationsBalanceResponse parses an HTTP response from a InventoryAPIGetReservationsBalanceWithResponse call
func ParseInventoryAPIGetReservationsBalanceResponse(rsp *http.Response) (*InventoryAPIGetReservationsBalanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPIGetReservationsBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetReservationsBalanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPIOverwriteReservationsResponse parses an HTTP response from a InventoryAPIOverwriteReservationsWithResponse call
func ParseInventoryAPIOverwriteReservationsResponse(rsp *http.Response) (*InventoryAPIOverwriteReservationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPIOverwriteReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1OverwriteReservationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInventoryAPIDeleteReservationResponse parses an HTTP response from a InventoryAPIDeleteReservationWithResponse call
func ParseInventoryAPIDeleteReservationResponse(rsp *http.Response) (*InventoryAPIDeleteReservationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InventoryAPIDeleteReservationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIListOrganizationUsersResponse parses an HTTP response from a UsersAPIListOrganizationUsersWithResponse call
func ParseUsersAPIListOrganizationUsersResponse(rsp *http.Response) (*UsersAPIListOrganizationUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIListOrganizationUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1ListOrganizationUsersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIAddUserToOrganizationResponse parses an HTTP response from a UsersAPIAddUserToOrganizationWithResponse call
func ParseUsersAPIAddUserToOrganizationResponse(rsp *http.Response) (*UsersAPIAddUserToOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIAddUserToOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1AddUserToOrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIRemoveUserFromOrganizationResponse parses an HTTP response from a UsersAPIRemoveUserFromOrganizationWithResponse call
func ParseUsersAPIRemoveUserFromOrganizationResponse(rsp *http.Response) (*UsersAPIRemoveUserFromOrganizationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIRemoveUserFromOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1RemoveUserFromOrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUsersAPIUpdateOrganizationUserResponse parses an HTTP response from a UsersAPIUpdateOrganizationUserWithResponse call
func ParseUsersAPIUpdateOrganizationUserResponse(rsp *http.Response) (*UsersAPIUpdateOrganizationUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UsersAPIUpdateOrganizationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiUsersV1beta1Membership
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIListRebalancingSchedulesResponse parses an HTTP response from a ScheduledRebalancingAPIListRebalancingSchedulesWithResponse call
func ParseScheduledRebalancingAPIListRebalancingSchedulesResponse(rsp *http.Response) (*ScheduledRebalancingAPIListRebalancingSchedulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIListRebalancingSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1ListRebalancingSchedulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPICreateRebalancingScheduleResponse parses an HTTP response from a ScheduledRebalancingAPICreateRebalancingScheduleWithResponse call
func ParseScheduledRebalancingAPICreateRebalancingScheduleResponse(rsp *http.Response) (*ScheduledRebalancingAPICreateRebalancingScheduleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPICreateRebalancingScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1RebalancingSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIUpdateRebalancingScheduleResponse parses an HTTP response from a ScheduledRebalancingAPIUpdateRebalancingScheduleWithResponse call
func ParseScheduledRebalancingAPIUpdateRebalancingScheduleResponse(rsp *http.Response) (*ScheduledRebalancingAPIUpdateRebalancingScheduleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIUpdateRebalancingScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1RebalancingSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIDeleteRebalancingScheduleResponse parses an HTTP response from a ScheduledRebalancingAPIDeleteRebalancingScheduleWithResponse call
func ParseScheduledRebalancingAPIDeleteRebalancingScheduleResponse(rsp *http.Response) (*ScheduledRebalancingAPIDeleteRebalancingScheduleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIDeleteRebalancingScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1DeleteRebalancingScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIGetRebalancingScheduleResponse parses an HTTP response from a ScheduledRebalancingAPIGetRebalancingScheduleWithResponse call
func ParseScheduledRebalancingAPIGetRebalancingScheduleResponse(rsp *http.Response) (*ScheduledRebalancingAPIGetRebalancingScheduleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIGetRebalancingScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1RebalancingSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIGetCommitmentsAssignmentsResponse parses an HTTP response from a CommitmentsAPIGetCommitmentsAssignmentsWithResponse call
func ParseCommitmentsAPIGetCommitmentsAssignmentsResponse(rsp *http.Response) (*CommitmentsAPIGetCommitmentsAssignmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIGetCommitmentsAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetCommitmentsAssignmentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPICreateCommitmentAssignmentResponse parses an HTTP response from a CommitmentsAPICreateCommitmentAssignmentWithResponse call
func ParseCommitmentsAPICreateCommitmentAssignmentResponse(rsp *http.Response) (*CommitmentsAPICreateCommitmentAssignmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPICreateCommitmentAssignmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIDeleteCommitmentAssignmentResponse parses an HTTP response from a CommitmentsAPIDeleteCommitmentAssignmentWithResponse call
func ParseCommitmentsAPIDeleteCommitmentAssignmentResponse(rsp *http.Response) (*CommitmentsAPIDeleteCommitmentAssignmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIDeleteCommitmentAssignmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIGetCommitmentsResponse parses an HTTP response from a CommitmentsAPIGetCommitmentsWithResponse call
func ParseCommitmentsAPIGetCommitmentsResponse(rsp *http.Response) (*CommitmentsAPIGetCommitmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIGetCommitmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetCommitmentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIImportAzureReservationsResponse parses an HTTP response from a CommitmentsAPIImportAzureReservationsWithResponse call
func ParseCommitmentsAPIImportAzureReservationsResponse(rsp *http.Response) (*CommitmentsAPIImportAzureReservationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIImportAzureReservationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIImportGCPCommitmentsResponse parses an HTTP response from a CommitmentsAPIImportGCPCommitmentsWithResponse call
func ParseCommitmentsAPIImportGCPCommitmentsResponse(rsp *http.Response) (*CommitmentsAPIImportGCPCommitmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIImportGCPCommitmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIGetGCPCommitmentsImportScriptResponse parses an HTTP response from a CommitmentsAPIGetGCPCommitmentsImportScriptWithResponse call
func ParseCommitmentsAPIGetGCPCommitmentsImportScriptResponse(rsp *http.Response) (*CommitmentsAPIGetGCPCommitmentsImportScriptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIGetGCPCommitmentsImportScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetGCPCommitmentsImportScriptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIDeleteCommitmentResponse parses an HTTP response from a CommitmentsAPIDeleteCommitmentWithResponse call
func ParseCommitmentsAPIDeleteCommitmentResponse(rsp *http.Response) (*CommitmentsAPIDeleteCommitmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIDeleteCommitmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIUpdateCommitmentResponse parses an HTTP response from a CommitmentsAPIUpdateCommitmentWithResponse call
func ParseCommitmentsAPIUpdateCommitmentResponse(rsp *http.Response) (*CommitmentsAPIUpdateCommitmentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIUpdateCommitmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1UpdateCommitmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIGetCommitmentAssignmentsResponse parses an HTTP response from a CommitmentsAPIGetCommitmentAssignmentsWithResponse call
func ParseCommitmentsAPIGetCommitmentAssignmentsResponse(rsp *http.Response) (*CommitmentsAPIGetCommitmentAssignmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIGetCommitmentAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1GetCommitmentAssignmentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIReplaceCommitmentAssignmentsResponse parses an HTTP response from a CommitmentsAPIReplaceCommitmentAssignmentsWithResponse call
func ParseCommitmentsAPIReplaceCommitmentAssignmentsResponse(rsp *http.Response) (*CommitmentsAPIReplaceCommitmentAssignmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIReplaceCommitmentAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiInventoryV1beta1ReplaceCommitmentAssignmentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCommitmentsAPIGetGCPCommitmentsScriptTemplateResponse parses an HTTP response from a CommitmentsAPIGetGCPCommitmentsScriptTemplateWithResponse call
func ParseCommitmentsAPIGetGCPCommitmentsScriptTemplateResponse(rsp *http.Response) (*CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CommitmentsAPIGetGCPCommitmentsScriptTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExternalClusterAPIGetCleanupScriptTemplateResponse parses an HTTP response from a ExternalClusterAPIGetCleanupScriptTemplateWithResponse call
func ParseExternalClusterAPIGetCleanupScriptTemplateResponse(rsp *http.Response) (*ExternalClusterAPIGetCleanupScriptTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCleanupScriptTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExternalClusterAPIGetCredentialsScriptTemplateResponse parses an HTTP response from a ExternalClusterAPIGetCredentialsScriptTemplateWithResponse call
func ParseExternalClusterAPIGetCredentialsScriptTemplateResponse(rsp *http.Response) (*ExternalClusterAPIGetCredentialsScriptTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ExternalClusterAPIGetCredentialsScriptTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSSOAPIListSSOConnectionsResponse parses an HTTP response from a SSOAPIListSSOConnectionsWithResponse call
func ParseSSOAPIListSSOConnectionsResponse(rsp *http.Response) (*SSOAPIListSSOConnectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SSOAPIListSSOConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiSsoV1beta1ListSSOConnectionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSSOAPICreateSSOConnectionResponse parses an HTTP response from a SSOAPICreateSSOConnectionWithResponse call
func ParseSSOAPICreateSSOConnectionResponse(rsp *http.Response) (*SSOAPICreateSSOConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SSOAPICreateSSOConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiSsoV1beta1SSOConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSSOAPIDeleteSSOConnectionResponse parses an HTTP response from a SSOAPIDeleteSSOConnectionWithResponse call
func ParseSSOAPIDeleteSSOConnectionResponse(rsp *http.Response) (*SSOAPIDeleteSSOConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SSOAPIDeleteSSOConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiSsoV1beta1DeleteSSOConnectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSSOAPIGetSSOConnectionResponse parses an HTTP response from a SSOAPIGetSSOConnectionWithResponse call
func ParseSSOAPIGetSSOConnectionResponse(rsp *http.Response) (*SSOAPIGetSSOConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SSOAPIGetSSOConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiSsoV1beta1SSOConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSSOAPIUpdateSSOConnectionResponse parses an HTTP response from a SSOAPIUpdateSSOConnectionWithResponse call
func ParseSSOAPIUpdateSSOConnectionResponse(rsp *http.Response) (*SSOAPIUpdateSSOConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SSOAPIUpdateSSOConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CastaiSsoV1beta1SSOConnection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseScheduledRebalancingAPIListAvailableRebalancingTZResponse parses an HTTP response from a ScheduledRebalancingAPIListAvailableRebalancingTZWithResponse call
func ParseScheduledRebalancingAPIListAvailableRebalancingTZResponse(rsp *http.Response) (*ScheduledRebalancingAPIListAvailableRebalancingTZResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ScheduledRebalancingAPIListAvailableRebalancingTZResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledrebalancingV1ListAvailableRebalancingTZResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIGetAgentStatusResponse parses an HTTP response from a WorkloadOptimizationAPIGetAgentStatusWithResponse call
func ParseWorkloadOptimizationAPIGetAgentStatusResponse(rsp *http.Response) (*WorkloadOptimizationAPIGetAgentStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIGetAgentStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1GetAgentStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIListWorkloadScalingPoliciesResponse parses an HTTP response from a WorkloadOptimizationAPIListWorkloadScalingPoliciesWithResponse call
func ParseWorkloadOptimizationAPIListWorkloadScalingPoliciesResponse(rsp *http.Response) (*WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIListWorkloadScalingPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1ListWorkloadScalingPoliciesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPICreateWorkloadScalingPolicyResponse parses an HTTP response from a WorkloadOptimizationAPICreateWorkloadScalingPolicyWithResponse call
func ParseWorkloadOptimizationAPICreateWorkloadScalingPolicyResponse(rsp *http.Response) (*WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPICreateWorkloadScalingPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1WorkloadScalingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse parses an HTTP response from a WorkloadOptimizationAPIDeleteWorkloadScalingPolicyWithResponse call
func ParseWorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse(rsp *http.Response) (*WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIDeleteWorkloadScalingPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1DeleteWorkloadScalingPolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIGetWorkloadScalingPolicyResponse parses an HTTP response from a WorkloadOptimizationAPIGetWorkloadScalingPolicyWithResponse call
func ParseWorkloadOptimizationAPIGetWorkloadScalingPolicyResponse(rsp *http.Response) (*WorkloadOptimizationAPIGetWorkloadScalingPolicyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIGetWorkloadScalingPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1WorkloadScalingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse parses an HTTP response from a WorkloadOptimizationAPIUpdateWorkloadScalingPolicyWithResponse call
func ParseWorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse(rsp *http.Response) (*WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIUpdateWorkloadScalingPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1WorkloadScalingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse parses an HTTP response from a WorkloadOptimizationAPIAssignScalingPolicyWorkloadsWithResponse call
func ParseWorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse(rsp *http.Response) (*WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIAssignScalingPolicyWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1AssignScalingPolicyWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIListWorkloadEventsResponse parses an HTTP response from a WorkloadOptimizationAPIListWorkloadEventsWithResponse call
func ParseWorkloadOptimizationAPIListWorkloadEventsResponse(rsp *http.Response) (*WorkloadOptimizationAPIListWorkloadEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIListWorkloadEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1ListWorkloadEventsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIListWorkloadsResponse parses an HTTP response from a WorkloadOptimizationAPIListWorkloadsWithResponse call
func ParseWorkloadOptimizationAPIListWorkloadsResponse(rsp *http.Response) (*WorkloadOptimizationAPIListWorkloadsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIListWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1ListWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIGetWorkloadsSummaryResponse parses an HTTP response from a WorkloadOptimizationAPIGetWorkloadsSummaryWithResponse call
func ParseWorkloadOptimizationAPIGetWorkloadsSummaryResponse(rsp *http.Response) (*WorkloadOptimizationAPIGetWorkloadsSummaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIGetWorkloadsSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1GetWorkloadsSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIGetWorkloadResponse parses an HTTP response from a WorkloadOptimizationAPIGetWorkloadWithResponse call
func ParseWorkloadOptimizationAPIGetWorkloadResponse(rsp *http.Response) (*WorkloadOptimizationAPIGetWorkloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIGetWorkloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1GetWorkloadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIUpdateWorkloadResponse parses an HTTP response from a WorkloadOptimizationAPIUpdateWorkloadWithResponse call
func ParseWorkloadOptimizationAPIUpdateWorkloadResponse(rsp *http.Response) (*WorkloadOptimizationAPIUpdateWorkloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIUpdateWorkloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1UpdateWorkloadResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIGetInstallCmdResponse parses an HTTP response from a WorkloadOptimizationAPIGetInstallCmdWithResponse call
func ParseWorkloadOptimizationAPIGetInstallCmdResponse(rsp *http.Response) (*WorkloadOptimizationAPIGetInstallCmdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIGetInstallCmdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1GetInstallCmdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWorkloadOptimizationAPIGetInstallScriptResponse parses an HTTP response from a WorkloadOptimizationAPIGetInstallScriptWithResponse call
func ParseWorkloadOptimizationAPIGetInstallScriptResponse(rsp *http.Response) (*WorkloadOptimizationAPIGetInstallScriptResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIGetInstallScriptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseWorkloadOptimizationAPIUpdateWorkloadV2Response parses an HTTP response from a WorkloadOptimizationAPIUpdateWorkloadV2WithResponse call
func ParseWorkloadOptimizationAPIUpdateWorkloadV2Response(rsp *http.Response) (*WorkloadOptimizationAPIUpdateWorkloadV2Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WorkloadOptimizationAPIUpdateWorkloadV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadoptimizationV1UpdateWorkloadResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
